
ECEN2370_StarterCode_SP25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ef8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000125c  080080a8  080080a8  000090a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009304  08009304  0000b06c  2**0
                  CONTENTS
  4 .ARM          00000008  08009304  08009304  0000a304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800930c  0800930c  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800930c  0800930c  0000a30c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009310  08009310  0000a310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08009314  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b06c  2**0
                  CONTENTS
 10 .bss          00025cf4  2000006c  2000006c  0000b06c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025d60  20025d60  0000b06c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014412  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034ff  00000000  00000000  0001f4ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a0  00000000  00000000  000229b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ff4  00000000  00000000  00023e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000279ad  00000000  00000000  00024e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019890  00000000  00000000  0004c7f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2edd  00000000  00000000  00066081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00148f5e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c8c  00000000  00000000  00148fa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000c0  00000000  00000000  0014ec30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008090 	.word	0x08008090

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08008090 	.word	0x08008090

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	@ 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b96a 	b.w	8000b88 <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	460c      	mov	r4, r1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d14e      	bne.n	8000976 <__udivmoddi4+0xaa>
 80008d8:	4694      	mov	ip, r2
 80008da:	458c      	cmp	ip, r1
 80008dc:	4686      	mov	lr, r0
 80008de:	fab2 f282 	clz	r2, r2
 80008e2:	d962      	bls.n	80009aa <__udivmoddi4+0xde>
 80008e4:	b14a      	cbz	r2, 80008fa <__udivmoddi4+0x2e>
 80008e6:	f1c2 0320 	rsb	r3, r2, #32
 80008ea:	4091      	lsls	r1, r2
 80008ec:	fa20 f303 	lsr.w	r3, r0, r3
 80008f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008f4:	4319      	orrs	r1, r3
 80008f6:	fa00 fe02 	lsl.w	lr, r0, r2
 80008fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008fe:	fa1f f68c 	uxth.w	r6, ip
 8000902:	fbb1 f4f7 	udiv	r4, r1, r7
 8000906:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800090a:	fb07 1114 	mls	r1, r7, r4, r1
 800090e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000912:	fb04 f106 	mul.w	r1, r4, r6
 8000916:	4299      	cmp	r1, r3
 8000918:	d90a      	bls.n	8000930 <__udivmoddi4+0x64>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000922:	f080 8112 	bcs.w	8000b4a <__udivmoddi4+0x27e>
 8000926:	4299      	cmp	r1, r3
 8000928:	f240 810f 	bls.w	8000b4a <__udivmoddi4+0x27e>
 800092c:	3c02      	subs	r4, #2
 800092e:	4463      	add	r3, ip
 8000930:	1a59      	subs	r1, r3, r1
 8000932:	fa1f f38e 	uxth.w	r3, lr
 8000936:	fbb1 f0f7 	udiv	r0, r1, r7
 800093a:	fb07 1110 	mls	r1, r7, r0, r1
 800093e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000942:	fb00 f606 	mul.w	r6, r0, r6
 8000946:	429e      	cmp	r6, r3
 8000948:	d90a      	bls.n	8000960 <__udivmoddi4+0x94>
 800094a:	eb1c 0303 	adds.w	r3, ip, r3
 800094e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000952:	f080 80fc 	bcs.w	8000b4e <__udivmoddi4+0x282>
 8000956:	429e      	cmp	r6, r3
 8000958:	f240 80f9 	bls.w	8000b4e <__udivmoddi4+0x282>
 800095c:	4463      	add	r3, ip
 800095e:	3802      	subs	r0, #2
 8000960:	1b9b      	subs	r3, r3, r6
 8000962:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000966:	2100      	movs	r1, #0
 8000968:	b11d      	cbz	r5, 8000972 <__udivmoddi4+0xa6>
 800096a:	40d3      	lsrs	r3, r2
 800096c:	2200      	movs	r2, #0
 800096e:	e9c5 3200 	strd	r3, r2, [r5]
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	428b      	cmp	r3, r1
 8000978:	d905      	bls.n	8000986 <__udivmoddi4+0xba>
 800097a:	b10d      	cbz	r5, 8000980 <__udivmoddi4+0xb4>
 800097c:	e9c5 0100 	strd	r0, r1, [r5]
 8000980:	2100      	movs	r1, #0
 8000982:	4608      	mov	r0, r1
 8000984:	e7f5      	b.n	8000972 <__udivmoddi4+0xa6>
 8000986:	fab3 f183 	clz	r1, r3
 800098a:	2900      	cmp	r1, #0
 800098c:	d146      	bne.n	8000a1c <__udivmoddi4+0x150>
 800098e:	42a3      	cmp	r3, r4
 8000990:	d302      	bcc.n	8000998 <__udivmoddi4+0xcc>
 8000992:	4290      	cmp	r0, r2
 8000994:	f0c0 80f0 	bcc.w	8000b78 <__udivmoddi4+0x2ac>
 8000998:	1a86      	subs	r6, r0, r2
 800099a:	eb64 0303 	sbc.w	r3, r4, r3
 800099e:	2001      	movs	r0, #1
 80009a0:	2d00      	cmp	r5, #0
 80009a2:	d0e6      	beq.n	8000972 <__udivmoddi4+0xa6>
 80009a4:	e9c5 6300 	strd	r6, r3, [r5]
 80009a8:	e7e3      	b.n	8000972 <__udivmoddi4+0xa6>
 80009aa:	2a00      	cmp	r2, #0
 80009ac:	f040 8090 	bne.w	8000ad0 <__udivmoddi4+0x204>
 80009b0:	eba1 040c 	sub.w	r4, r1, ip
 80009b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009b8:	fa1f f78c 	uxth.w	r7, ip
 80009bc:	2101      	movs	r1, #1
 80009be:	fbb4 f6f8 	udiv	r6, r4, r8
 80009c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009c6:	fb08 4416 	mls	r4, r8, r6, r4
 80009ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ce:	fb07 f006 	mul.w	r0, r7, r6
 80009d2:	4298      	cmp	r0, r3
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x11c>
 80009d6:	eb1c 0303 	adds.w	r3, ip, r3
 80009da:	f106 34ff 	add.w	r4, r6, #4294967295
 80009de:	d202      	bcs.n	80009e6 <__udivmoddi4+0x11a>
 80009e0:	4298      	cmp	r0, r3
 80009e2:	f200 80cd 	bhi.w	8000b80 <__udivmoddi4+0x2b4>
 80009e6:	4626      	mov	r6, r4
 80009e8:	1a1c      	subs	r4, r3, r0
 80009ea:	fa1f f38e 	uxth.w	r3, lr
 80009ee:	fbb4 f0f8 	udiv	r0, r4, r8
 80009f2:	fb08 4410 	mls	r4, r8, r0, r4
 80009f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009fa:	fb00 f707 	mul.w	r7, r0, r7
 80009fe:	429f      	cmp	r7, r3
 8000a00:	d908      	bls.n	8000a14 <__udivmoddi4+0x148>
 8000a02:	eb1c 0303 	adds.w	r3, ip, r3
 8000a06:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a0a:	d202      	bcs.n	8000a12 <__udivmoddi4+0x146>
 8000a0c:	429f      	cmp	r7, r3
 8000a0e:	f200 80b0 	bhi.w	8000b72 <__udivmoddi4+0x2a6>
 8000a12:	4620      	mov	r0, r4
 8000a14:	1bdb      	subs	r3, r3, r7
 8000a16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a1a:	e7a5      	b.n	8000968 <__udivmoddi4+0x9c>
 8000a1c:	f1c1 0620 	rsb	r6, r1, #32
 8000a20:	408b      	lsls	r3, r1
 8000a22:	fa22 f706 	lsr.w	r7, r2, r6
 8000a26:	431f      	orrs	r7, r3
 8000a28:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a2c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a30:	ea43 030c 	orr.w	r3, r3, ip
 8000a34:	40f4      	lsrs	r4, r6
 8000a36:	fa00 f801 	lsl.w	r8, r0, r1
 8000a3a:	0c38      	lsrs	r0, r7, #16
 8000a3c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a40:	fbb4 fef0 	udiv	lr, r4, r0
 8000a44:	fa1f fc87 	uxth.w	ip, r7
 8000a48:	fb00 441e 	mls	r4, r0, lr, r4
 8000a4c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a50:	fb0e f90c 	mul.w	r9, lr, ip
 8000a54:	45a1      	cmp	r9, r4
 8000a56:	fa02 f201 	lsl.w	r2, r2, r1
 8000a5a:	d90a      	bls.n	8000a72 <__udivmoddi4+0x1a6>
 8000a5c:	193c      	adds	r4, r7, r4
 8000a5e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a62:	f080 8084 	bcs.w	8000b6e <__udivmoddi4+0x2a2>
 8000a66:	45a1      	cmp	r9, r4
 8000a68:	f240 8081 	bls.w	8000b6e <__udivmoddi4+0x2a2>
 8000a6c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a70:	443c      	add	r4, r7
 8000a72:	eba4 0409 	sub.w	r4, r4, r9
 8000a76:	fa1f f983 	uxth.w	r9, r3
 8000a7a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a7e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a82:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a86:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a8a:	45a4      	cmp	ip, r4
 8000a8c:	d907      	bls.n	8000a9e <__udivmoddi4+0x1d2>
 8000a8e:	193c      	adds	r4, r7, r4
 8000a90:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a94:	d267      	bcs.n	8000b66 <__udivmoddi4+0x29a>
 8000a96:	45a4      	cmp	ip, r4
 8000a98:	d965      	bls.n	8000b66 <__udivmoddi4+0x29a>
 8000a9a:	3b02      	subs	r3, #2
 8000a9c:	443c      	add	r4, r7
 8000a9e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000aa2:	fba0 9302 	umull	r9, r3, r0, r2
 8000aa6:	eba4 040c 	sub.w	r4, r4, ip
 8000aaa:	429c      	cmp	r4, r3
 8000aac:	46ce      	mov	lr, r9
 8000aae:	469c      	mov	ip, r3
 8000ab0:	d351      	bcc.n	8000b56 <__udivmoddi4+0x28a>
 8000ab2:	d04e      	beq.n	8000b52 <__udivmoddi4+0x286>
 8000ab4:	b155      	cbz	r5, 8000acc <__udivmoddi4+0x200>
 8000ab6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aba:	eb64 040c 	sbc.w	r4, r4, ip
 8000abe:	fa04 f606 	lsl.w	r6, r4, r6
 8000ac2:	40cb      	lsrs	r3, r1
 8000ac4:	431e      	orrs	r6, r3
 8000ac6:	40cc      	lsrs	r4, r1
 8000ac8:	e9c5 6400 	strd	r6, r4, [r5]
 8000acc:	2100      	movs	r1, #0
 8000ace:	e750      	b.n	8000972 <__udivmoddi4+0xa6>
 8000ad0:	f1c2 0320 	rsb	r3, r2, #32
 8000ad4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ad8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000adc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ae0:	4094      	lsls	r4, r2
 8000ae2:	430c      	orrs	r4, r1
 8000ae4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aec:	fa1f f78c 	uxth.w	r7, ip
 8000af0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af4:	fb08 3110 	mls	r1, r8, r0, r3
 8000af8:	0c23      	lsrs	r3, r4, #16
 8000afa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000afe:	fb00 f107 	mul.w	r1, r0, r7
 8000b02:	4299      	cmp	r1, r3
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0x24c>
 8000b06:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b0e:	d22c      	bcs.n	8000b6a <__udivmoddi4+0x29e>
 8000b10:	4299      	cmp	r1, r3
 8000b12:	d92a      	bls.n	8000b6a <__udivmoddi4+0x29e>
 8000b14:	3802      	subs	r0, #2
 8000b16:	4463      	add	r3, ip
 8000b18:	1a5b      	subs	r3, r3, r1
 8000b1a:	b2a4      	uxth	r4, r4
 8000b1c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b20:	fb08 3311 	mls	r3, r8, r1, r3
 8000b24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b28:	fb01 f307 	mul.w	r3, r1, r7
 8000b2c:	42a3      	cmp	r3, r4
 8000b2e:	d908      	bls.n	8000b42 <__udivmoddi4+0x276>
 8000b30:	eb1c 0404 	adds.w	r4, ip, r4
 8000b34:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b38:	d213      	bcs.n	8000b62 <__udivmoddi4+0x296>
 8000b3a:	42a3      	cmp	r3, r4
 8000b3c:	d911      	bls.n	8000b62 <__udivmoddi4+0x296>
 8000b3e:	3902      	subs	r1, #2
 8000b40:	4464      	add	r4, ip
 8000b42:	1ae4      	subs	r4, r4, r3
 8000b44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b48:	e739      	b.n	80009be <__udivmoddi4+0xf2>
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	e6f0      	b.n	8000930 <__udivmoddi4+0x64>
 8000b4e:	4608      	mov	r0, r1
 8000b50:	e706      	b.n	8000960 <__udivmoddi4+0x94>
 8000b52:	45c8      	cmp	r8, r9
 8000b54:	d2ae      	bcs.n	8000ab4 <__udivmoddi4+0x1e8>
 8000b56:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b5a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b5e:	3801      	subs	r0, #1
 8000b60:	e7a8      	b.n	8000ab4 <__udivmoddi4+0x1e8>
 8000b62:	4631      	mov	r1, r6
 8000b64:	e7ed      	b.n	8000b42 <__udivmoddi4+0x276>
 8000b66:	4603      	mov	r3, r0
 8000b68:	e799      	b.n	8000a9e <__udivmoddi4+0x1d2>
 8000b6a:	4630      	mov	r0, r6
 8000b6c:	e7d4      	b.n	8000b18 <__udivmoddi4+0x24c>
 8000b6e:	46d6      	mov	lr, sl
 8000b70:	e77f      	b.n	8000a72 <__udivmoddi4+0x1a6>
 8000b72:	4463      	add	r3, ip
 8000b74:	3802      	subs	r0, #2
 8000b76:	e74d      	b.n	8000a14 <__udivmoddi4+0x148>
 8000b78:	4606      	mov	r6, r0
 8000b7a:	4623      	mov	r3, r4
 8000b7c:	4608      	mov	r0, r1
 8000b7e:	e70f      	b.n	80009a0 <__udivmoddi4+0xd4>
 8000b80:	3e02      	subs	r6, #2
 8000b82:	4463      	add	r3, ip
 8000b84:	e730      	b.n	80009e8 <__udivmoddi4+0x11c>
 8000b86:	bf00      	nop

08000b88 <__aeabi_idiv0>:
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <ApplicationInit>:

volatile bool isButtonPressed = BUTTON_UNPRESSED;


void ApplicationInit(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000b90:	f003 f910 	bl	8003db4 <initialise_monitor_handles>
    LTCD__Init();
 8000b94:	f000 ff12 	bl	80019bc <LTCD__Init>
    LTCD_Layer_Init(0);
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f000 fecf 	bl	800193c <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 8000b9e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f001 f85c 	bl	8001c60 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 8000ba8:	f001 f956 	bl	8001e58 <InitializeLCDTouch>

	// This is the orientation for the board to be directly up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 8000bac:	4b03      	ldr	r3, [pc, #12]	@ (8000bbc <ApplicationInit+0x30>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	719a      	strb	r2, [r3, #6]

	#endif // COMPILE_TOUCH_FUNCTIONS
	ButtonInitInterruptMode();
 8000bb2:	f000 f91b 	bl	8000dec <ButtonInitInterruptMode>
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000088 	.word	0x20000088

08000bc0 <startGame>:
	visualDemo();
}

#if COMPILE_TOUCH_FUNCTIONS == 1

void startGame(){
 8000bc0:	b5b0      	push	{r4, r5, r7, lr}
 8000bc2:	b09c      	sub	sp, #112	@ 0x70
 8000bc4:	af0c      	add	r7, sp, #48	@ 0x30
	GameData gameInfo = getGameData();
 8000bc6:	463b      	mov	r3, r7
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f000 fdd5 	bl	8001778 <getGameData>
	displayStartScreen();
 8000bce:	f001 f96b 	bl	8001ea8 <displayStartScreen>

	while (1) {
		/* If touch pressed */
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 8000bd2:	481c      	ldr	r0, [pc, #112]	@ (8000c44 <startGame+0x84>)
 8000bd4:	f001 f94b 	bl	8001e6e <returnTouchStateAndLocation>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d1f9      	bne.n	8000bd2 <startGame+0x12>
//			/* Touch valid */
			HAL_Delay(500);
 8000bde:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000be2:	f003 f9d3 	bl	8003f8c <HAL_Delay>
			if(DetermineLeftOrRightTouch(StaticTouchData.x) == LEFT){
 8000be6:	4b17      	ldr	r3, [pc, #92]	@ (8000c44 <startGame+0x84>)
 8000be8:	881b      	ldrh	r3, [r3, #0]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f001 f94b 	bl	8001e86 <DetermineLeftOrRightTouch>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d111      	bne.n	8000c1a <startGame+0x5a>
				gameInfo.mode = SINGLE_PLAYER;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	703b      	strb	r3, [r7, #0]
				setGameData(gameInfo);
 8000bfa:	466d      	mov	r5, sp
 8000bfc:	f107 0410 	add.w	r4, r7, #16
 8000c00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c08:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c0c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000c10:	463b      	mov	r3, r7
 8000c12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c14:	f000 fd94 	bl	8001740 <setGameData>
				break;
 8000c18:	e010      	b.n	8000c3c <startGame+0x7c>
			}else{
				gameInfo.mode = MULTI_PLAYER;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	703b      	strb	r3, [r7, #0]
				setGameData(gameInfo);
 8000c1e:	466d      	mov	r5, sp
 8000c20:	f107 0410 	add.w	r4, r7, #16
 8000c24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c2c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c30:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000c34:	463b      	mov	r3, r7
 8000c36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c38:	f000 fd82 	bl	8001740 <setGameData>
				break;
			}

		}
	}
}
 8000c3c:	bf00      	nop
 8000c3e:	3740      	adds	r7, #64	@ 0x40
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bdb0      	pop	{r4, r5, r7, pc}
 8000c44:	20000088 	.word	0x20000088

08000c48 <Run_Game>:

void Run_Game(void){
 8000c48:	b5b0      	push	{r4, r5, r7, lr}
 8000c4a:	b0ac      	sub	sp, #176	@ 0xb0
 8000c4c:	af0c      	add	r7, sp, #48	@ 0x30
	startGame();
 8000c4e:	f7ff ffb7 	bl	8000bc0 <startGame>
	GameData gameInfo = getGameData();
 8000c52:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 fd8e 	bl	8001778 <getGameData>


	displayGameScreen();
 8000c5c:	f001 f9b4 	bl	8001fc8 <displayGameScreen>

	gameInfo.startTime = HAL_GetTick();
 8000c60:	f003 f988 	bl	8003f74 <HAL_GetTick>
 8000c64:	4603      	mov	r3, r0
 8000c66:	67bb      	str	r3, [r7, #120]	@ 0x78
	setGameData(gameInfo);
 8000c68:	466d      	mov	r5, sp
 8000c6a:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8000c6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c76:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c7a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000c7e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c84:	f000 fd5c 	bl	8001740 <setGameData>
	isButtonPressed = false;
 8000c88:	4b48      	ldr	r3, [pc, #288]	@ (8000dac <Run_Game+0x164>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	701a      	strb	r2, [r3, #0]

	while(1){
		HAL_Delay(200);
 8000c8e:	20c8      	movs	r0, #200	@ 0xc8
 8000c90:	f003 f97c 	bl	8003f8c <HAL_Delay>
		gameInfo = getGameData();
 8000c94:	463b      	mov	r3, r7
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 fd6e 	bl	8001778 <getGameData>
 8000c9c:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8000ca0:	463d      	mov	r5, r7
 8000ca2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ca4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ca6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ca8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000caa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000cb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		if(gameInfo.redWin || gameInfo.yellowWin || isBoardFull()){
 8000cb6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d108      	bne.n	8000cd0 <Run_Game+0x88>
 8000cbe:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d104      	bne.n	8000cd0 <Run_Game+0x88>
 8000cc6:	f000 fc05 	bl	80014d4 <isBoardFull>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d030      	beq.n	8000d32 <Run_Game+0xea>
			gameInfo.endTime = HAL_GetTick();
 8000cd0:	f003 f950 	bl	8003f74 <HAL_GetTick>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
			setGameData(gameInfo);
 8000cd8:	466d      	mov	r5, sp
 8000cda:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8000cde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ce0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ce2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ce4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ce6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000cea:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000cee:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000cf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cf4:	f000 fd24 	bl	8001740 <setGameData>
			//Delay so user can see win/loss
			HAL_Delay(1000);
 8000cf8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cfc:	f003 f946 	bl	8003f8c <HAL_Delay>
			displayWinner();
 8000d00:	f001 fa5e 	bl	80021c0 <displayWinner>
			while(1){
				if(returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed){
 8000d04:	482a      	ldr	r0, [pc, #168]	@ (8000db0 <Run_Game+0x168>)
 8000d06:	f001 f8b2 	bl	8001e6e <returnTouchStateAndLocation>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1f9      	bne.n	8000d04 <Run_Game+0xbc>
					displayEndScreen();
 8000d10:	f001 fb22 	bl	8002358 <displayEndScreen>
					while(1){
						HAL_Delay(200);
 8000d14:	20c8      	movs	r0, #200	@ 0xc8
 8000d16:	f003 f939 	bl	8003f8c <HAL_Delay>
						if(returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed){
 8000d1a:	4825      	ldr	r0, [pc, #148]	@ (8000db0 <Run_Game+0x168>)
 8000d1c:	f001 f8a7 	bl	8001e6e <returnTouchStateAndLocation>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d1f6      	bne.n	8000d14 <Run_Game+0xcc>
							HAL_Delay(200);
 8000d26:	20c8      	movs	r0, #200	@ 0xc8
 8000d28:	f003 f930 	bl	8003f8c <HAL_Delay>
							break;
 8000d2c:	bf00      	nop
						}
					}
					break;
 8000d2e:	bf00      	nop
				}
			}
			break;
 8000d30:	e037      	b.n	8000da2 <Run_Game+0x15a>
		}

		if(gameInfo.currentPlayer == RED_PLAYER){
 8000d32:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d104      	bne.n	8000d44 <Run_Game+0xfc>
			spawnPendingToken(LCD_COLOR_RED);
 8000d3a:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8000d3e:	f000 f8d2 	bl	8000ee6 <spawnPendingToken>
 8000d42:	e003      	b.n	8000d4c <Run_Game+0x104>
		}else{
			spawnPendingToken(LCD_COLOR_YELLOW);
 8000d44:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8000d48:	f000 f8cd 	bl	8000ee6 <spawnPendingToken>
		}

		if(gameInfo.mode == SINGLE_PLAYER && gameInfo.currentPlayer == YELLOW_PLAYER){
 8000d4c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000d50:	f083 0301 	eor.w	r3, r3, #1
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d006      	beq.n	8000d68 <Run_Game+0x120>
 8000d5a:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d102      	bne.n	8000d68 <Run_Game+0x120>
#if (PLAY_AI == 1 || PLAY_AI == 2)
			OpponentPlayAI();
 8000d62:	f000 fc32 	bl	80015ca <OpponentPlayAI>
 8000d66:	e01b      	b.n	8000da0 <Run_Game+0x158>

#else
			OpponentPlayRNG();
#endif
		}else{
			if(returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed){
 8000d68:	4811      	ldr	r0, [pc, #68]	@ (8000db0 <Run_Game+0x168>)
 8000d6a:	f001 f880 	bl	8001e6e <returnTouchStateAndLocation>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d108      	bne.n	8000d86 <Run_Game+0x13e>
				movePendingToken(DetermineLeftOrRightTouch(StaticTouchData.x));
 8000d74:	4b0e      	ldr	r3, [pc, #56]	@ (8000db0 <Run_Game+0x168>)
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f001 f884 	bl	8001e86 <DetermineLeftOrRightTouch>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f000 f8ed 	bl	8000f60 <movePendingToken>
			}
			if(isButtonPressed){
 8000d86:	4b09      	ldr	r3, [pc, #36]	@ (8000dac <Run_Game+0x164>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	f43f af7e 	beq.w	8000c8e <Run_Game+0x46>
				dropToken(LCD_COLOR_RED);
 8000d92:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8000d96:	f000 f949 	bl	800102c <dropToken>
				isButtonPressed = BUTTON_UNPRESSED;
 8000d9a:	4b04      	ldr	r3, [pc, #16]	@ (8000dac <Run_Game+0x164>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
		HAL_Delay(200);
 8000da0:	e775      	b.n	8000c8e <Run_Game+0x46>
			}
		}
	}
}
 8000da2:	bf00      	nop
 8000da4:	3780      	adds	r7, #128	@ 0x80
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bdb0      	pop	{r4, r5, r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000090 	.word	0x20000090
 8000db0:	20000088 	.word	0x20000088

08000db4 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
//	{
//		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
//		isButtonPressed = true;
//	}

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000db8:	2001      	movs	r0, #1
 8000dba:	f003 fcef 	bl	800479c <HAL_GPIO_EXTI_IRQHandler>
	return;
 8000dbe:	bf00      	nop
}
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0){
 8000dce:	88fb      	ldrh	r3, [r7, #6]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d102      	bne.n	8000dda <HAL_GPIO_EXTI_Callback+0x16>
		isButtonPressed = BUTTON_PRESSED;
 8000dd4:	4b04      	ldr	r3, [pc, #16]	@ (8000de8 <HAL_GPIO_EXTI_Callback+0x24>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	701a      	strb	r2, [r3, #0]
	}
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000090 	.word	0x20000090

08000dec <ButtonInitInterruptMode>:
 */


#include "Button_Driver.h"

void ButtonInitInterruptMode(){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	603b      	str	r3, [r7, #0]
 8000df6:	4b14      	ldr	r3, [pc, #80]	@ (8000e48 <ButtonInitInterruptMode+0x5c>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	4a13      	ldr	r2, [pc, #76]	@ (8000e48 <ButtonInitInterruptMode+0x5c>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e02:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <ButtonInitInterruptMode+0x5c>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	603b      	str	r3, [r7, #0]
 8000e0c:	683b      	ldr	r3, [r7, #0]


	GPIO_InitTypeDef pinConfig = {0};
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]

	pinConfig.Pin = GPIO_PIN_0;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	607b      	str	r3, [r7, #4]
	pinConfig.Mode = GPIO_MODE_IT_RISING;
 8000e20:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e24:	60bb      	str	r3, [r7, #8]
	pinConfig.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e26:	2303      	movs	r3, #3
 8000e28:	613b      	str	r3, [r7, #16]
	pinConfig.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &pinConfig);
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	4619      	mov	r1, r3
 8000e32:	4806      	ldr	r0, [pc, #24]	@ (8000e4c <ButtonInitInterruptMode+0x60>)
 8000e34:	f003 f9e0 	bl	80041f8 <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e38:	2006      	movs	r0, #6
 8000e3a:	f003 f9c2 	bl	80041c2 <HAL_NVIC_EnableIRQ>
}
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40020000 	.word	0x40020000

08000e50 <gameInit>:

#include "Game_Driver.h"

GameData gameInfo = {0};

void gameInit(){
 8000e50:	b5b0      	push	{r4, r5, r7, lr}
 8000e52:	b09e      	sub	sp, #120	@ 0x78
 8000e54:	af0c      	add	r7, sp, #48	@ 0x30
	GameData gameInfo = getGameData();
 8000e56:	463b      	mov	r3, r7
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 fc8d 	bl	8001778 <getGameData>

	gameInfo.currentPlayer = RED_PLAYER;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	707b      	strb	r3, [r7, #1]

	gameInfo.coinDropped = false;
 8000e62:	2300      	movs	r3, #0
 8000e64:	71bb      	strb	r3, [r7, #6]

	gameInfo.tokenLocation.x = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	813b      	strh	r3, [r7, #8]
	gameInfo.tokenLocation.y = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	817b      	strh	r3, [r7, #10]
	gameInfo.tokenLocation.column = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	733b      	strb	r3, [r7, #12]
	gameInfo.tokenLocation.row = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	737b      	strb	r3, [r7, #13]

	gameInfo.startTime = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	63bb      	str	r3, [r7, #56]	@ 0x38
	gameInfo.endTime = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c

	gameInfo.redWin = false;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	70bb      	strb	r3, [r7, #2]
	gameInfo.yellowWin = false;
 8000e82:	2300      	movs	r3, #0
 8000e84:	713b      	strb	r3, [r7, #4]

	//clean board
	for(int i = 0; i < NUM_ROWS; i++){
 8000e86:	2300      	movs	r3, #0
 8000e88:	647b      	str	r3, [r7, #68]	@ 0x44
 8000e8a:	e016      	b.n	8000eba <gameInit+0x6a>
		for(int j = 0; j < NUM_COLUMNS; j++){
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8000e90:	e00d      	b.n	8000eae <gameInit+0x5e>
			gameInfo.board[i][j] = EMPTY_SQUARE;
 8000e92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000e94:	4613      	mov	r3, r2
 8000e96:	00db      	lsls	r3, r3, #3
 8000e98:	1a9b      	subs	r3, r3, r2
 8000e9a:	3348      	adds	r3, #72	@ 0x48
 8000e9c:	19da      	adds	r2, r3, r7
 8000e9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ea0:	4413      	add	r3, r2
 8000ea2:	3b3a      	subs	r3, #58	@ 0x3a
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < NUM_COLUMNS; j++){
 8000ea8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000eaa:	3301      	adds	r3, #1
 8000eac:	643b      	str	r3, [r7, #64]	@ 0x40
 8000eae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000eb0:	2b06      	cmp	r3, #6
 8000eb2:	ddee      	ble.n	8000e92 <gameInit+0x42>
	for(int i = 0; i < NUM_ROWS; i++){
 8000eb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8000eba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ebc:	2b05      	cmp	r3, #5
 8000ebe:	dde5      	ble.n	8000e8c <gameInit+0x3c>
		}
	}

	setGameData(gameInfo);
 8000ec0:	466d      	mov	r5, sp
 8000ec2:	f107 0410 	add.w	r4, r7, #16
 8000ec6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ec8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ecc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ece:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ed2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eda:	f000 fc31 	bl	8001740 <setGameData>
}
 8000ede:	bf00      	nop
 8000ee0:	3748      	adds	r7, #72	@ 0x48
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bdb0      	pop	{r4, r5, r7, pc}

08000ee6 <spawnPendingToken>:

void spawnPendingToken(uint16_t tokenColor){
 8000ee6:	b5b0      	push	{r4, r5, r7, lr}
 8000ee8:	b09e      	sub	sp, #120	@ 0x78
 8000eea:	af0c      	add	r7, sp, #48	@ 0x30
 8000eec:	4603      	mov	r3, r0
 8000eee:	80fb      	strh	r3, [r7, #6]
	GameData gameInfo = getGameData();
 8000ef0:	f107 0308 	add.w	r3, r7, #8
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f000 fc3f 	bl	8001778 <getGameData>

	if((gameInfo.tokenLocation.x == 0 && gameInfo.tokenLocation.y == 0) || gameInfo.coinDropped == true){
 8000efa:	8a3b      	ldrh	r3, [r7, #16]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d102      	bne.n	8000f06 <spawnPendingToken+0x20>
 8000f00:	8a7b      	ldrh	r3, [r7, #18]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d002      	beq.n	8000f0c <spawnPendingToken+0x26>
 8000f06:	7bbb      	ldrb	r3, [r7, #14]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d007      	beq.n	8000f1c <spawnPendingToken+0x36>
		gameInfo.tokenLocation.x = (LCD_PIXEL_WIDTH * CHIP_OFFSET);
 8000f0c:	2378      	movs	r3, #120	@ 0x78
 8000f0e:	823b      	strh	r3, [r7, #16]
		gameInfo.tokenLocation.y = (LCD_PIXEL_HEIGHT * COLUMN_NUM_DIVISOR) * CHIP_OFFSET;
 8000f10:	2316      	movs	r3, #22
 8000f12:	827b      	strh	r3, [r7, #18]
		gameInfo.tokenLocation.column = CENTER_COL;
 8000f14:	2303      	movs	r3, #3
 8000f16:	753b      	strb	r3, [r7, #20]
		gameInfo.coinDropped = false;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	73bb      	strb	r3, [r7, #14]
	}
	setGameData(gameInfo);
 8000f1c:	466d      	mov	r5, sp
 8000f1e:	f107 0418 	add.w	r4, r7, #24
 8000f22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f2a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f2e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000f32:	f107 0308 	add.w	r3, r7, #8
 8000f36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f38:	f000 fc02 	bl	8001740 <setGameData>

	if (gameInfo.tokenLocation.x >= LCD_PIXEL_WIDTH || gameInfo.tokenLocation.y >= LCD_PIXEL_HEIGHT){
 8000f3c:	8a3b      	ldrh	r3, [r7, #16]
 8000f3e:	2bef      	cmp	r3, #239	@ 0xef
 8000f40:	d80a      	bhi.n	8000f58 <spawnPendingToken+0x72>
 8000f42:	8a7b      	ldrh	r3, [r7, #18]
 8000f44:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000f48:	d206      	bcs.n	8000f58 <spawnPendingToken+0x72>
		return;
	}

	LCD_Draw_Circle_Fill(gameInfo.tokenLocation.x, gameInfo.tokenLocation.y, CHIP_RADIUS, tokenColor);
 8000f4a:	8a38      	ldrh	r0, [r7, #16]
 8000f4c:	8a79      	ldrh	r1, [r7, #18]
 8000f4e:	88fb      	ldrh	r3, [r7, #6]
 8000f50:	220f      	movs	r2, #15
 8000f52:	f000 fdaf 	bl	8001ab4 <LCD_Draw_Circle_Fill>
 8000f56:	e000      	b.n	8000f5a <spawnPendingToken+0x74>
		return;
 8000f58:	bf00      	nop
}
 8000f5a:	3748      	adds	r7, #72	@ 0x48
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bdb0      	pop	{r4, r5, r7, pc}

08000f60 <movePendingToken>:


void movePendingToken(uint8_t direction){
 8000f60:	b5b0      	push	{r4, r5, r7, lr}
 8000f62:	b09e      	sub	sp, #120	@ 0x78
 8000f64:	af0c      	add	r7, sp, #48	@ 0x30
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
	GameData gameInfo = getGameData();
 8000f6a:	f107 0308 	add.w	r3, r7, #8
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 fc02 	bl	8001778 <getGameData>
	if(gameInfo.tokenLocation.column >= LEFT_MOST_COL || gameInfo.tokenLocation.column <= RIGHT_MOST_COL){

		if(direction == LEFT && gameInfo.tokenLocation.column != LEFT_MOST_COL){
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d107      	bne.n	8000f8a <movePendingToken+0x2a>
 8000f7a:	7d3b      	ldrb	r3, [r7, #20]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d004      	beq.n	8000f8a <movePendingToken+0x2a>
			gameInfo.tokenLocation.column--;
 8000f80:	7d3b      	ldrb	r3, [r7, #20]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	753b      	strb	r3, [r7, #20]
 8000f88:	e009      	b.n	8000f9e <movePendingToken+0x3e>
		}else if(direction == RIGHT && gameInfo.tokenLocation.column != RIGHT_MOST_COL){
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d106      	bne.n	8000f9e <movePendingToken+0x3e>
 8000f90:	7d3b      	ldrb	r3, [r7, #20]
 8000f92:	2b06      	cmp	r3, #6
 8000f94:	d003      	beq.n	8000f9e <movePendingToken+0x3e>
			gameInfo.tokenLocation.column++;
 8000f96:	7d3b      	ldrb	r3, [r7, #20]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	753b      	strb	r3, [r7, #20]
		}

		gameInfo.tokenLocation.x = (LCD_PIXEL_WIDTH * COLUMN_NUM_DIVISOR * (gameInfo.tokenLocation.column + CHIP_OFFSET));
 8000f9e:	7d3b      	ldrb	r3, [r7, #20]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fbf1 	bl	8000788 <__aeabi_i2d>
 8000fa6:	f04f 0200 	mov.w	r2, #0
 8000faa:	4b1e      	ldr	r3, [pc, #120]	@ (8001024 <movePendingToken+0xc4>)
 8000fac:	f7ff faa0 	bl	80004f0 <__adddf3>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8001028 <movePendingToken+0xc8>)
 8000fbe:	f7ff f967 	bl	8000290 <__aeabi_dmul>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f7ff fc47 	bl	800085c <__aeabi_d2uiz>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	823b      	strh	r3, [r7, #16]

		if(gameInfo.tokenLocation.y == 0){
 8000fd4:	8a7b      	ldrh	r3, [r7, #18]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <movePendingToken+0x7e>
			gameInfo.tokenLocation.y = (LCD_PIXEL_HEIGHT * COLUMN_NUM_DIVISOR) * CHIP_OFFSET;
 8000fda:	2316      	movs	r3, #22
 8000fdc:	827b      	strh	r3, [r7, #18]
		}
		setGameData(gameInfo);
 8000fde:	466d      	mov	r5, sp
 8000fe0:	f107 0418 	add.w	r4, r7, #24
 8000fe4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fe6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fe8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ff0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000ff4:	f107 0308 	add.w	r3, r7, #8
 8000ff8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ffa:	f000 fba1 	bl	8001740 <setGameData>
	}
	displayGameScreen();
 8000ffe:	f000 ffe3 	bl	8001fc8 <displayGameScreen>
	if(gameInfo.currentPlayer == RED_PLAYER){
 8001002:	7a7b      	ldrb	r3, [r7, #9]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d104      	bne.n	8001012 <movePendingToken+0xb2>
		spawnPendingToken(LCD_COLOR_RED);
 8001008:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800100c:	f7ff ff6b 	bl	8000ee6 <spawnPendingToken>
	}else{
		spawnPendingToken(LCD_COLOR_YELLOW);
	}

}
 8001010:	e003      	b.n	800101a <movePendingToken+0xba>
		spawnPendingToken(LCD_COLOR_YELLOW);
 8001012:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8001016:	f7ff ff66 	bl	8000ee6 <spawnPendingToken>
}
 800101a:	bf00      	nop
 800101c:	3748      	adds	r7, #72	@ 0x48
 800101e:	46bd      	mov	sp, r7
 8001020:	bdb0      	pop	{r4, r5, r7, pc}
 8001022:	bf00      	nop
 8001024:	3fe00000 	.word	0x3fe00000
 8001028:	40410000 	.word	0x40410000

0800102c <dropToken>:

void dropToken(uint16_t tokenColor){
 800102c:	b5b0      	push	{r4, r5, r7, lr}
 800102e:	b0a0      	sub	sp, #128	@ 0x80
 8001030:	af0c      	add	r7, sp, #48	@ 0x30
 8001032:	4603      	mov	r3, r0
 8001034:	80fb      	strh	r3, [r7, #6]
	GameData gameInfo = getGameData();
 8001036:	f107 030c 	add.w	r3, r7, #12
 800103a:	4618      	mov	r0, r3
 800103c:	f000 fb9c 	bl	8001778 <getGameData>
	for(int i = 5; i >= 0; i--){
 8001040:	2305      	movs	r3, #5
 8001042:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001044:	e06d      	b.n	8001122 <dropToken+0xf6>
		if(gameInfo.board[i][gameInfo.tokenLocation.column] == EMPTY_SQUARE){
 8001046:	7e3b      	ldrb	r3, [r7, #24]
 8001048:	4619      	mov	r1, r3
 800104a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800104c:	4613      	mov	r3, r2
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	1a9b      	subs	r3, r3, r2
 8001052:	3350      	adds	r3, #80	@ 0x50
 8001054:	443b      	add	r3, r7
 8001056:	440b      	add	r3, r1
 8001058:	3b36      	subs	r3, #54	@ 0x36
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d15d      	bne.n	800111c <dropToken+0xf0>
			if(gameInfo.currentPlayer == RED_PLAYER){
 8001060:	7b7b      	ldrb	r3, [r7, #13]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d12b      	bne.n	80010be <dropToken+0x92>
				gameInfo.board[i][gameInfo.tokenLocation.column] = RED_TAKEN_SQUARE;
 8001066:	7e3b      	ldrb	r3, [r7, #24]
 8001068:	4619      	mov	r1, r3
 800106a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800106c:	4613      	mov	r3, r2
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	1a9b      	subs	r3, r3, r2
 8001072:	3350      	adds	r3, #80	@ 0x50
 8001074:	443b      	add	r3, r7
 8001076:	440b      	add	r3, r1
 8001078:	3b36      	subs	r3, #54	@ 0x36
 800107a:	2201      	movs	r2, #1
 800107c:	701a      	strb	r2, [r3, #0]
				gameInfo.tokenLocation.y = (LCD_PIXEL_HEIGHT * ROW_NUM_DIVISOR * (i + 1 + CHIP_OFFSET));
 800107e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001080:	3301      	adds	r3, #1
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fb80 	bl	8000788 <__aeabi_i2d>
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	4b77      	ldr	r3, [pc, #476]	@ (800126c <dropToken+0x240>)
 800108e:	f7ff fa2f 	bl	80004f0 <__adddf3>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4610      	mov	r0, r2
 8001098:	4619      	mov	r1, r3
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	4b74      	ldr	r3, [pc, #464]	@ (8001270 <dropToken+0x244>)
 80010a0:	f7ff f8f6 	bl	8000290 <__aeabi_dmul>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	f7ff fbd6 	bl	800085c <__aeabi_d2uiz>
 80010b0:	4603      	mov	r3, r0
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	82fb      	strh	r3, [r7, #22]
				gameInfo.tokenLocation.row = i;
 80010b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	767b      	strb	r3, [r7, #25]
				break;
 80010bc:	e034      	b.n	8001128 <dropToken+0xfc>

			}else if(gameInfo.currentPlayer == YELLOW_PLAYER){
 80010be:	7b7b      	ldrb	r3, [r7, #13]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d12b      	bne.n	800111c <dropToken+0xf0>
				gameInfo.board[i][gameInfo.tokenLocation.column] = YELLOW_TAKEN_SQUARE;
 80010c4:	7e3b      	ldrb	r3, [r7, #24]
 80010c6:	4619      	mov	r1, r3
 80010c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80010ca:	4613      	mov	r3, r2
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	1a9b      	subs	r3, r3, r2
 80010d0:	3350      	adds	r3, #80	@ 0x50
 80010d2:	443b      	add	r3, r7
 80010d4:	440b      	add	r3, r1
 80010d6:	3b36      	subs	r3, #54	@ 0x36
 80010d8:	2202      	movs	r2, #2
 80010da:	701a      	strb	r2, [r3, #0]
				gameInfo.tokenLocation.y = (LCD_PIXEL_HEIGHT * ROW_NUM_DIVISOR * (i + 1 + CHIP_OFFSET));
 80010dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80010de:	3301      	adds	r3, #1
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fb51 	bl	8000788 <__aeabi_i2d>
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	4b60      	ldr	r3, [pc, #384]	@ (800126c <dropToken+0x240>)
 80010ec:	f7ff fa00 	bl	80004f0 <__adddf3>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4610      	mov	r0, r2
 80010f6:	4619      	mov	r1, r3
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	4b5c      	ldr	r3, [pc, #368]	@ (8001270 <dropToken+0x244>)
 80010fe:	f7ff f8c7 	bl	8000290 <__aeabi_dmul>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4610      	mov	r0, r2
 8001108:	4619      	mov	r1, r3
 800110a:	f7ff fba7 	bl	800085c <__aeabi_d2uiz>
 800110e:	4603      	mov	r3, r0
 8001110:	b29b      	uxth	r3, r3
 8001112:	82fb      	strh	r3, [r7, #22]
				gameInfo.tokenLocation.row = i;
 8001114:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001116:	b2db      	uxtb	r3, r3
 8001118:	767b      	strb	r3, [r7, #25]
				break;
 800111a:	e005      	b.n	8001128 <dropToken+0xfc>
	for(int i = 5; i >= 0; i--){
 800111c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800111e:	3b01      	subs	r3, #1
 8001120:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001122:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001124:	2b00      	cmp	r3, #0
 8001126:	da8e      	bge.n	8001046 <dropToken+0x1a>
			}
		}
	}


	gameInfo.tokenLocation.x = (LCD_PIXEL_WIDTH * COLUMN_NUM_DIVISOR * (gameInfo.tokenLocation.column + CHIP_OFFSET));
 8001128:	7e3b      	ldrb	r3, [r7, #24]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fb2c 	bl	8000788 <__aeabi_i2d>
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	4b4d      	ldr	r3, [pc, #308]	@ (800126c <dropToken+0x240>)
 8001136:	f7ff f9db 	bl	80004f0 <__adddf3>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	4610      	mov	r0, r2
 8001140:	4619      	mov	r1, r3
 8001142:	f04f 0200 	mov.w	r2, #0
 8001146:	4b4b      	ldr	r3, [pc, #300]	@ (8001274 <dropToken+0x248>)
 8001148:	f7ff f8a2 	bl	8000290 <__aeabi_dmul>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4610      	mov	r0, r2
 8001152:	4619      	mov	r1, r3
 8001154:	f7ff fb82 	bl	800085c <__aeabi_d2uiz>
 8001158:	4603      	mov	r3, r0
 800115a:	b29b      	uxth	r3, r3
 800115c:	82bb      	strh	r3, [r7, #20]

	if(!isColumnFull(gameInfo.tokenLocation.column)){
 800115e:	7e3b      	ldrb	r3, [r7, #24]
 8001160:	4618      	mov	r0, r3
 8001162:	f000 f991 	bl	8001488 <isColumnFull>
 8001166:	4603      	mov	r3, r0
 8001168:	f083 0301 	eor.w	r3, r3, #1
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b00      	cmp	r3, #0
 8001170:	d078      	beq.n	8001264 <dropToken+0x238>
		setGameData(gameInfo);
 8001172:	466d      	mov	r5, sp
 8001174:	f107 041c 	add.w	r4, r7, #28
 8001178:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800117a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800117c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800117e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001180:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001184:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800118e:	f000 fad7 	bl	8001740 <setGameData>
		displayGameScreen();
 8001192:	f000 ff19 	bl	8001fc8 <displayGameScreen>

		if(gameInfo.currentPlayer == RED_PLAYER){
 8001196:	7b7b      	ldrb	r3, [r7, #13]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d104      	bne.n	80011a6 <dropToken+0x17a>
			spawnPendingToken(LCD_COLOR_RED);
 800119c:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80011a0:	f7ff fea1 	bl	8000ee6 <spawnPendingToken>
 80011a4:	e003      	b.n	80011ae <dropToken+0x182>
		}else{
			spawnPendingToken(LCD_COLOR_YELLOW);
 80011a6:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 80011aa:	f7ff fe9c 	bl	8000ee6 <spawnPendingToken>
		}

		gameInfo.coinDropped = true;
 80011ae:	2301      	movs	r3, #1
 80011b0:	74bb      	strb	r3, [r7, #18]

		if(gameInfo.currentPlayer == RED_PLAYER){
 80011b2:	7b7b      	ldrb	r3, [r7, #13]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d11b      	bne.n	80011f0 <dropToken+0x1c4>
			gameInfo.redWin = check_win_cond();
 80011b8:	f000 f8c0 	bl	800133c <check_win_cond>
 80011bc:	4603      	mov	r3, r0
 80011be:	73bb      	strb	r3, [r7, #14]

			if(gameInfo.redWin){
 80011c0:	7bbb      	ldrb	r3, [r7, #14]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d030      	beq.n	8001228 <dropToken+0x1fc>
				gameInfo.numRedWins++;
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
 80011c8:	3301      	adds	r3, #1
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	73fb      	strb	r3, [r7, #15]
				setGameData(gameInfo);
 80011ce:	466d      	mov	r5, sp
 80011d0:	f107 041c 	add.w	r4, r7, #28
 80011d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011dc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011e0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011ea:	f000 faa9 	bl	8001740 <setGameData>
				return;
 80011ee:	e039      	b.n	8001264 <dropToken+0x238>
			}
		}else{
			gameInfo.yellowWin = check_win_cond();
 80011f0:	f000 f8a4 	bl	800133c <check_win_cond>
 80011f4:	4603      	mov	r3, r0
 80011f6:	743b      	strb	r3, [r7, #16]

			if(gameInfo.yellowWin) {
 80011f8:	7c3b      	ldrb	r3, [r7, #16]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d014      	beq.n	8001228 <dropToken+0x1fc>
				gameInfo.numYellowWins++;
 80011fe:	7c7b      	ldrb	r3, [r7, #17]
 8001200:	3301      	adds	r3, #1
 8001202:	b2db      	uxtb	r3, r3
 8001204:	747b      	strb	r3, [r7, #17]
				setGameData(gameInfo);
 8001206:	466d      	mov	r5, sp
 8001208:	f107 041c 	add.w	r4, r7, #28
 800120c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800120e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001210:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001212:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001214:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001218:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001222:	f000 fa8d 	bl	8001740 <setGameData>
				return;
 8001226:	e01d      	b.n	8001264 <dropToken+0x238>
			}
		}

		gameInfo.tokenLocation.x = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	82bb      	strh	r3, [r7, #20]
		gameInfo.tokenLocation.y = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	82fb      	strh	r3, [r7, #22]
		gameInfo.tokenLocation.column = 3;
 8001230:	2303      	movs	r3, #3
 8001232:	763b      	strb	r3, [r7, #24]

		if(gameInfo.currentPlayer == RED_PLAYER){
 8001234:	7b7b      	ldrb	r3, [r7, #13]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d102      	bne.n	8001240 <dropToken+0x214>
			gameInfo.currentPlayer = YELLOW_PLAYER;
 800123a:	2301      	movs	r3, #1
 800123c:	737b      	strb	r3, [r7, #13]
 800123e:	e001      	b.n	8001244 <dropToken+0x218>
		}else{
			gameInfo.currentPlayer = RED_PLAYER;
 8001240:	2300      	movs	r3, #0
 8001242:	737b      	strb	r3, [r7, #13]
		}

		setGameData(gameInfo);
 8001244:	466d      	mov	r5, sp
 8001246:	f107 041c 	add.w	r4, r7, #28
 800124a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800124c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800124e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001250:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001252:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001256:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800125a:	f107 030c 	add.w	r3, r7, #12
 800125e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001260:	f000 fa6e 	bl	8001740 <setGameData>
	}
}
 8001264:	3750      	adds	r7, #80	@ 0x50
 8001266:	46bd      	mov	sp, r7
 8001268:	bdb0      	pop	{r4, r5, r7, pc}
 800126a:	bf00      	nop
 800126c:	3fe00000 	.word	0x3fe00000
 8001270:	40468000 	.word	0x40468000
 8001274:	40410000 	.word	0x40410000

08001278 <countMatchesInEachDirection>:

int countMatchesInEachDirection(uint8_t currPlayer, uint8_t currRow, uint8_t currCol, int rowDirection, int colDirection){
 8001278:	b580      	push	{r7, lr}
 800127a:	b096      	sub	sp, #88	@ 0x58
 800127c:	af00      	add	r7, sp, #0
 800127e:	603b      	str	r3, [r7, #0]
 8001280:	4603      	mov	r3, r0
 8001282:	71fb      	strb	r3, [r7, #7]
 8001284:	460b      	mov	r3, r1
 8001286:	71bb      	strb	r3, [r7, #6]
 8001288:	4613      	mov	r3, r2
 800128a:	717b      	strb	r3, [r7, #5]
	GameData gameInfo = getGameData();
 800128c:	f107 0308 	add.w	r3, r7, #8
 8001290:	4618      	mov	r0, r3
 8001292:	f000 fa71 	bl	8001778 <getGameData>

	int count = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	657b      	str	r3, [r7, #84]	@ 0x54
	for(int i = 1; i < 4; i++) {
 800129a:	2301      	movs	r3, #1
 800129c:	653b      	str	r3, [r7, #80]	@ 0x50
 800129e:	e041      	b.n	8001324 <countMatchesInEachDirection+0xac>
		int row = currRow + (rowDirection * i);
 80012a0:	79ba      	ldrb	r2, [r7, #6]
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80012a6:	fb01 f303 	mul.w	r3, r1, r3
 80012aa:	4413      	add	r3, r2
 80012ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
		int col = currCol + (colDirection * i);
 80012ae:	797a      	ldrb	r2, [r7, #5]
 80012b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80012b2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80012b4:	fb01 f303 	mul.w	r3, r1, r3
 80012b8:	4413      	add	r3, r2
 80012ba:	64bb      	str	r3, [r7, #72]	@ 0x48


		//clamping bounds of board
		if(row < 0 || row >= NUM_ROWS){
 80012bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012be:	2b00      	cmp	r3, #0
 80012c0:	db37      	blt.n	8001332 <countMatchesInEachDirection+0xba>
 80012c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012c4:	2b05      	cmp	r3, #5
 80012c6:	dc34      	bgt.n	8001332 <countMatchesInEachDirection+0xba>
			break;
		}
		if(col < 0 || col >= NUM_COLUMNS){
 80012c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	db31      	blt.n	8001332 <countMatchesInEachDirection+0xba>
 80012ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80012d0:	2b06      	cmp	r3, #6
 80012d2:	dc2e      	bgt.n	8001332 <countMatchesInEachDirection+0xba>
			break;
		}

		//check if token color matches player
		if(currPlayer == RED_PLAYER){
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d10f      	bne.n	80012fa <countMatchesInEachDirection+0x82>
			if (gameInfo.board[row][col] == RED_TAKEN_SQUARE){
 80012da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80012dc:	4613      	mov	r3, r2
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	1a9b      	subs	r3, r3, r2
 80012e2:	3358      	adds	r3, #88	@ 0x58
 80012e4:	19da      	adds	r2, r3, r7
 80012e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80012e8:	4413      	add	r3, r2
 80012ea:	3b42      	subs	r3, #66	@ 0x42
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d11c      	bne.n	800132c <countMatchesInEachDirection+0xb4>
				count++;
 80012f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80012f4:	3301      	adds	r3, #1
 80012f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80012f8:	e011      	b.n	800131e <countMatchesInEachDirection+0xa6>
			}else{
				break;
			}
		}else if(currPlayer == YELLOW_PLAYER){
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d10e      	bne.n	800131e <countMatchesInEachDirection+0xa6>
			if(gameInfo.board[row][col] == YELLOW_TAKEN_SQUARE){
 8001300:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001302:	4613      	mov	r3, r2
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	1a9b      	subs	r3, r3, r2
 8001308:	3358      	adds	r3, #88	@ 0x58
 800130a:	19da      	adds	r2, r3, r7
 800130c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800130e:	4413      	add	r3, r2
 8001310:	3b42      	subs	r3, #66	@ 0x42
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b02      	cmp	r3, #2
 8001316:	d10b      	bne.n	8001330 <countMatchesInEachDirection+0xb8>
				count++;
 8001318:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800131a:	3301      	adds	r3, #1
 800131c:	657b      	str	r3, [r7, #84]	@ 0x54
	for(int i = 1; i < 4; i++) {
 800131e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001320:	3301      	adds	r3, #1
 8001322:	653b      	str	r3, [r7, #80]	@ 0x50
 8001324:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001326:	2b03      	cmp	r3, #3
 8001328:	ddba      	ble.n	80012a0 <countMatchesInEachDirection+0x28>
 800132a:	e002      	b.n	8001332 <countMatchesInEachDirection+0xba>
				break;
 800132c:	bf00      	nop
 800132e:	e000      	b.n	8001332 <countMatchesInEachDirection+0xba>
			}else{
				break;
 8001330:	bf00      	nop
			}
		}

	}
	return count;
 8001332:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 8001334:	4618      	mov	r0, r3
 8001336:	3758      	adds	r7, #88	@ 0x58
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <check_win_cond>:

bool check_win_cond(){
 800133c:	b5b0      	push	{r4, r5, r7, lr}
 800133e:	b09e      	sub	sp, #120	@ 0x78
 8001340:	af02      	add	r7, sp, #8
	int directions[4][2] = {
 8001342:	4b26      	ldr	r3, [pc, #152]	@ (80013dc <check_win_cond+0xa0>)
 8001344:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001348:	461d      	mov	r5, r3
 800134a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800134c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800134e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001352:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    {1, 0},   // Vertical
	    {1, 1},   // Diagonal down-right
	    {-1, 1}   // Diagonal up-right
	};

	GameData gameInfo = getGameData();
 8001356:	463b      	mov	r3, r7
 8001358:	4618      	mov	r0, r3
 800135a:	f000 fa0d 	bl	8001778 <getGameData>

	for (int i = 0; i < 4; i++) {
 800135e:	2300      	movs	r3, #0
 8001360:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001362:	e032      	b.n	80013ca <check_win_cond+0x8e>
		 int count = 1;
 8001364:	2301      	movs	r3, #1
 8001366:	66bb      	str	r3, [r7, #104]	@ 0x68

		int row = directions[i][0];
 8001368:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	3370      	adds	r3, #112	@ 0x70
 800136e:	443b      	add	r3, r7
 8001370:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001374:	667b      	str	r3, [r7, #100]	@ 0x64
	    int col = directions[i][1];
 8001376:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	3370      	adds	r3, #112	@ 0x70
 800137c:	443b      	add	r3, r7
 800137e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001382:	663b      	str	r3, [r7, #96]	@ 0x60


		//checking in both directions
		count += countMatchesInEachDirection(gameInfo.currentPlayer, gameInfo.tokenLocation.row, gameInfo.tokenLocation.column, row, col);
 8001384:	7878      	ldrb	r0, [r7, #1]
 8001386:	7b79      	ldrb	r1, [r7, #13]
 8001388:	7b3a      	ldrb	r2, [r7, #12]
 800138a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001390:	f7ff ff72 	bl	8001278 <countMatchesInEachDirection>
 8001394:	4602      	mov	r2, r0
 8001396:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001398:	4413      	add	r3, r2
 800139a:	66bb      	str	r3, [r7, #104]	@ 0x68
		count += countMatchesInEachDirection(gameInfo.currentPlayer, gameInfo.tokenLocation.row, gameInfo.tokenLocation.column, -row, -col);
 800139c:	7878      	ldrb	r0, [r7, #1]
 800139e:	7b79      	ldrb	r1, [r7, #13]
 80013a0:	7b3a      	ldrb	r2, [r7, #12]
 80013a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80013a4:	425c      	negs	r4, r3
 80013a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80013a8:	425b      	negs	r3, r3
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	4623      	mov	r3, r4
 80013ae:	f7ff ff63 	bl	8001278 <countMatchesInEachDirection>
 80013b2:	4602      	mov	r2, r0
 80013b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80013b6:	4413      	add	r3, r2
 80013b8:	66bb      	str	r3, [r7, #104]	@ 0x68

		if (count >= 4){
 80013ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80013bc:	2b03      	cmp	r3, #3
 80013be:	dd01      	ble.n	80013c4 <check_win_cond+0x88>
			return true;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e006      	b.n	80013d2 <check_win_cond+0x96>
	for (int i = 0; i < 4; i++) {
 80013c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80013c6:	3301      	adds	r3, #1
 80013c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80013ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80013cc:	2b03      	cmp	r3, #3
 80013ce:	ddc9      	ble.n	8001364 <check_win_cond+0x28>
		}
	}
	return false;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3770      	adds	r7, #112	@ 0x70
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bdb0      	pop	{r4, r5, r7, pc}
 80013da:	bf00      	nop
 80013dc:	080080a8 	.word	0x080080a8

080013e0 <check_possible_win_cond>:

bool check_possible_win_cond(uint8_t currPlayer, uint8_t currRow, uint8_t currCol){
 80013e0:	b5b0      	push	{r4, r5, r7, lr}
 80013e2:	b090      	sub	sp, #64	@ 0x40
 80013e4:	af02      	add	r7, sp, #8
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
 80013ea:	460b      	mov	r3, r1
 80013ec:	71bb      	strb	r3, [r7, #6]
 80013ee:	4613      	mov	r3, r2
 80013f0:	717b      	strb	r3, [r7, #5]
	int directions[4][2] = {
 80013f2:	4b24      	ldr	r3, [pc, #144]	@ (8001484 <check_possible_win_cond+0xa4>)
 80013f4:	f107 0408 	add.w	r4, r7, #8
 80013f8:	461d      	mov	r5, r3
 80013fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013fe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001402:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    {1, 1},   // Diagonal down-right
	    {-1, 1}   // Diagonal up-right
	};


	for (int i = 0; i < 4; i++) {
 8001406:	2300      	movs	r3, #0
 8001408:	637b      	str	r3, [r7, #52]	@ 0x34
 800140a:	e032      	b.n	8001472 <check_possible_win_cond+0x92>
		int count = 1;
 800140c:	2301      	movs	r3, #1
 800140e:	633b      	str	r3, [r7, #48]	@ 0x30

		int row = directions[i][0];
 8001410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	3338      	adds	r3, #56	@ 0x38
 8001416:	443b      	add	r3, r7
 8001418:	f853 3c30 	ldr.w	r3, [r3, #-48]
 800141c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    int col = directions[i][1];
 800141e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	3338      	adds	r3, #56	@ 0x38
 8001424:	443b      	add	r3, r7
 8001426:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800142a:	62bb      	str	r3, [r7, #40]	@ 0x28


		//checking in both directions
		count += countMatchesInEachDirection(currPlayer, currRow, currCol, row, col);
 800142c:	797a      	ldrb	r2, [r7, #5]
 800142e:	79b9      	ldrb	r1, [r7, #6]
 8001430:	79f8      	ldrb	r0, [r7, #7]
 8001432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001434:	9300      	str	r3, [sp, #0]
 8001436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001438:	f7ff ff1e 	bl	8001278 <countMatchesInEachDirection>
 800143c:	4602      	mov	r2, r0
 800143e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001440:	4413      	add	r3, r2
 8001442:	633b      	str	r3, [r7, #48]	@ 0x30
		count += countMatchesInEachDirection(currPlayer, currRow, currCol, -row, -col);
 8001444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001446:	425c      	negs	r4, r3
 8001448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800144a:	425b      	negs	r3, r3
 800144c:	797a      	ldrb	r2, [r7, #5]
 800144e:	79b9      	ldrb	r1, [r7, #6]
 8001450:	79f8      	ldrb	r0, [r7, #7]
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	4623      	mov	r3, r4
 8001456:	f7ff ff0f 	bl	8001278 <countMatchesInEachDirection>
 800145a:	4602      	mov	r2, r0
 800145c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800145e:	4413      	add	r3, r2
 8001460:	633b      	str	r3, [r7, #48]	@ 0x30

		if(count >= 4){
 8001462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001464:	2b03      	cmp	r3, #3
 8001466:	dd01      	ble.n	800146c <check_possible_win_cond+0x8c>
			return true;
 8001468:	2301      	movs	r3, #1
 800146a:	e006      	b.n	800147a <check_possible_win_cond+0x9a>
	for (int i = 0; i < 4; i++) {
 800146c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800146e:	3301      	adds	r3, #1
 8001470:	637b      	str	r3, [r7, #52]	@ 0x34
 8001472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001474:	2b03      	cmp	r3, #3
 8001476:	ddc9      	ble.n	800140c <check_possible_win_cond+0x2c>
		}
	}
	return false;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3738      	adds	r7, #56	@ 0x38
 800147e:	46bd      	mov	sp, r7
 8001480:	bdb0      	pop	{r4, r5, r7, pc}
 8001482:	bf00      	nop
 8001484:	080080a8 	.word	0x080080a8

08001488 <isColumnFull>:

	return false;
}


bool isColumnFull(uint8_t column){
 8001488:	b580      	push	{r7, lr}
 800148a:	b094      	sub	sp, #80	@ 0x50
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
	GameData gameInfo = getGameData();
 8001492:	f107 030c 	add.w	r3, r7, #12
 8001496:	4618      	mov	r0, r3
 8001498:	f000 f96e 	bl	8001778 <getGameData>
	for(int i = 5; i >= 0; i--){
 800149c:	2305      	movs	r3, #5
 800149e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80014a0:	e010      	b.n	80014c4 <isColumnFull+0x3c>
		if(gameInfo.board[i][column] == EMPTY_SQUARE){
 80014a2:	79f9      	ldrb	r1, [r7, #7]
 80014a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80014a6:	4613      	mov	r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	1a9b      	subs	r3, r3, r2
 80014ac:	3350      	adds	r3, #80	@ 0x50
 80014ae:	443b      	add	r3, r7
 80014b0:	440b      	add	r3, r1
 80014b2:	3b36      	subs	r3, #54	@ 0x36
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <isColumnFull+0x36>
			return false;
 80014ba:	2300      	movs	r3, #0
 80014bc:	e006      	b.n	80014cc <isColumnFull+0x44>
	for(int i = 5; i >= 0; i--){
 80014be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80014c0:	3b01      	subs	r3, #1
 80014c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80014c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	daeb      	bge.n	80014a2 <isColumnFull+0x1a>
		}
	}
	return true;
 80014ca:	2301      	movs	r3, #1
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3750      	adds	r7, #80	@ 0x50
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <isBoardFull>:

bool isBoardFull(){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_COLUMNS; i++){
 80014da:	2300      	movs	r3, #0
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	e00f      	b.n	8001500 <isBoardFull+0x2c>
		if(!isColumnFull(i)){
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ffcf 	bl	8001488 <isColumnFull>
 80014ea:	4603      	mov	r3, r0
 80014ec:	f083 0301 	eor.w	r3, r3, #1
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <isBoardFull+0x26>
			return false;
 80014f6:	2300      	movs	r3, #0
 80014f8:	e006      	b.n	8001508 <isBoardFull+0x34>
	for(int i = 0; i < NUM_COLUMNS; i++){
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3301      	adds	r3, #1
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b06      	cmp	r3, #6
 8001504:	ddec      	ble.n	80014e0 <isBoardFull+0xc>
		}
	}
	return true;
 8001506:	2301      	movs	r3, #1
}
 8001508:	4618      	mov	r0, r3
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <calculateTotalTime>:

int calculateTotalTime(){
 8001510:	b580      	push	{r7, lr}
 8001512:	b092      	sub	sp, #72	@ 0x48
 8001514:	af00      	add	r7, sp, #0
	GameData gameInfo = getGameData();
 8001516:	463b      	mov	r3, r7
 8001518:	4618      	mov	r0, r3
 800151a:	f000 f92d 	bl	8001778 <getGameData>
	uint32_t totalTime = (gameInfo.endTime - gameInfo.startTime);
 800151e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	647b      	str	r3, [r7, #68]	@ 0x44
	uint32_t totalTimeInSeconds = roundToSeconds(totalTime);
 8001526:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001528:	f000 f806 	bl	8001538 <roundToSeconds>
 800152c:	6438      	str	r0, [r7, #64]	@ 0x40
	return (int) totalTimeInSeconds;
 800152e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8001530:	4618      	mov	r0, r3
 8001532:	3748      	adds	r7, #72	@ 0x48
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <roundToSeconds>:

uint32_t roundToSeconds(uint32_t value)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
    if (value < 1000)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001546:	d201      	bcs.n	800154c <roundToSeconds+0x14>
        return value;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	e006      	b.n	800155a <roundToSeconds+0x22>

    return ((value + 500) / 1000);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001552:	4a05      	ldr	r2, [pc, #20]	@ (8001568 <roundToSeconds+0x30>)
 8001554:	fba2 2303 	umull	r2, r3, r2, r3
 8001558:	099b      	lsrs	r3, r3, #6
}
 800155a:	4618      	mov	r0, r3
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	10624dd3 	.word	0x10624dd3

0800156c <OpponentPlayRNG>:

void OpponentPlayRNG(){
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
	uint32_t rand = getRandomInRange(0, 10);
 8001572:	210a      	movs	r1, #10
 8001574:	2000      	movs	r0, #0
 8001576:	f000 f8c3 	bl	8001700 <getRandomInRange>
 800157a:	60b8      	str	r0, [r7, #8]
	for(int i = 0; i < rand; i++){
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	e014      	b.n	80015ac <OpponentPlayRNG+0x40>
		HAL_Delay(200);
 8001582:	20c8      	movs	r0, #200	@ 0xc8
 8001584:	f002 fd02 	bl	8003f8c <HAL_Delay>
		uint32_t moveTokenRand = getRandomInRange(0,1);
 8001588:	2101      	movs	r1, #1
 800158a:	2000      	movs	r0, #0
 800158c:	f000 f8b8 	bl	8001700 <getRandomInRange>
 8001590:	6078      	str	r0, [r7, #4]
		if(moveTokenRand == 0){
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d103      	bne.n	80015a0 <OpponentPlayRNG+0x34>
			movePendingToken(LEFT);
 8001598:	2000      	movs	r0, #0
 800159a:	f7ff fce1 	bl	8000f60 <movePendingToken>
 800159e:	e002      	b.n	80015a6 <OpponentPlayRNG+0x3a>
		}else{
			movePendingToken(RIGHT);
 80015a0:	2001      	movs	r0, #1
 80015a2:	f7ff fcdd 	bl	8000f60 <movePendingToken>
	for(int i = 0; i < rand; i++){
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	3301      	adds	r3, #1
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d8e6      	bhi.n	8001582 <OpponentPlayRNG+0x16>
		}
	}
	HAL_Delay(200);
 80015b4:	20c8      	movs	r0, #200	@ 0xc8
 80015b6:	f002 fce9 	bl	8003f8c <HAL_Delay>
	dropToken(LCD_COLOR_YELLOW);
 80015ba:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 80015be:	f7ff fd35 	bl	800102c <dropToken>
}
 80015c2:	bf00      	nop
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <OpponentPlayAI>:

void OpponentPlayAI(){
 80015ca:	b5b0      	push	{r4, r5, r7, lr}
 80015cc:	b0a0      	sub	sp, #128	@ 0x80
 80015ce:	af0c      	add	r7, sp, #48	@ 0x30
	GameData gameInfo = getGameData();
 80015d0:	463b      	mov	r3, r7
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 f8d0 	bl	8001778 <getGameData>

	for(int c = 0; c < NUM_COLUMNS; c++){
 80015d8:	2300      	movs	r3, #0
 80015da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80015dc:	e040      	b.n	8001660 <OpponentPlayAI+0x96>
		int r = NUM_ROWS - 1;
 80015de:	2305      	movs	r3, #5
 80015e0:	64bb      	str	r3, [r7, #72]	@ 0x48
		for(r = NUM_ROWS - 1; r >= 0; r--){
 80015e2:	2305      	movs	r3, #5
 80015e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80015e6:	e033      	b.n	8001650 <OpponentPlayAI+0x86>
			if(gameInfo.board[r][c] == EMPTY_SQUARE){
 80015e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80015ea:	4613      	mov	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	1a9b      	subs	r3, r3, r2
 80015f0:	3350      	adds	r3, #80	@ 0x50
 80015f2:	19da      	adds	r2, r3, r7
 80015f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80015f6:	4413      	add	r3, r2
 80015f8:	3b42      	subs	r3, #66	@ 0x42
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d124      	bne.n	800164a <OpponentPlayAI+0x80>
				if(check_possible_win_cond(YELLOW_PLAYER, r, c)){
 8001600:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001602:	b2db      	uxtb	r3, r3
 8001604:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	4619      	mov	r1, r3
 800160a:	2001      	movs	r0, #1
 800160c:	f7ff fee8 	bl	80013e0 <check_possible_win_cond>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d020      	beq.n	8001658 <OpponentPlayAI+0x8e>
					gameInfo.tokenLocation.row = r;
 8001616:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001618:	b2db      	uxtb	r3, r3
 800161a:	737b      	strb	r3, [r7, #13]
					gameInfo.tokenLocation.column = c;
 800161c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800161e:	b2db      	uxtb	r3, r3
 8001620:	733b      	strb	r3, [r7, #12]
					setGameData(gameInfo);
 8001622:	466d      	mov	r5, sp
 8001624:	f107 0410 	add.w	r4, r7, #16
 8001628:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800162a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800162c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800162e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001630:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001634:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001638:	463b      	mov	r3, r7
 800163a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800163c:	f000 f880 	bl	8001740 <setGameData>
					dropToken(LCD_COLOR_YELLOW);
 8001640:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8001644:	f7ff fcf2 	bl	800102c <dropToken>
					return;
 8001648:	e056      	b.n	80016f8 <OpponentPlayAI+0x12e>
		for(r = NUM_ROWS - 1; r >= 0; r--){
 800164a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800164c:	3b01      	subs	r3, #1
 800164e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001650:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001652:	2b00      	cmp	r3, #0
 8001654:	dac8      	bge.n	80015e8 <OpponentPlayAI+0x1e>
 8001656:	e000      	b.n	800165a <OpponentPlayAI+0x90>
				}
				break;
 8001658:	bf00      	nop
	for(int c = 0; c < NUM_COLUMNS; c++){
 800165a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800165c:	3301      	adds	r3, #1
 800165e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001660:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001662:	2b06      	cmp	r3, #6
 8001664:	ddbb      	ble.n	80015de <OpponentPlayAI+0x14>
			}
		}
	}

	for(int c = 0; c < NUM_COLUMNS; c++){
 8001666:	2300      	movs	r3, #0
 8001668:	647b      	str	r3, [r7, #68]	@ 0x44
 800166a:	e040      	b.n	80016ee <OpponentPlayAI+0x124>
		int r = NUM_ROWS - 1;
 800166c:	2305      	movs	r3, #5
 800166e:	643b      	str	r3, [r7, #64]	@ 0x40
		for(r = NUM_ROWS - 1; r >= 0; r--){
 8001670:	2305      	movs	r3, #5
 8001672:	643b      	str	r3, [r7, #64]	@ 0x40
 8001674:	e033      	b.n	80016de <OpponentPlayAI+0x114>
			if(gameInfo.board[r][c] == EMPTY_SQUARE){
 8001676:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001678:	4613      	mov	r3, r2
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	1a9b      	subs	r3, r3, r2
 800167e:	3350      	adds	r3, #80	@ 0x50
 8001680:	19da      	adds	r2, r3, r7
 8001682:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001684:	4413      	add	r3, r2
 8001686:	3b42      	subs	r3, #66	@ 0x42
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d124      	bne.n	80016d8 <OpponentPlayAI+0x10e>
				if(check_possible_win_cond(RED_PLAYER, r, c)){
 800168e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001690:	b2db      	uxtb	r3, r3
 8001692:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001694:	b2d2      	uxtb	r2, r2
 8001696:	4619      	mov	r1, r3
 8001698:	2000      	movs	r0, #0
 800169a:	f7ff fea1 	bl	80013e0 <check_possible_win_cond>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d020      	beq.n	80016e6 <OpponentPlayAI+0x11c>
					gameInfo.tokenLocation.row = r;
 80016a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	737b      	strb	r3, [r7, #13]
					gameInfo.tokenLocation.column = c;
 80016aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	733b      	strb	r3, [r7, #12]
					setGameData(gameInfo);
 80016b0:	466d      	mov	r5, sp
 80016b2:	f107 0410 	add.w	r4, r7, #16
 80016b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016c2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80016c6:	463b      	mov	r3, r7
 80016c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016ca:	f000 f839 	bl	8001740 <setGameData>
					dropToken(LCD_COLOR_YELLOW);
 80016ce:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 80016d2:	f7ff fcab 	bl	800102c <dropToken>
					return;
 80016d6:	e00f      	b.n	80016f8 <OpponentPlayAI+0x12e>
		for(r = NUM_ROWS - 1; r >= 0; r--){
 80016d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016da:	3b01      	subs	r3, #1
 80016dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80016de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	dac8      	bge.n	8001676 <OpponentPlayAI+0xac>
 80016e4:	e000      	b.n	80016e8 <OpponentPlayAI+0x11e>
				}
				break;
 80016e6:	bf00      	nop
	for(int c = 0; c < NUM_COLUMNS; c++){
 80016e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016ea:	3301      	adds	r3, #1
 80016ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80016ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016f0:	2b06      	cmp	r3, #6
 80016f2:	ddbb      	ble.n	800166c <OpponentPlayAI+0xa2>
			}
		}
	}
#endif

	OpponentPlayRNG();
 80016f4:	f7ff ff3a 	bl	800156c <OpponentPlayRNG>
}
 80016f8:	3750      	adds	r7, #80	@ 0x50
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001700 <getRandomInRange>:

uint32_t getRandomInRange(uint32_t min, uint32_t max)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
    uint32_t randNum;
    uint32_t bound = (max - min + 1);
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	3301      	adds	r3, #1
 8001712:	60fb      	str	r3, [r7, #12]

    HAL_RNG_GenerateRandomNumber(&hrng, &randNum);
 8001714:	f107 0308 	add.w	r3, r7, #8
 8001718:	4619      	mov	r1, r3
 800171a:	4808      	ldr	r0, [pc, #32]	@ (800173c <getRandomInRange+0x3c>)
 800171c:	f005 fa0a 	bl	8006b34 <HAL_RNG_GenerateRandomNumber>


    return min + (randNum % bound);
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	fbb3 f2f2 	udiv	r2, r3, r2
 8001728:	68f9      	ldr	r1, [r7, #12]
 800172a:	fb01 f202 	mul.w	r2, r1, r2
 800172e:	1a9a      	subs	r2, r3, r2
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4413      	add	r3, r2
}
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20025b08 	.word	0x20025b08

08001740 <setGameData>:

void setGameData(GameData gameData){
 8001740:	b084      	sub	sp, #16
 8001742:	b4b0      	push	{r4, r5, r7}
 8001744:	af00      	add	r7, sp, #0
 8001746:	f107 040c 	add.w	r4, r7, #12
 800174a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	gameInfo = gameData;
 800174e:	4b09      	ldr	r3, [pc, #36]	@ (8001774 <setGameData+0x34>)
 8001750:	461d      	mov	r5, r3
 8001752:	f107 040c 	add.w	r4, r7, #12
 8001756:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001758:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800175a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800175c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800175e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001760:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001762:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001766:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	bcb0      	pop	{r4, r5, r7}
 8001770:	b004      	add	sp, #16
 8001772:	4770      	bx	lr
 8001774:	20000094 	.word	0x20000094

08001778 <getGameData>:

GameData getGameData(){
 8001778:	b4b0      	push	{r4, r5, r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	return gameInfo;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a09      	ldr	r2, [pc, #36]	@ (80017a8 <getGameData+0x30>)
 8001784:	461c      	mov	r4, r3
 8001786:	4615      	mov	r5, r2
 8001788:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800178a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800178c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800178e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001794:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001798:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bcb0      	pop	{r4, r5, r7}
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	20000094 	.word	0x20000094

080017ac <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08c      	sub	sp, #48	@ 0x30
 80017b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	61bb      	str	r3, [r7, #24]
 80017b6:	4b5a      	ldr	r3, [pc, #360]	@ (8001920 <LCD_GPIO_Init+0x174>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ba:	4a59      	ldr	r2, [pc, #356]	@ (8001920 <LCD_GPIO_Init+0x174>)
 80017bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80017c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80017c2:	4b57      	ldr	r3, [pc, #348]	@ (8001920 <LCD_GPIO_Init+0x174>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80017ca:	61bb      	str	r3, [r7, #24]
 80017cc:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
 80017d2:	4b53      	ldr	r3, [pc, #332]	@ (8001920 <LCD_GPIO_Init+0x174>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	4a52      	ldr	r2, [pc, #328]	@ (8001920 <LCD_GPIO_Init+0x174>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017de:	4b50      	ldr	r3, [pc, #320]	@ (8001920 <LCD_GPIO_Init+0x174>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	4b4c      	ldr	r3, [pc, #304]	@ (8001920 <LCD_GPIO_Init+0x174>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	4a4b      	ldr	r2, [pc, #300]	@ (8001920 <LCD_GPIO_Init+0x174>)
 80017f4:	f043 0302 	orr.w	r3, r3, #2
 80017f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fa:	4b49      	ldr	r3, [pc, #292]	@ (8001920 <LCD_GPIO_Init+0x174>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	4b45      	ldr	r3, [pc, #276]	@ (8001920 <LCD_GPIO_Init+0x174>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	4a44      	ldr	r2, [pc, #272]	@ (8001920 <LCD_GPIO_Init+0x174>)
 8001810:	f043 0304 	orr.w	r3, r3, #4
 8001814:	6313      	str	r3, [r2, #48]	@ 0x30
 8001816:	4b42      	ldr	r3, [pc, #264]	@ (8001920 <LCD_GPIO_Init+0x174>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	f003 0304 	and.w	r3, r3, #4
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	4b3e      	ldr	r3, [pc, #248]	@ (8001920 <LCD_GPIO_Init+0x174>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	4a3d      	ldr	r2, [pc, #244]	@ (8001920 <LCD_GPIO_Init+0x174>)
 800182c:	f043 0308 	orr.w	r3, r3, #8
 8001830:	6313      	str	r3, [r2, #48]	@ 0x30
 8001832:	4b3b      	ldr	r3, [pc, #236]	@ (8001920 <LCD_GPIO_Init+0x174>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	4b37      	ldr	r3, [pc, #220]	@ (8001920 <LCD_GPIO_Init+0x174>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	4a36      	ldr	r2, [pc, #216]	@ (8001920 <LCD_GPIO_Init+0x174>)
 8001848:	f043 0320 	orr.w	r3, r3, #32
 800184c:	6313      	str	r3, [r2, #48]	@ 0x30
 800184e:	4b34      	ldr	r3, [pc, #208]	@ (8001920 <LCD_GPIO_Init+0x174>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	f003 0320 	and.w	r3, r3, #32
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	603b      	str	r3, [r7, #0]
 800185e:	4b30      	ldr	r3, [pc, #192]	@ (8001920 <LCD_GPIO_Init+0x174>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	4a2f      	ldr	r2, [pc, #188]	@ (8001920 <LCD_GPIO_Init+0x174>)
 8001864:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001868:	6313      	str	r3, [r2, #48]	@ 0x30
 800186a:	4b2d      	ldr	r3, [pc, #180]	@ (8001920 <LCD_GPIO_Init+0x174>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001872:	603b      	str	r3, [r7, #0]
 8001874:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8001876:	f641 0358 	movw	r3, #6232	@ 0x1858
 800187a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001884:	2302      	movs	r3, #2
 8001886:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001888:	230e      	movs	r3, #14
 800188a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800188c:	f107 031c 	add.w	r3, r7, #28
 8001890:	4619      	mov	r1, r3
 8001892:	4824      	ldr	r0, [pc, #144]	@ (8001924 <LCD_GPIO_Init+0x178>)
 8001894:	f002 fcb0 	bl	80041f8 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001898:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800189c:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800189e:	f107 031c 	add.w	r3, r7, #28
 80018a2:	4619      	mov	r1, r3
 80018a4:	4820      	ldr	r0, [pc, #128]	@ (8001928 <LCD_GPIO_Init+0x17c>)
 80018a6:	f002 fca7 	bl	80041f8 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80018aa:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80018ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80018b0:	f107 031c 	add.w	r3, r7, #28
 80018b4:	4619      	mov	r1, r3
 80018b6:	481d      	ldr	r0, [pc, #116]	@ (800192c <LCD_GPIO_Init+0x180>)
 80018b8:	f002 fc9e 	bl	80041f8 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80018bc:	2348      	movs	r3, #72	@ 0x48
 80018be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80018c0:	f107 031c 	add.w	r3, r7, #28
 80018c4:	4619      	mov	r1, r3
 80018c6:	481a      	ldr	r0, [pc, #104]	@ (8001930 <LCD_GPIO_Init+0x184>)
 80018c8:	f002 fc96 	bl	80041f8 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80018cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80018d2:	f107 031c 	add.w	r3, r7, #28
 80018d6:	4619      	mov	r1, r3
 80018d8:	4816      	ldr	r0, [pc, #88]	@ (8001934 <LCD_GPIO_Init+0x188>)
 80018da:	f002 fc8d 	bl	80041f8 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80018de:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80018e2:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80018e4:	f107 031c 	add.w	r3, r7, #28
 80018e8:	4619      	mov	r1, r3
 80018ea:	4813      	ldr	r0, [pc, #76]	@ (8001938 <LCD_GPIO_Init+0x18c>)
 80018ec:	f002 fc84 	bl	80041f8 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80018f0:	2303      	movs	r3, #3
 80018f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80018f4:	2309      	movs	r3, #9
 80018f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80018f8:	f107 031c 	add.w	r3, r7, #28
 80018fc:	4619      	mov	r1, r3
 80018fe:	480a      	ldr	r0, [pc, #40]	@ (8001928 <LCD_GPIO_Init+0x17c>)
 8001900:	f002 fc7a 	bl	80041f8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001904:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001908:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800190a:	f107 031c 	add.w	r3, r7, #28
 800190e:	4619      	mov	r1, r3
 8001910:	4809      	ldr	r0, [pc, #36]	@ (8001938 <LCD_GPIO_Init+0x18c>)
 8001912:	f002 fc71 	bl	80041f8 <HAL_GPIO_Init>
}
 8001916:	bf00      	nop
 8001918:	3730      	adds	r7, #48	@ 0x30
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800
 8001924:	40020000 	.word	0x40020000
 8001928:	40020400 	.word	0x40020400
 800192c:	40020800 	.word	0x40020800
 8001930:	40020c00 	.word	0x40020c00
 8001934:	40021400 	.word	0x40021400
 8001938:	40021800 	.word	0x40021800

0800193c <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b090      	sub	sp, #64	@ 0x40
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 800194a:	23f0      	movs	r3, #240	@ 0xf0
 800194c:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8001952:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001956:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8001958:	2302      	movs	r3, #2
 800195a:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 800195c:	23ff      	movs	r3, #255	@ 0xff
 800195e:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001964:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001968:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800196a:	2305      	movs	r3, #5
 800196c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8001974:	4b0f      	ldr	r3, [pc, #60]	@ (80019b4 <LTCD_Layer_Init+0x78>)
 8001976:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8001978:	23f0      	movs	r3, #240	@ 0xf0
 800197a:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 800197c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001980:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8001994:	79fa      	ldrb	r2, [r7, #7]
 8001996:	f107 030c 	add.w	r3, r7, #12
 800199a:	4619      	mov	r1, r3
 800199c:	4806      	ldr	r0, [pc, #24]	@ (80019b8 <LTCD_Layer_Init+0x7c>)
 800199e:	f004 f885 	bl	8005aac <HAL_LTDC_ConfigLayer>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 80019a8:	f000 fa50 	bl	8001e4c <LCD_Error_Handler>
	}
}
 80019ac:	bf00      	nop
 80019ae:	3740      	adds	r7, #64	@ 0x40
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	200001b0 	.word	0x200001b0
 80019b8:	200000d4 	.word	0x200000d4

080019bc <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 80019c0:	4b2a      	ldr	r3, [pc, #168]	@ (8001a6c <LTCD__Init+0xb0>)
 80019c2:	4a2b      	ldr	r2, [pc, #172]	@ (8001a70 <LTCD__Init+0xb4>)
 80019c4:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 80019c6:	4b29      	ldr	r3, [pc, #164]	@ (8001a6c <LTCD__Init+0xb0>)
 80019c8:	2209      	movs	r2, #9
 80019ca:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 80019cc:	4b27      	ldr	r3, [pc, #156]	@ (8001a6c <LTCD__Init+0xb0>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 80019d2:	4b26      	ldr	r3, [pc, #152]	@ (8001a6c <LTCD__Init+0xb0>)
 80019d4:	221d      	movs	r2, #29
 80019d6:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 80019d8:	4b24      	ldr	r3, [pc, #144]	@ (8001a6c <LTCD__Init+0xb0>)
 80019da:	2203      	movs	r2, #3
 80019dc:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 80019de:	4b23      	ldr	r3, [pc, #140]	@ (8001a6c <LTCD__Init+0xb0>)
 80019e0:	f240 120d 	movw	r2, #269	@ 0x10d
 80019e4:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 80019e6:	4b21      	ldr	r3, [pc, #132]	@ (8001a6c <LTCD__Init+0xb0>)
 80019e8:	f240 1243 	movw	r2, #323	@ 0x143
 80019ec:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 80019ee:	4b1f      	ldr	r3, [pc, #124]	@ (8001a6c <LTCD__Init+0xb0>)
 80019f0:	f240 1217 	movw	r2, #279	@ 0x117
 80019f4:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 80019f6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a6c <LTCD__Init+0xb0>)
 80019f8:	f240 1247 	movw	r2, #327	@ 0x147
 80019fc:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 80019fe:	4b1b      	ldr	r3, [pc, #108]	@ (8001a6c <LTCD__Init+0xb0>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8001a06:	4b19      	ldr	r3, [pc, #100]	@ (8001a6c <LTCD__Init+0xb0>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8001a0e:	4b17      	ldr	r3, [pc, #92]	@ (8001a6c <LTCD__Init+0xb0>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001a16:	4b17      	ldr	r3, [pc, #92]	@ (8001a74 <LTCD__Init+0xb8>)
 8001a18:	2208      	movs	r2, #8
 8001a1a:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001a1c:	4b15      	ldr	r3, [pc, #84]	@ (8001a74 <LTCD__Init+0xb8>)
 8001a1e:	22c0      	movs	r2, #192	@ 0xc0
 8001a20:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001a22:	4b14      	ldr	r3, [pc, #80]	@ (8001a74 <LTCD__Init+0xb8>)
 8001a24:	2204      	movs	r2, #4
 8001a26:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001a28:	4b12      	ldr	r3, [pc, #72]	@ (8001a74 <LTCD__Init+0xb8>)
 8001a2a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a2e:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001a30:	4810      	ldr	r0, [pc, #64]	@ (8001a74 <LTCD__Init+0xb8>)
 8001a32:	f004 fe95 	bl	8006760 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001a36:	4b0d      	ldr	r3, [pc, #52]	@ (8001a6c <LTCD__Init+0xb0>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a6c <LTCD__Init+0xb0>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001a42:	4b0a      	ldr	r3, [pc, #40]	@ (8001a6c <LTCD__Init+0xb0>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001a48:	4b08      	ldr	r3, [pc, #32]	@ (8001a6c <LTCD__Init+0xb0>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8001a4e:	f7ff fead 	bl	80017ac <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001a52:	4806      	ldr	r0, [pc, #24]	@ (8001a6c <LTCD__Init+0xb0>)
 8001a54:	f003 ff5a 	bl	800590c <HAL_LTDC_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8001a5e:	f000 f9f5 	bl	8001e4c <LCD_Error_Handler>
	 }

	ili9341_Init();
 8001a62:	f000 fd3f 	bl	80024e4 <ili9341_Init>
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	200000d4 	.word	0x200000d4
 8001a70:	40016800 	.word	0x40016800
 8001a74:	2000017c 	.word	0x2000017c

08001a78 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	80fb      	strh	r3, [r7, #6]
 8001a82:	460b      	mov	r3, r1
 8001a84:	80bb      	strh	r3, [r7, #4]
 8001a86:	4613      	mov	r3, r2
 8001a88:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8001a8a:	88ba      	ldrh	r2, [r7, #4]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	011b      	lsls	r3, r3, #4
 8001a90:	1a9b      	subs	r3, r3, r2
 8001a92:	011b      	lsls	r3, r3, #4
 8001a94:	461a      	mov	r2, r3
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	4413      	add	r3, r2
 8001a9a:	4905      	ldr	r1, [pc, #20]	@ (8001ab0 <LCD_Draw_Pixel+0x38>)
 8001a9c:	887a      	ldrh	r2, [r7, #2]
 8001a9e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	200001b0 	.word	0x200001b0

08001ab4 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8001ab4:	b590      	push	{r4, r7, lr}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4604      	mov	r4, r0
 8001abc:	4608      	mov	r0, r1
 8001abe:	4611      	mov	r1, r2
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4623      	mov	r3, r4
 8001ac4:	80fb      	strh	r3, [r7, #6]
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	80bb      	strh	r3, [r7, #4]
 8001aca:	460b      	mov	r3, r1
 8001acc:	807b      	strh	r3, [r7, #2]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8001ad2:	887b      	ldrh	r3, [r7, #2]
 8001ad4:	425b      	negs	r3, r3
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	81fb      	strh	r3, [r7, #14]
 8001ada:	e034      	b.n	8001b46 <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8001adc:	887b      	ldrh	r3, [r7, #2]
 8001ade:	425b      	negs	r3, r3
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	81bb      	strh	r3, [r7, #12]
 8001ae4:	e024      	b.n	8001b30 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8001ae6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001aea:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001aee:	fb03 f202 	mul.w	r2, r3, r2
 8001af2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001af6:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001afa:	fb01 f303 	mul.w	r3, r1, r3
 8001afe:	441a      	add	r2, r3
 8001b00:	887b      	ldrh	r3, [r7, #2]
 8001b02:	8879      	ldrh	r1, [r7, #2]
 8001b04:	fb01 f303 	mul.w	r3, r1, r3
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	dc0b      	bgt.n	8001b24 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8001b0c:	89ba      	ldrh	r2, [r7, #12]
 8001b0e:	88fb      	ldrh	r3, [r7, #6]
 8001b10:	4413      	add	r3, r2
 8001b12:	b298      	uxth	r0, r3
 8001b14:	89fa      	ldrh	r2, [r7, #14]
 8001b16:	88bb      	ldrh	r3, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	883a      	ldrh	r2, [r7, #0]
 8001b1e:	4619      	mov	r1, r3
 8001b20:	f7ff ffaa 	bl	8001a78 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8001b24:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	81bb      	strh	r3, [r7, #12]
 8001b30:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001b34:	887b      	ldrh	r3, [r7, #2]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	ddd5      	ble.n	8001ae6 <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8001b3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	3301      	adds	r3, #1
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	81fb      	strh	r3, [r7, #14]
 8001b46:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001b4a:	887b      	ldrh	r3, [r7, #2]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	ddc5      	ble.n	8001adc <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8001b50:	bf00      	nop
 8001b52:	bf00      	nop
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd90      	pop	{r4, r7, pc}

08001b5a <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8001b5a:	b590      	push	{r4, r7, lr}
 8001b5c:	b085      	sub	sp, #20
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	4604      	mov	r4, r0
 8001b62:	4608      	mov	r0, r1
 8001b64:	4611      	mov	r1, r2
 8001b66:	461a      	mov	r2, r3
 8001b68:	4623      	mov	r3, r4
 8001b6a:	80fb      	strh	r3, [r7, #6]
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	80bb      	strh	r3, [r7, #4]
 8001b70:	460b      	mov	r3, r1
 8001b72:	807b      	strh	r3, [r7, #2]
 8001b74:	4613      	mov	r3, r2
 8001b76:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++){
 8001b78:	2300      	movs	r3, #0
 8001b7a:	81fb      	strh	r3, [r7, #14]
 8001b7c:	e00b      	b.n	8001b96 <LCD_Draw_Vertical_Line+0x3c>
	  LCD_Draw_Pixel(x, i+y, color);
 8001b7e:	89fa      	ldrh	r2, [r7, #14]
 8001b80:	88bb      	ldrh	r3, [r7, #4]
 8001b82:	4413      	add	r3, r2
 8001b84:	b299      	uxth	r1, r3
 8001b86:	883a      	ldrh	r2, [r7, #0]
 8001b88:	88fb      	ldrh	r3, [r7, #6]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff ff74 	bl	8001a78 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++){
 8001b90:	89fb      	ldrh	r3, [r7, #14]
 8001b92:	3301      	adds	r3, #1
 8001b94:	81fb      	strh	r3, [r7, #14]
 8001b96:	89fa      	ldrh	r2, [r7, #14]
 8001b98:	887b      	ldrh	r3, [r7, #2]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d3ef      	bcc.n	8001b7e <LCD_Draw_Vertical_Line+0x24>
  }
}
 8001b9e:	bf00      	nop
 8001ba0:	bf00      	nop
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd90      	pop	{r4, r7, pc}

08001ba8 <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color){
 8001ba8:	b590      	push	{r4, r7, lr}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4604      	mov	r4, r0
 8001bb0:	4608      	mov	r0, r1
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4623      	mov	r3, r4
 8001bb8:	80fb      	strh	r3, [r7, #6]
 8001bba:	4603      	mov	r3, r0
 8001bbc:	80bb      	strh	r3, [r7, #4]
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	807b      	strh	r3, [r7, #2]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	803b      	strh	r3, [r7, #0]
	for (uint16_t i = 0; i < len; i++){
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	81fb      	strh	r3, [r7, #14]
 8001bca:	e00b      	b.n	8001be4 <LCD_Draw_Horizontal_Line+0x3c>
	  LCD_Draw_Pixel(i+x, y, color);
 8001bcc:	89fa      	ldrh	r2, [r7, #14]
 8001bce:	88fb      	ldrh	r3, [r7, #6]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	883a      	ldrh	r2, [r7, #0]
 8001bd6:	88b9      	ldrh	r1, [r7, #4]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff ff4d 	bl	8001a78 <LCD_Draw_Pixel>
	for (uint16_t i = 0; i < len; i++){
 8001bde:	89fb      	ldrh	r3, [r7, #14]
 8001be0:	3301      	adds	r3, #1
 8001be2:	81fb      	strh	r3, [r7, #14]
 8001be4:	89fa      	ldrh	r2, [r7, #14]
 8001be6:	887b      	ldrh	r3, [r7, #2]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d3ef      	bcc.n	8001bcc <LCD_Draw_Horizontal_Line+0x24>
	}
}
 8001bec:	bf00      	nop
 8001bee:	bf00      	nop
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd90      	pop	{r4, r7, pc}

08001bf6 <LCD_Draw_Box>:

void LCD_Draw_Box(uint16_t x, uint16_t y, uint16_t height, uint16_t width, uint16_t color)
{
 8001bf6:	b590      	push	{r4, r7, lr}
 8001bf8:	b085      	sub	sp, #20
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	4604      	mov	r4, r0
 8001bfe:	4608      	mov	r0, r1
 8001c00:	4611      	mov	r1, r2
 8001c02:	461a      	mov	r2, r3
 8001c04:	4623      	mov	r3, r4
 8001c06:	80fb      	strh	r3, [r7, #6]
 8001c08:	4603      	mov	r3, r0
 8001c0a:	80bb      	strh	r3, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	807b      	strh	r3, [r7, #2]
 8001c10:	4613      	mov	r3, r2
 8001c12:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < height; i++){
 8001c14:	2300      	movs	r3, #0
 8001c16:	81fb      	strh	r3, [r7, #14]
 8001c18:	e018      	b.n	8001c4c <LCD_Draw_Box+0x56>
	  for(uint16_t j = 0; j < width; j++){
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	81bb      	strh	r3, [r7, #12]
 8001c1e:	e00e      	b.n	8001c3e <LCD_Draw_Box+0x48>
		  LCD_Draw_Pixel(x+j, i+y, color);
 8001c20:	88fa      	ldrh	r2, [r7, #6]
 8001c22:	89bb      	ldrh	r3, [r7, #12]
 8001c24:	4413      	add	r3, r2
 8001c26:	b298      	uxth	r0, r3
 8001c28:	89fa      	ldrh	r2, [r7, #14]
 8001c2a:	88bb      	ldrh	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	8c3a      	ldrh	r2, [r7, #32]
 8001c32:	4619      	mov	r1, r3
 8001c34:	f7ff ff20 	bl	8001a78 <LCD_Draw_Pixel>
	  for(uint16_t j = 0; j < width; j++){
 8001c38:	89bb      	ldrh	r3, [r7, #12]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	81bb      	strh	r3, [r7, #12]
 8001c3e:	89ba      	ldrh	r2, [r7, #12]
 8001c40:	883b      	ldrh	r3, [r7, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d3ec      	bcc.n	8001c20 <LCD_Draw_Box+0x2a>
  for (uint16_t i = 0; i < height; i++){
 8001c46:	89fb      	ldrh	r3, [r7, #14]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	81fb      	strh	r3, [r7, #14]
 8001c4c:	89fa      	ldrh	r2, [r7, #14]
 8001c4e:	887b      	ldrh	r3, [r7, #2]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d3e2      	bcc.n	8001c1a <LCD_Draw_Box+0x24>
	  }
  }
}
 8001c54:	bf00      	nop
 8001c56:	bf00      	nop
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd90      	pop	{r4, r7, pc}
	...

08001c60 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	460a      	mov	r2, r1
 8001c6a:	71fb      	strb	r3, [r7, #7]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10e      	bne.n	8001c94 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	e007      	b.n	8001c8c <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8001c7c:	4908      	ldr	r1, [pc, #32]	@ (8001ca0 <LCD_Clear+0x40>)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	88ba      	ldrh	r2, [r7, #4]
 8001c82:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8001c92:	d3f3      	bcc.n	8001c7c <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8001c94:	bf00      	nop
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	200001b0 	.word	0x200001b0

08001ca4 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8001cae:	4a04      	ldr	r2, [pc, #16]	@ (8001cc0 <LCD_SetTextColor+0x1c>)
 8001cb0:	88fb      	ldrh	r3, [r7, #6]
 8001cb2:	8013      	strh	r3, [r2, #0]
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	20000000 	.word	0x20000000

08001cc4 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8001ccc:	4a04      	ldr	r2, [pc, #16]	@ (8001ce0 <LCD_SetFont+0x1c>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6013      	str	r3, [r2, #0]
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	200001ac 	.word	0x200001ac

08001ce4 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	603a      	str	r2, [r7, #0]
 8001cee:	80fb      	strh	r3, [r7, #6]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	e04c      	b.n	8001d9c <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001d02:	2300      	movs	r3, #0
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	e03f      	b.n	8001d88 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	4413      	add	r3, r2
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	4619      	mov	r1, r3
 8001d14:	4b27      	ldr	r3, [pc, #156]	@ (8001db4 <LCD_Draw_Char+0xd0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	889b      	ldrh	r3, [r3, #4]
 8001d1a:	4a27      	ldr	r2, [pc, #156]	@ (8001db8 <LCD_Draw_Char+0xd4>)
 8001d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d20:	08db      	lsrs	r3, r3, #3
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	2280      	movs	r2, #128	@ 0x80
 8001d28:	409a      	lsls	r2, r3
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	fa42 f303 	asr.w	r3, r2, r3
 8001d30:	400b      	ands	r3, r1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d104      	bne.n	8001d40 <LCD_Draw_Char+0x5c>
 8001d36:	4b1f      	ldr	r3, [pc, #124]	@ (8001db4 <LCD_Draw_Char+0xd0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	889b      	ldrh	r3, [r3, #4]
 8001d3c:	2b0c      	cmp	r3, #12
 8001d3e:	d920      	bls.n	8001d82 <LCD_Draw_Char+0x9e>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	4413      	add	r3, r2
 8001d48:	881b      	ldrh	r3, [r3, #0]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	fa42 f303 	asr.w	r3, r2, r3
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d104      	bne.n	8001d64 <LCD_Draw_Char+0x80>
 8001d5a:	4b16      	ldr	r3, [pc, #88]	@ (8001db4 <LCD_Draw_Char+0xd0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	889b      	ldrh	r3, [r3, #4]
 8001d60:	2b0c      	cmp	r3, #12
 8001d62:	d80e      	bhi.n	8001d82 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	88fb      	ldrh	r3, [r7, #6]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	b298      	uxth	r0, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	88bb      	ldrh	r3, [r7, #4]
 8001d74:	4413      	add	r3, r2
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	4a10      	ldr	r2, [pc, #64]	@ (8001dbc <LCD_Draw_Char+0xd8>)
 8001d7a:	8812      	ldrh	r2, [r2, #0]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f7ff fe7b 	bl	8001a78 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	3301      	adds	r3, #1
 8001d86:	60bb      	str	r3, [r7, #8]
 8001d88:	4b0a      	ldr	r3, [pc, #40]	@ (8001db4 <LCD_Draw_Char+0xd0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	889b      	ldrh	r3, [r3, #4]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d3b8      	bcc.n	8001d08 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	4b05      	ldr	r3, [pc, #20]	@ (8001db4 <LCD_Draw_Char+0xd0>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	88db      	ldrh	r3, [r3, #6]
 8001da2:	461a      	mov	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d3ab      	bcc.n	8001d02 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8001daa:	bf00      	nop
 8001dac:	bf00      	nop
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	200001ac 	.word	0x200001ac
 8001db8:	aaaaaaab 	.word	0xaaaaaaab
 8001dbc:	20000000 	.word	0x20000000

08001dc0 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	80fb      	strh	r3, [r7, #6]
 8001dca:	460b      	mov	r3, r1
 8001dcc:	80bb      	strh	r3, [r7, #4]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8001dd2:	78fb      	ldrb	r3, [r7, #3]
 8001dd4:	3b20      	subs	r3, #32
 8001dd6:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8001dd8:	4b09      	ldr	r3, [pc, #36]	@ (8001e00 <LCD_DisplayChar+0x40>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	78fb      	ldrb	r3, [r7, #3]
 8001de0:	4907      	ldr	r1, [pc, #28]	@ (8001e00 <LCD_DisplayChar+0x40>)
 8001de2:	6809      	ldr	r1, [r1, #0]
 8001de4:	88c9      	ldrh	r1, [r1, #6]
 8001de6:	fb01 f303 	mul.w	r3, r1, r3
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	441a      	add	r2, r3
 8001dee:	88b9      	ldrh	r1, [r7, #4]
 8001df0:	88fb      	ldrh	r3, [r7, #6]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff ff76 	bl	8001ce4 <LCD_Draw_Char>
}
 8001df8:	bf00      	nop
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	200001ac 	.word	0x200001ac

08001e04 <LCD_DisplayString>:

void LCD_DisplayString(uint16_t Xpos, uint16_t Ypos, const char* str){
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	603a      	str	r2, [r7, #0]
 8001e0e:	80fb      	strh	r3, [r7, #6]
 8001e10:	460b      	mov	r3, r1
 8001e12:	80bb      	strh	r3, [r7, #4]
	while(*str){
 8001e14:	e00f      	b.n	8001e36 <LCD_DisplayString+0x32>
		LCD_DisplayChar(Xpos, Ypos, (uint8_t)*str);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	781a      	ldrb	r2, [r3, #0]
 8001e1a:	88b9      	ldrh	r1, [r7, #4]
 8001e1c:	88fb      	ldrh	r3, [r7, #6]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff ffce 	bl	8001dc0 <LCD_DisplayChar>

		Xpos += LCD_Currentfonts->Width;
 8001e24:	4b08      	ldr	r3, [pc, #32]	@ (8001e48 <LCD_DisplayString+0x44>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	889a      	ldrh	r2, [r3, #4]
 8001e2a:	88fb      	ldrh	r3, [r7, #6]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	80fb      	strh	r3, [r7, #6]
		str++;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	3301      	adds	r3, #1
 8001e34:	603b      	str	r3, [r7, #0]
	while(*str){
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1eb      	bne.n	8001e16 <LCD_DisplayString+0x12>
	}
}
 8001e3e:	bf00      	nop
 8001e40:	bf00      	nop
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	200001ac 	.word	0x200001ac

08001e4c <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e50:	b672      	cpsid	i
}
 8001e52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e54:	bf00      	nop
 8001e56:	e7fd      	b.n	8001e54 <LCD_Error_Handler+0x8>

08001e58 <InitializeLCDTouch>:

// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void){
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8001e5c:	f001 fc61 	bl	8003722 <STMPE811_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d001      	beq.n	8001e6a <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8001e66:	bf00      	nop
 8001e68:	e7fd      	b.n	8001e66 <InitializeLCDTouch+0xe>
  }
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct){
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f001 fd0b 	bl	8003892 <STMPE811_ReadTouch>
 8001e7c:	4603      	mov	r3, r0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <DetermineLeftOrRightTouch>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData){
	STMPE811_Write(RegToWrite, writeData);
}

uint8_t DetermineLeftOrRightTouch(uint16_t xCoord){
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	80fb      	strh	r3, [r7, #6]
	if(xCoord < (LCD_PIXEL_WIDTH/2)){
 8001e90:	88fb      	ldrh	r3, [r7, #6]
 8001e92:	2b77      	cmp	r3, #119	@ 0x77
 8001e94:	d801      	bhi.n	8001e9a <DetermineLeftOrRightTouch+0x14>
		return LEFT;
 8001e96:	2300      	movs	r3, #0
 8001e98:	e000      	b.n	8001e9c <DetermineLeftOrRightTouch+0x16>
	}else{
		return RIGHT;
 8001e9a:	2301      	movs	r3, #1
	}
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <displayStartScreen>:


void displayStartScreen(){
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_BLACK);
 8001eac:	2100      	movs	r1, #0
 8001eae:	2000      	movs	r0, #0
 8001eb0:	f7ff fed6 	bl	8001c60 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8001eb4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001eb8:	f7ff fef4 	bl	8001ca4 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8001ebc:	4841      	ldr	r0, [pc, #260]	@ (8001fc4 <displayStartScreen+0x11c>)
 8001ebe:	f7ff ff01 	bl	8001cc4 <LCD_SetFont>

	LCD_Draw_Circle_Fill(60,LCD_PIXEL_HEIGHT/2,50,LCD_COLOR_BLUE);
 8001ec2:	231f      	movs	r3, #31
 8001ec4:	2232      	movs	r2, #50	@ 0x32
 8001ec6:	21a0      	movs	r1, #160	@ 0xa0
 8001ec8:	203c      	movs	r0, #60	@ 0x3c
 8001eca:	f7ff fdf3 	bl	8001ab4 <LCD_Draw_Circle_Fill>

	LCD_DisplayChar(30,(LCD_PIXEL_HEIGHT/2) - 20,'S');
 8001ece:	2253      	movs	r2, #83	@ 0x53
 8001ed0:	218c      	movs	r1, #140	@ 0x8c
 8001ed2:	201e      	movs	r0, #30
 8001ed4:	f7ff ff74 	bl	8001dc0 <LCD_DisplayChar>
	LCD_DisplayChar(41,(LCD_PIXEL_HEIGHT/2) - 20,'i');
 8001ed8:	2269      	movs	r2, #105	@ 0x69
 8001eda:	218c      	movs	r1, #140	@ 0x8c
 8001edc:	2029      	movs	r0, #41	@ 0x29
 8001ede:	f7ff ff6f 	bl	8001dc0 <LCD_DisplayChar>
	LCD_DisplayChar(50,(LCD_PIXEL_HEIGHT/2) - 20,'n');
 8001ee2:	226e      	movs	r2, #110	@ 0x6e
 8001ee4:	218c      	movs	r1, #140	@ 0x8c
 8001ee6:	2032      	movs	r0, #50	@ 0x32
 8001ee8:	f7ff ff6a 	bl	8001dc0 <LCD_DisplayChar>
	LCD_DisplayChar(64,(LCD_PIXEL_HEIGHT/2) - 20,'g');
 8001eec:	2267      	movs	r2, #103	@ 0x67
 8001eee:	218c      	movs	r1, #140	@ 0x8c
 8001ef0:	2040      	movs	r0, #64	@ 0x40
 8001ef2:	f7ff ff65 	bl	8001dc0 <LCD_DisplayChar>
	LCD_DisplayChar(73,(LCD_PIXEL_HEIGHT/2) - 20,'l');
 8001ef6:	226c      	movs	r2, #108	@ 0x6c
 8001ef8:	218c      	movs	r1, #140	@ 0x8c
 8001efa:	2049      	movs	r0, #73	@ 0x49
 8001efc:	f7ff ff60 	bl	8001dc0 <LCD_DisplayChar>
	LCD_DisplayChar(80,(LCD_PIXEL_HEIGHT/2) - 20,'e');
 8001f00:	2265      	movs	r2, #101	@ 0x65
 8001f02:	218c      	movs	r1, #140	@ 0x8c
 8001f04:	2050      	movs	r0, #80	@ 0x50
 8001f06:	f7ff ff5b 	bl	8001dc0 <LCD_DisplayChar>

	LCD_DisplayChar(30,(LCD_PIXEL_HEIGHT/2),'P');
 8001f0a:	2250      	movs	r2, #80	@ 0x50
 8001f0c:	21a0      	movs	r1, #160	@ 0xa0
 8001f0e:	201e      	movs	r0, #30
 8001f10:	f7ff ff56 	bl	8001dc0 <LCD_DisplayChar>
	LCD_DisplayChar(41,(LCD_PIXEL_HEIGHT/2),'l');
 8001f14:	226c      	movs	r2, #108	@ 0x6c
 8001f16:	21a0      	movs	r1, #160	@ 0xa0
 8001f18:	2029      	movs	r0, #41	@ 0x29
 8001f1a:	f7ff ff51 	bl	8001dc0 <LCD_DisplayChar>
	LCD_DisplayChar(49,(LCD_PIXEL_HEIGHT/2),'a');
 8001f1e:	2261      	movs	r2, #97	@ 0x61
 8001f20:	21a0      	movs	r1, #160	@ 0xa0
 8001f22:	2031      	movs	r0, #49	@ 0x31
 8001f24:	f7ff ff4c 	bl	8001dc0 <LCD_DisplayChar>
	LCD_DisplayChar(59,(LCD_PIXEL_HEIGHT/2),'y');
 8001f28:	2279      	movs	r2, #121	@ 0x79
 8001f2a:	21a0      	movs	r1, #160	@ 0xa0
 8001f2c:	203b      	movs	r0, #59	@ 0x3b
 8001f2e:	f7ff ff47 	bl	8001dc0 <LCD_DisplayChar>
	LCD_DisplayChar(72,(LCD_PIXEL_HEIGHT/2),'e');
 8001f32:	2265      	movs	r2, #101	@ 0x65
 8001f34:	21a0      	movs	r1, #160	@ 0xa0
 8001f36:	2048      	movs	r0, #72	@ 0x48
 8001f38:	f7ff ff42 	bl	8001dc0 <LCD_DisplayChar>
	LCD_DisplayChar(83,(LCD_PIXEL_HEIGHT/2),'r');
 8001f3c:	2272      	movs	r2, #114	@ 0x72
 8001f3e:	21a0      	movs	r1, #160	@ 0xa0
 8001f40:	2053      	movs	r0, #83	@ 0x53
 8001f42:	f7ff ff3d 	bl	8001dc0 <LCD_DisplayChar>

	LCD_Draw_Circle_Fill(180,LCD_PIXEL_HEIGHT/2,50,LCD_COLOR_BLUE);
 8001f46:	231f      	movs	r3, #31
 8001f48:	2232      	movs	r2, #50	@ 0x32
 8001f4a:	21a0      	movs	r1, #160	@ 0xa0
 8001f4c:	20b4      	movs	r0, #180	@ 0xb4
 8001f4e:	f7ff fdb1 	bl	8001ab4 <LCD_Draw_Circle_Fill>

	LCD_DisplayChar(155,(LCD_PIXEL_HEIGHT/2) - 20,'M');
 8001f52:	224d      	movs	r2, #77	@ 0x4d
 8001f54:	218c      	movs	r1, #140	@ 0x8c
 8001f56:	209b      	movs	r0, #155	@ 0x9b
 8001f58:	f7ff ff32 	bl	8001dc0 <LCD_DisplayChar>
	LCD_DisplayChar(171,(LCD_PIXEL_HEIGHT/2) - 20,'u');
 8001f5c:	2275      	movs	r2, #117	@ 0x75
 8001f5e:	218c      	movs	r1, #140	@ 0x8c
 8001f60:	20ab      	movs	r0, #171	@ 0xab
 8001f62:	f7ff ff2d 	bl	8001dc0 <LCD_DisplayChar>
	LCD_DisplayChar(183,(LCD_PIXEL_HEIGHT/2) - 20,'l');
 8001f66:	226c      	movs	r2, #108	@ 0x6c
 8001f68:	218c      	movs	r1, #140	@ 0x8c
 8001f6a:	20b7      	movs	r0, #183	@ 0xb7
 8001f6c:	f7ff ff28 	bl	8001dc0 <LCD_DisplayChar>
	LCD_DisplayChar(190,(LCD_PIXEL_HEIGHT/2) - 20,'t');
 8001f70:	2274      	movs	r2, #116	@ 0x74
 8001f72:	218c      	movs	r1, #140	@ 0x8c
 8001f74:	20be      	movs	r0, #190	@ 0xbe
 8001f76:	f7ff ff23 	bl	8001dc0 <LCD_DisplayChar>
	LCD_DisplayChar(197,(LCD_PIXEL_HEIGHT/2) - 20,'i');
 8001f7a:	2269      	movs	r2, #105	@ 0x69
 8001f7c:	218c      	movs	r1, #140	@ 0x8c
 8001f7e:	20c5      	movs	r0, #197	@ 0xc5
 8001f80:	f7ff ff1e 	bl	8001dc0 <LCD_DisplayChar>

	LCD_DisplayChar(150,(LCD_PIXEL_HEIGHT/2),'P');
 8001f84:	2250      	movs	r2, #80	@ 0x50
 8001f86:	21a0      	movs	r1, #160	@ 0xa0
 8001f88:	2096      	movs	r0, #150	@ 0x96
 8001f8a:	f7ff ff19 	bl	8001dc0 <LCD_DisplayChar>
	LCD_DisplayChar(161,(LCD_PIXEL_HEIGHT/2),'l');
 8001f8e:	226c      	movs	r2, #108	@ 0x6c
 8001f90:	21a0      	movs	r1, #160	@ 0xa0
 8001f92:	20a1      	movs	r0, #161	@ 0xa1
 8001f94:	f7ff ff14 	bl	8001dc0 <LCD_DisplayChar>
	LCD_DisplayChar(169,(LCD_PIXEL_HEIGHT/2),'a');
 8001f98:	2261      	movs	r2, #97	@ 0x61
 8001f9a:	21a0      	movs	r1, #160	@ 0xa0
 8001f9c:	20a9      	movs	r0, #169	@ 0xa9
 8001f9e:	f7ff ff0f 	bl	8001dc0 <LCD_DisplayChar>
	LCD_DisplayChar(179,(LCD_PIXEL_HEIGHT/2),'y');
 8001fa2:	2279      	movs	r2, #121	@ 0x79
 8001fa4:	21a0      	movs	r1, #160	@ 0xa0
 8001fa6:	20b3      	movs	r0, #179	@ 0xb3
 8001fa8:	f7ff ff0a 	bl	8001dc0 <LCD_DisplayChar>
	LCD_DisplayChar(192,(LCD_PIXEL_HEIGHT/2),'e');
 8001fac:	2265      	movs	r2, #101	@ 0x65
 8001fae:	21a0      	movs	r1, #160	@ 0xa0
 8001fb0:	20c0      	movs	r0, #192	@ 0xc0
 8001fb2:	f7ff ff05 	bl	8001dc0 <LCD_DisplayChar>
	LCD_DisplayChar(203,(LCD_PIXEL_HEIGHT/2),'r');
 8001fb6:	2272      	movs	r2, #114	@ 0x72
 8001fb8:	21a0      	movs	r1, #160	@ 0xa0
 8001fba:	20cb      	movs	r0, #203	@ 0xcb
 8001fbc:	f7ff ff00 	bl	8001dc0 <LCD_DisplayChar>

}
 8001fc0:	bf00      	nop
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20000004 	.word	0x20000004

08001fc8 <displayGameScreen>:

void displayGameScreen(){
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b094      	sub	sp, #80	@ 0x50
 8001fcc:	af00      	add	r7, sp, #0
	//Screen has 7 columns and 6 rows
	LCD_Clear(0,LCD_COLOR_BLACK);
 8001fce:	2100      	movs	r1, #0
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f7ff fe45 	bl	8001c60 <LCD_Clear>

	//Drawing Horizontal Lines
	for(int i = 1; i < NUM_ROWS + 1; i++){
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001fda:	e011      	b.n	8002000 <displayGameScreen+0x38>
		LCD_Draw_Horizontal_Line(0, (LCD_PIXEL_HEIGHT * ROW_NUM_DIVISOR) * i, LCD_PIXEL_WIDTH, LCD_COLOR_WHITE);
 8001fdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	0052      	lsls	r2, r2, #1
 8001fe4:	4413      	add	r3, r2
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	0112      	lsls	r2, r2, #4
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	b299      	uxth	r1, r3
 8001fee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ff2:	22f0      	movs	r2, #240	@ 0xf0
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	f7ff fdd7 	bl	8001ba8 <LCD_Draw_Horizontal_Line>
	for(int i = 1; i < NUM_ROWS + 1; i++){
 8001ffa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002000:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002002:	2b06      	cmp	r3, #6
 8002004:	ddea      	ble.n	8001fdc <displayGameScreen+0x14>
	}
	LCD_Draw_Horizontal_Line(0, LCD_PIXEL_HEIGHT - 1, LCD_PIXEL_WIDTH, LCD_COLOR_WHITE);
 8002006:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800200a:	22f0      	movs	r2, #240	@ 0xf0
 800200c:	f240 113f 	movw	r1, #319	@ 0x13f
 8002010:	2000      	movs	r0, #0
 8002012:	f7ff fdc9 	bl	8001ba8 <LCD_Draw_Horizontal_Line>

	//Drawing vertical Lines
	for(int i = 0; i < NUM_COLUMNS; i++){
 8002016:	2300      	movs	r3, #0
 8002018:	64bb      	str	r3, [r7, #72]	@ 0x48
 800201a:	e010      	b.n	800203e <displayGameScreen+0x76>
		LCD_Draw_Vertical_Line((LCD_PIXEL_WIDTH * COLUMN_NUM_DIVISOR) * i, LCD_PIXEL_HEIGHT * COLUMN_NUM_DIVISOR, (LCD_PIXEL_HEIGHT * 6) * COLUMN_NUM_DIVISOR, LCD_COLOR_WHITE);
 800201c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800201e:	b29b      	uxth	r3, r3
 8002020:	461a      	mov	r2, r3
 8002022:	0112      	lsls	r2, r2, #4
 8002024:	4413      	add	r3, r2
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	b298      	uxth	r0, r3
 800202a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800202e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8002032:	212d      	movs	r1, #45	@ 0x2d
 8002034:	f7ff fd91 	bl	8001b5a <LCD_Draw_Vertical_Line>
	for(int i = 0; i < NUM_COLUMNS; i++){
 8002038:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800203a:	3301      	adds	r3, #1
 800203c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800203e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002040:	2b06      	cmp	r3, #6
 8002042:	ddeb      	ble.n	800201c <displayGameScreen+0x54>
	}
	LCD_Draw_Vertical_Line(LCD_PIXEL_WIDTH - 1, LCD_PIXEL_HEIGHT * 1/7, LCD_PIXEL_HEIGHT * 6/7, LCD_COLOR_WHITE);
 8002044:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002048:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800204c:	212d      	movs	r1, #45	@ 0x2d
 800204e:	20ef      	movs	r0, #239	@ 0xef
 8002050:	f7ff fd83 	bl	8001b5a <LCD_Draw_Vertical_Line>

	GameData gameInfo = getGameData();
 8002054:	463b      	mov	r3, r7
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff fb8e 	bl	8001778 <getGameData>
	for(int i = 0; i < NUM_ROWS; i++){
 800205c:	2300      	movs	r3, #0
 800205e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002060:	e09e      	b.n	80021a0 <displayGameScreen+0x1d8>
		for(int j = 0; j < NUM_COLUMNS ; j++){
 8002062:	2300      	movs	r3, #0
 8002064:	643b      	str	r3, [r7, #64]	@ 0x40
 8002066:	e094      	b.n	8002192 <displayGameScreen+0x1ca>
			if(gameInfo.board[i][j] == RED_TAKEN_SQUARE){
 8002068:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800206a:	4613      	mov	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	1a9b      	subs	r3, r3, r2
 8002070:	3350      	adds	r3, #80	@ 0x50
 8002072:	19da      	adds	r2, r3, r7
 8002074:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002076:	4413      	add	r3, r2
 8002078:	3b42      	subs	r3, #66	@ 0x42
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d13c      	bne.n	80020fa <displayGameScreen+0x132>
				gameInfo.tokenLocation.x = (LCD_PIXEL_WIDTH * COLUMN_NUM_DIVISOR * (j + CHIP_OFFSET));
 8002080:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002082:	f7fe fb81 	bl	8000788 <__aeabi_i2d>
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	4b4a      	ldr	r3, [pc, #296]	@ (80021b4 <displayGameScreen+0x1ec>)
 800208c:	f7fe fa30 	bl	80004f0 <__adddf3>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4610      	mov	r0, r2
 8002096:	4619      	mov	r1, r3
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	4b46      	ldr	r3, [pc, #280]	@ (80021b8 <displayGameScreen+0x1f0>)
 800209e:	f7fe f8f7 	bl	8000290 <__aeabi_dmul>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	4610      	mov	r0, r2
 80020a8:	4619      	mov	r1, r3
 80020aa:	f7fe fbd7 	bl	800085c <__aeabi_d2uiz>
 80020ae:	4603      	mov	r3, r0
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	813b      	strh	r3, [r7, #8]
				gameInfo.tokenLocation.y = (LCD_PIXEL_HEIGHT * ROW_NUM_DIVISOR * (i + 1 + CHIP_OFFSET));
 80020b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020b6:	3301      	adds	r3, #1
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe fb65 	bl	8000788 <__aeabi_i2d>
 80020be:	f04f 0200 	mov.w	r2, #0
 80020c2:	4b3c      	ldr	r3, [pc, #240]	@ (80021b4 <displayGameScreen+0x1ec>)
 80020c4:	f7fe fa14 	bl	80004f0 <__adddf3>
 80020c8:	4602      	mov	r2, r0
 80020ca:	460b      	mov	r3, r1
 80020cc:	4610      	mov	r0, r2
 80020ce:	4619      	mov	r1, r3
 80020d0:	f04f 0200 	mov.w	r2, #0
 80020d4:	4b39      	ldr	r3, [pc, #228]	@ (80021bc <displayGameScreen+0x1f4>)
 80020d6:	f7fe f8db 	bl	8000290 <__aeabi_dmul>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	4610      	mov	r0, r2
 80020e0:	4619      	mov	r1, r3
 80020e2:	f7fe fbbb 	bl	800085c <__aeabi_d2uiz>
 80020e6:	4603      	mov	r3, r0
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	817b      	strh	r3, [r7, #10]
				LCD_Draw_Circle_Fill(gameInfo.tokenLocation.x, gameInfo.tokenLocation.y, CHIP_RADIUS, LCD_COLOR_RED);
 80020ec:	8938      	ldrh	r0, [r7, #8]
 80020ee:	8979      	ldrh	r1, [r7, #10]
 80020f0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80020f4:	220f      	movs	r2, #15
 80020f6:	f7ff fcdd 	bl	8001ab4 <LCD_Draw_Circle_Fill>
			}
			if(gameInfo.board[i][j] == YELLOW_TAKEN_SQUARE){
 80020fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80020fc:	4613      	mov	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	1a9b      	subs	r3, r3, r2
 8002102:	3350      	adds	r3, #80	@ 0x50
 8002104:	19da      	adds	r2, r3, r7
 8002106:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002108:	4413      	add	r3, r2
 800210a:	3b42      	subs	r3, #66	@ 0x42
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b02      	cmp	r3, #2
 8002110:	d13c      	bne.n	800218c <displayGameScreen+0x1c4>
				gameInfo.tokenLocation.x = (LCD_PIXEL_WIDTH * COLUMN_NUM_DIVISOR * (j + CHIP_OFFSET));
 8002112:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002114:	f7fe fb38 	bl	8000788 <__aeabi_i2d>
 8002118:	f04f 0200 	mov.w	r2, #0
 800211c:	4b25      	ldr	r3, [pc, #148]	@ (80021b4 <displayGameScreen+0x1ec>)
 800211e:	f7fe f9e7 	bl	80004f0 <__adddf3>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4610      	mov	r0, r2
 8002128:	4619      	mov	r1, r3
 800212a:	f04f 0200 	mov.w	r2, #0
 800212e:	4b22      	ldr	r3, [pc, #136]	@ (80021b8 <displayGameScreen+0x1f0>)
 8002130:	f7fe f8ae 	bl	8000290 <__aeabi_dmul>
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	4610      	mov	r0, r2
 800213a:	4619      	mov	r1, r3
 800213c:	f7fe fb8e 	bl	800085c <__aeabi_d2uiz>
 8002140:	4603      	mov	r3, r0
 8002142:	b29b      	uxth	r3, r3
 8002144:	813b      	strh	r3, [r7, #8]
				gameInfo.tokenLocation.y = (LCD_PIXEL_HEIGHT * ROW_NUM_DIVISOR * (i + 1 + CHIP_OFFSET));
 8002146:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002148:	3301      	adds	r3, #1
 800214a:	4618      	mov	r0, r3
 800214c:	f7fe fb1c 	bl	8000788 <__aeabi_i2d>
 8002150:	f04f 0200 	mov.w	r2, #0
 8002154:	4b17      	ldr	r3, [pc, #92]	@ (80021b4 <displayGameScreen+0x1ec>)
 8002156:	f7fe f9cb 	bl	80004f0 <__adddf3>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	4610      	mov	r0, r2
 8002160:	4619      	mov	r1, r3
 8002162:	f04f 0200 	mov.w	r2, #0
 8002166:	4b15      	ldr	r3, [pc, #84]	@ (80021bc <displayGameScreen+0x1f4>)
 8002168:	f7fe f892 	bl	8000290 <__aeabi_dmul>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	4610      	mov	r0, r2
 8002172:	4619      	mov	r1, r3
 8002174:	f7fe fb72 	bl	800085c <__aeabi_d2uiz>
 8002178:	4603      	mov	r3, r0
 800217a:	b29b      	uxth	r3, r3
 800217c:	817b      	strh	r3, [r7, #10]
				LCD_Draw_Circle_Fill(gameInfo.tokenLocation.x, gameInfo.tokenLocation.y, CHIP_RADIUS, LCD_COLOR_YELLOW);
 800217e:	8938      	ldrh	r0, [r7, #8]
 8002180:	8979      	ldrh	r1, [r7, #10]
 8002182:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002186:	220f      	movs	r2, #15
 8002188:	f7ff fc94 	bl	8001ab4 <LCD_Draw_Circle_Fill>
		for(int j = 0; j < NUM_COLUMNS ; j++){
 800218c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800218e:	3301      	adds	r3, #1
 8002190:	643b      	str	r3, [r7, #64]	@ 0x40
 8002192:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002194:	2b06      	cmp	r3, #6
 8002196:	f77f af67 	ble.w	8002068 <displayGameScreen+0xa0>
	for(int i = 0; i < NUM_ROWS; i++){
 800219a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800219c:	3301      	adds	r3, #1
 800219e:	647b      	str	r3, [r7, #68]	@ 0x44
 80021a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021a2:	2b05      	cmp	r3, #5
 80021a4:	f77f af5d 	ble.w	8002062 <displayGameScreen+0x9a>
			}
		}
	}
}
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
 80021ac:	3750      	adds	r7, #80	@ 0x50
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	3fe00000 	.word	0x3fe00000
 80021b8:	40410000 	.word	0x40410000
 80021bc:	40468000 	.word	0x40468000

080021c0 <displayWinner>:

void displayWinner(){
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b092      	sub	sp, #72	@ 0x48
 80021c4:	af02      	add	r7, sp, #8
	GameData gameInfo = getGameData();
 80021c6:	463b      	mov	r3, r7
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff fad5 	bl	8001778 <getGameData>

	LCD_SetTextColor(LCD_COLOR_BLACK);
 80021ce:	2000      	movs	r0, #0
 80021d0:	f7ff fd68 	bl	8001ca4 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 80021d4:	485f      	ldr	r0, [pc, #380]	@ (8002354 <displayWinner+0x194>)
 80021d6:	f7ff fd75 	bl	8001cc4 <LCD_SetFont>
	if(gameInfo.redWin || gameInfo.yellowWin){
 80021da:	78bb      	ldrb	r3, [r7, #2]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d102      	bne.n	80021e6 <displayWinner+0x26>
 80021e0:	793b      	ldrb	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d05e      	beq.n	80022a4 <displayWinner+0xe4>
		if(gameInfo.redWin){
 80021e6:	78bb      	ldrb	r3, [r7, #2]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d01a      	beq.n	8002222 <displayWinner+0x62>
			LCD_Draw_Circle_Fill(LCD_PIXEL_WIDTH_CENTER, LCD_PIXEL_HEIGHT_CENTER, 100, LCD_COLOR_RED);
 80021ec:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80021f0:	2264      	movs	r2, #100	@ 0x64
 80021f2:	21a0      	movs	r1, #160	@ 0xa0
 80021f4:	2078      	movs	r0, #120	@ 0x78
 80021f6:	f7ff fc5d 	bl	8001ab4 <LCD_Draw_Circle_Fill>

			LCD_DisplayChar(90,(LCD_PIXEL_HEIGHT/2) - 15,'R');
 80021fa:	2252      	movs	r2, #82	@ 0x52
 80021fc:	2191      	movs	r1, #145	@ 0x91
 80021fe:	205a      	movs	r0, #90	@ 0x5a
 8002200:	f7ff fdde 	bl	8001dc0 <LCD_DisplayChar>
			LCD_DisplayChar(110,(LCD_PIXEL_HEIGHT/2) - 15,'e');
 8002204:	2265      	movs	r2, #101	@ 0x65
 8002206:	2191      	movs	r1, #145	@ 0x91
 8002208:	206e      	movs	r0, #110	@ 0x6e
 800220a:	f7ff fdd9 	bl	8001dc0 <LCD_DisplayChar>
			LCD_DisplayChar(130,(LCD_PIXEL_HEIGHT/2) - 15,'d');
 800220e:	2264      	movs	r2, #100	@ 0x64
 8002210:	2191      	movs	r1, #145	@ 0x91
 8002212:	2082      	movs	r0, #130	@ 0x82
 8002214:	f7ff fdd4 	bl	8001dc0 <LCD_DisplayChar>
			gameInfo.numRedWins++;
 8002218:	78fb      	ldrb	r3, [r7, #3]
 800221a:	3301      	adds	r3, #1
 800221c:	b2db      	uxtb	r3, r3
 800221e:	70fb      	strb	r3, [r7, #3]
 8002220:	e02b      	b.n	800227a <displayWinner+0xba>
		}
		else if(gameInfo.yellowWin){
 8002222:	793b      	ldrb	r3, [r7, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d028      	beq.n	800227a <displayWinner+0xba>
			LCD_Draw_Circle_Fill(LCD_PIXEL_WIDTH_CENTER, LCD_PIXEL_HEIGHT_CENTER, 100, LCD_COLOR_YELLOW);
 8002228:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800222c:	2264      	movs	r2, #100	@ 0x64
 800222e:	21a0      	movs	r1, #160	@ 0xa0
 8002230:	2078      	movs	r0, #120	@ 0x78
 8002232:	f7ff fc3f 	bl	8001ab4 <LCD_Draw_Circle_Fill>

			LCD_DisplayChar(70,(LCD_PIXEL_HEIGHT/2) - 15,'Y');
 8002236:	2259      	movs	r2, #89	@ 0x59
 8002238:	2191      	movs	r1, #145	@ 0x91
 800223a:	2046      	movs	r0, #70	@ 0x46
 800223c:	f7ff fdc0 	bl	8001dc0 <LCD_DisplayChar>
			LCD_DisplayChar(90,(LCD_PIXEL_HEIGHT/2) - 15,'e');
 8002240:	2265      	movs	r2, #101	@ 0x65
 8002242:	2191      	movs	r1, #145	@ 0x91
 8002244:	205a      	movs	r0, #90	@ 0x5a
 8002246:	f7ff fdbb 	bl	8001dc0 <LCD_DisplayChar>
			LCD_DisplayChar(110,(LCD_PIXEL_HEIGHT/2) - 15,'l');
 800224a:	226c      	movs	r2, #108	@ 0x6c
 800224c:	2191      	movs	r1, #145	@ 0x91
 800224e:	206e      	movs	r0, #110	@ 0x6e
 8002250:	f7ff fdb6 	bl	8001dc0 <LCD_DisplayChar>
			LCD_DisplayChar(130,(LCD_PIXEL_HEIGHT/2) - 15,'l');
 8002254:	226c      	movs	r2, #108	@ 0x6c
 8002256:	2191      	movs	r1, #145	@ 0x91
 8002258:	2082      	movs	r0, #130	@ 0x82
 800225a:	f7ff fdb1 	bl	8001dc0 <LCD_DisplayChar>
			LCD_DisplayChar(150,(LCD_PIXEL_HEIGHT/2) - 15,'o');
 800225e:	226f      	movs	r2, #111	@ 0x6f
 8002260:	2191      	movs	r1, #145	@ 0x91
 8002262:	2096      	movs	r0, #150	@ 0x96
 8002264:	f7ff fdac 	bl	8001dc0 <LCD_DisplayChar>
			LCD_DisplayChar(170,(LCD_PIXEL_HEIGHT/2) - 15,'w');
 8002268:	2277      	movs	r2, #119	@ 0x77
 800226a:	2191      	movs	r1, #145	@ 0x91
 800226c:	20aa      	movs	r0, #170	@ 0xaa
 800226e:	f7ff fda7 	bl	8001dc0 <LCD_DisplayChar>
			gameInfo.numYellowWins++;
 8002272:	797b      	ldrb	r3, [r7, #5]
 8002274:	3301      	adds	r3, #1
 8002276:	b2db      	uxtb	r3, r3
 8002278:	717b      	strb	r3, [r7, #5]
		}

		LCD_DisplayChar(85,(LCD_PIXEL_HEIGHT/2) + 5,'W');
 800227a:	2257      	movs	r2, #87	@ 0x57
 800227c:	21a5      	movs	r1, #165	@ 0xa5
 800227e:	2055      	movs	r0, #85	@ 0x55
 8002280:	f7ff fd9e 	bl	8001dc0 <LCD_DisplayChar>
		LCD_DisplayChar(105,(LCD_PIXEL_HEIGHT/2) + 5,'i');
 8002284:	2269      	movs	r2, #105	@ 0x69
 8002286:	21a5      	movs	r1, #165	@ 0xa5
 8002288:	2069      	movs	r0, #105	@ 0x69
 800228a:	f7ff fd99 	bl	8001dc0 <LCD_DisplayChar>
		LCD_DisplayChar(125,(LCD_PIXEL_HEIGHT/2) + 5,'n');
 800228e:	226e      	movs	r2, #110	@ 0x6e
 8002290:	21a5      	movs	r1, #165	@ 0xa5
 8002292:	207d      	movs	r0, #125	@ 0x7d
 8002294:	f7ff fd94 	bl	8001dc0 <LCD_DisplayChar>
		LCD_DisplayChar(145,(LCD_PIXEL_HEIGHT/2) + 5,'s');
 8002298:	2273      	movs	r2, #115	@ 0x73
 800229a:	21a5      	movs	r1, #165	@ 0xa5
 800229c:	2091      	movs	r0, #145	@ 0x91
 800229e:	f7ff fd8f 	bl	8001dc0 <LCD_DisplayChar>
 80022a2:	e01a      	b.n	80022da <displayWinner+0x11a>
	}else{
		LCD_Draw_Circle_Fill(LCD_PIXEL_WIDTH_CENTER, LCD_PIXEL_HEIGHT_CENTER, 100, LCD_COLOR_GREY);
 80022a4:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 80022a8:	2264      	movs	r2, #100	@ 0x64
 80022aa:	21a0      	movs	r1, #160	@ 0xa0
 80022ac:	2078      	movs	r0, #120	@ 0x78
 80022ae:	f7ff fc01 	bl	8001ab4 <LCD_Draw_Circle_Fill>

		LCD_DisplayChar(85,(LCD_PIXEL_HEIGHT/2) - 5,'D');
 80022b2:	2244      	movs	r2, #68	@ 0x44
 80022b4:	219b      	movs	r1, #155	@ 0x9b
 80022b6:	2055      	movs	r0, #85	@ 0x55
 80022b8:	f7ff fd82 	bl	8001dc0 <LCD_DisplayChar>
		LCD_DisplayChar(105,(LCD_PIXEL_HEIGHT/2) - 5,'r');
 80022bc:	2272      	movs	r2, #114	@ 0x72
 80022be:	219b      	movs	r1, #155	@ 0x9b
 80022c0:	2069      	movs	r0, #105	@ 0x69
 80022c2:	f7ff fd7d 	bl	8001dc0 <LCD_DisplayChar>
		LCD_DisplayChar(125,(LCD_PIXEL_HEIGHT/2) - 5,'a');
 80022c6:	2261      	movs	r2, #97	@ 0x61
 80022c8:	219b      	movs	r1, #155	@ 0x9b
 80022ca:	207d      	movs	r0, #125	@ 0x7d
 80022cc:	f7ff fd78 	bl	8001dc0 <LCD_DisplayChar>
		LCD_DisplayChar(145,(LCD_PIXEL_HEIGHT/2) - 5,'w');
 80022d0:	2277      	movs	r2, #119	@ 0x77
 80022d2:	219b      	movs	r1, #155	@ 0x9b
 80022d4:	2091      	movs	r0, #145	@ 0x91
 80022d6:	f7ff fd73 	bl	8001dc0 <LCD_DisplayChar>
	}

	LCD_Draw_Box(40, 280, 35, 160, LCD_COLOR_BLUE);
 80022da:	231f      	movs	r3, #31
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	23a0      	movs	r3, #160	@ 0xa0
 80022e0:	2223      	movs	r2, #35	@ 0x23
 80022e2:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80022e6:	2028      	movs	r0, #40	@ 0x28
 80022e8:	f7ff fc85 	bl	8001bf6 <LCD_Draw_Box>

	LCD_DisplayChar(60,290,'C');
 80022ec:	2243      	movs	r2, #67	@ 0x43
 80022ee:	f44f 7191 	mov.w	r1, #290	@ 0x122
 80022f2:	203c      	movs	r0, #60	@ 0x3c
 80022f4:	f7ff fd64 	bl	8001dc0 <LCD_DisplayChar>
	LCD_DisplayChar(75,290,'o');
 80022f8:	226f      	movs	r2, #111	@ 0x6f
 80022fa:	f44f 7191 	mov.w	r1, #290	@ 0x122
 80022fe:	204b      	movs	r0, #75	@ 0x4b
 8002300:	f7ff fd5e 	bl	8001dc0 <LCD_DisplayChar>
	LCD_DisplayChar(90,290,'n');
 8002304:	226e      	movs	r2, #110	@ 0x6e
 8002306:	f44f 7191 	mov.w	r1, #290	@ 0x122
 800230a:	205a      	movs	r0, #90	@ 0x5a
 800230c:	f7ff fd58 	bl	8001dc0 <LCD_DisplayChar>
	LCD_DisplayChar(105,290,'t');
 8002310:	2274      	movs	r2, #116	@ 0x74
 8002312:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8002316:	2069      	movs	r0, #105	@ 0x69
 8002318:	f7ff fd52 	bl	8001dc0 <LCD_DisplayChar>
	LCD_DisplayChar(120,290,'i');
 800231c:	2269      	movs	r2, #105	@ 0x69
 800231e:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8002322:	2078      	movs	r0, #120	@ 0x78
 8002324:	f7ff fd4c 	bl	8001dc0 <LCD_DisplayChar>
	LCD_DisplayChar(135,290,'n');
 8002328:	226e      	movs	r2, #110	@ 0x6e
 800232a:	f44f 7191 	mov.w	r1, #290	@ 0x122
 800232e:	2087      	movs	r0, #135	@ 0x87
 8002330:	f7ff fd46 	bl	8001dc0 <LCD_DisplayChar>
	LCD_DisplayChar(150,290,'u');
 8002334:	2275      	movs	r2, #117	@ 0x75
 8002336:	f44f 7191 	mov.w	r1, #290	@ 0x122
 800233a:	2096      	movs	r0, #150	@ 0x96
 800233c:	f7ff fd40 	bl	8001dc0 <LCD_DisplayChar>
	LCD_DisplayChar(165,290,'e');
 8002340:	2265      	movs	r2, #101	@ 0x65
 8002342:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8002346:	20a5      	movs	r0, #165	@ 0xa5
 8002348:	f7ff fd3a 	bl	8001dc0 <LCD_DisplayChar>
}
 800234c:	bf00      	nop
 800234e:	3740      	adds	r7, #64	@ 0x40
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20000004 	.word	0x20000004

08002358 <displayEndScreen>:



void displayEndScreen(){
 8002358:	b580      	push	{r7, lr}
 800235a:	b09a      	sub	sp, #104	@ 0x68
 800235c:	af02      	add	r7, sp, #8
	LCD_Clear(0,LCD_COLOR_BLACK);
 800235e:	2100      	movs	r1, #0
 8002360:	2000      	movs	r0, #0
 8002362:	f7ff fc7d 	bl	8001c60 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8002366:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800236a:	f7ff fc9b 	bl	8001ca4 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 800236e:	4857      	ldr	r0, [pc, #348]	@ (80024cc <displayEndScreen+0x174>)
 8002370:	f7ff fca8 	bl	8001cc4 <LCD_SetFont>

	GameData gameInfo = getGameData();
 8002374:	f107 0320 	add.w	r3, r7, #32
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff f9fd 	bl	8001778 <getGameData>

	LCD_DisplayString(85, LCD_PIXEL_HEIGHT/8, "Wins");
 800237e:	4a54      	ldr	r2, [pc, #336]	@ (80024d0 <displayEndScreen+0x178>)
 8002380:	2128      	movs	r1, #40	@ 0x28
 8002382:	2055      	movs	r0, #85	@ 0x55
 8002384:	f7ff fd3e 	bl	8001e04 <LCD_DisplayString>
	LCD_Draw_Horizontal_Line(80, (LCD_PIXEL_HEIGHT/8) + 23, 70, LCD_COLOR_WHITE);
 8002388:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800238c:	2246      	movs	r2, #70	@ 0x46
 800238e:	213f      	movs	r1, #63	@ 0x3f
 8002390:	2050      	movs	r0, #80	@ 0x50
 8002392:	f7ff fc09 	bl	8001ba8 <LCD_Draw_Horizontal_Line>

	LCD_SetTextColor(LCD_COLOR_RED);
 8002396:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800239a:	f7ff fc83 	bl	8001ca4 <LCD_SetTextColor>
	LCD_DisplayString(20, LCD_PIXEL_HEIGHT/4, "Red:");
 800239e:	4a4d      	ldr	r2, [pc, #308]	@ (80024d4 <displayEndScreen+0x17c>)
 80023a0:	2150      	movs	r1, #80	@ 0x50
 80023a2:	2014      	movs	r0, #20
 80023a4:	f7ff fd2e 	bl	8001e04 <LCD_DisplayString>

	char redWins[6];
	sprintf(redWins, "%d", gameInfo.numRedWins);
 80023a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80023ac:	461a      	mov	r2, r3
 80023ae:	f107 0318 	add.w	r3, r7, #24
 80023b2:	4949      	ldr	r1, [pc, #292]	@ (80024d8 <displayEndScreen+0x180>)
 80023b4:	4618      	mov	r0, r3
 80023b6:	f005 f9cb 	bl	8007750 <siprintf>

	LCD_DisplayString(80, LCD_PIXEL_HEIGHT/4, redWins);
 80023ba:	f107 0318 	add.w	r3, r7, #24
 80023be:	461a      	mov	r2, r3
 80023c0:	2150      	movs	r1, #80	@ 0x50
 80023c2:	2050      	movs	r0, #80	@ 0x50
 80023c4:	f7ff fd1e 	bl	8001e04 <LCD_DisplayString>


	LCD_SetTextColor(LCD_COLOR_YELLOW);
 80023c8:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 80023cc:	f7ff fc6a 	bl	8001ca4 <LCD_SetTextColor>
	LCD_DisplayString(110, LCD_PIXEL_HEIGHT/4, "Yellow:");
 80023d0:	4a42      	ldr	r2, [pc, #264]	@ (80024dc <displayEndScreen+0x184>)
 80023d2:	2150      	movs	r1, #80	@ 0x50
 80023d4:	206e      	movs	r0, #110	@ 0x6e
 80023d6:	f7ff fd15 	bl	8001e04 <LCD_DisplayString>

	char yellowWins[6];
	sprintf(yellowWins, "%d", gameInfo.numYellowWins);
 80023da:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80023de:	461a      	mov	r2, r3
 80023e0:	f107 0310 	add.w	r3, r7, #16
 80023e4:	493c      	ldr	r1, [pc, #240]	@ (80024d8 <displayEndScreen+0x180>)
 80023e6:	4618      	mov	r0, r3
 80023e8:	f005 f9b2 	bl	8007750 <siprintf>

	LCD_DisplayString(220, LCD_PIXEL_HEIGHT/4, yellowWins);
 80023ec:	f107 0310 	add.w	r3, r7, #16
 80023f0:	461a      	mov	r2, r3
 80023f2:	2150      	movs	r1, #80	@ 0x50
 80023f4:	20dc      	movs	r0, #220	@ 0xdc
 80023f6:	f7ff fd05 	bl	8001e04 <LCD_DisplayString>


	LCD_SetTextColor(LCD_COLOR_WHITE);
 80023fa:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80023fe:	f7ff fc51 	bl	8001ca4 <LCD_SetTextColor>
	LCD_DisplayChar(60,LCD_PIXEL_HEIGHT_CENTER,'T');
 8002402:	2254      	movs	r2, #84	@ 0x54
 8002404:	21a0      	movs	r1, #160	@ 0xa0
 8002406:	203c      	movs	r0, #60	@ 0x3c
 8002408:	f7ff fcda 	bl	8001dc0 <LCD_DisplayChar>
	LCD_DisplayChar(75,LCD_PIXEL_HEIGHT_CENTER,'i');
 800240c:	2269      	movs	r2, #105	@ 0x69
 800240e:	21a0      	movs	r1, #160	@ 0xa0
 8002410:	204b      	movs	r0, #75	@ 0x4b
 8002412:	f7ff fcd5 	bl	8001dc0 <LCD_DisplayChar>
	LCD_DisplayChar(90,LCD_PIXEL_HEIGHT_CENTER,'m');
 8002416:	226d      	movs	r2, #109	@ 0x6d
 8002418:	21a0      	movs	r1, #160	@ 0xa0
 800241a:	205a      	movs	r0, #90	@ 0x5a
 800241c:	f7ff fcd0 	bl	8001dc0 <LCD_DisplayChar>
	LCD_DisplayChar(105,LCD_PIXEL_HEIGHT_CENTER,'e');
 8002420:	2265      	movs	r2, #101	@ 0x65
 8002422:	21a0      	movs	r1, #160	@ 0xa0
 8002424:	2069      	movs	r0, #105	@ 0x69
 8002426:	f7ff fccb 	bl	8001dc0 <LCD_DisplayChar>
	LCD_DisplayChar(115,LCD_PIXEL_HEIGHT_CENTER,':');
 800242a:	223a      	movs	r2, #58	@ 0x3a
 800242c:	21a0      	movs	r1, #160	@ 0xa0
 800242e:	2073      	movs	r0, #115	@ 0x73
 8002430:	f7ff fcc6 	bl	8001dc0 <LCD_DisplayChar>

	char time[12];
	sprintf(time ,"%ds", calculateTotalTime());
 8002434:	f7ff f86c 	bl	8001510 <calculateTotalTime>
 8002438:	4602      	mov	r2, r0
 800243a:	1d3b      	adds	r3, r7, #4
 800243c:	4928      	ldr	r1, [pc, #160]	@ (80024e0 <displayEndScreen+0x188>)
 800243e:	4618      	mov	r0, r3
 8002440:	f005 f986 	bl	8007750 <siprintf>

	LCD_DisplayString(130, LCD_PIXEL_HEIGHT_CENTER, time);
 8002444:	1d3b      	adds	r3, r7, #4
 8002446:	461a      	mov	r2, r3
 8002448:	21a0      	movs	r1, #160	@ 0xa0
 800244a:	2082      	movs	r0, #130	@ 0x82
 800244c:	f7ff fcda 	bl	8001e04 <LCD_DisplayString>


	LCD_Draw_Box(40, 280, 35, 160, LCD_COLOR_BLUE);
 8002450:	231f      	movs	r3, #31
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	23a0      	movs	r3, #160	@ 0xa0
 8002456:	2223      	movs	r2, #35	@ 0x23
 8002458:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800245c:	2028      	movs	r0, #40	@ 0x28
 800245e:	f7ff fbca 	bl	8001bf6 <LCD_Draw_Box>

	LCD_DisplayChar(60,290,'C');
 8002462:	2243      	movs	r2, #67	@ 0x43
 8002464:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8002468:	203c      	movs	r0, #60	@ 0x3c
 800246a:	f7ff fca9 	bl	8001dc0 <LCD_DisplayChar>
	LCD_DisplayChar(75,290,'o');
 800246e:	226f      	movs	r2, #111	@ 0x6f
 8002470:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8002474:	204b      	movs	r0, #75	@ 0x4b
 8002476:	f7ff fca3 	bl	8001dc0 <LCD_DisplayChar>
	LCD_DisplayChar(90,290,'n');
 800247a:	226e      	movs	r2, #110	@ 0x6e
 800247c:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8002480:	205a      	movs	r0, #90	@ 0x5a
 8002482:	f7ff fc9d 	bl	8001dc0 <LCD_DisplayChar>
	LCD_DisplayChar(105,290,'t');
 8002486:	2274      	movs	r2, #116	@ 0x74
 8002488:	f44f 7191 	mov.w	r1, #290	@ 0x122
 800248c:	2069      	movs	r0, #105	@ 0x69
 800248e:	f7ff fc97 	bl	8001dc0 <LCD_DisplayChar>
	LCD_DisplayChar(120,290,'i');
 8002492:	2269      	movs	r2, #105	@ 0x69
 8002494:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8002498:	2078      	movs	r0, #120	@ 0x78
 800249a:	f7ff fc91 	bl	8001dc0 <LCD_DisplayChar>
	LCD_DisplayChar(135,290,'n');
 800249e:	226e      	movs	r2, #110	@ 0x6e
 80024a0:	f44f 7191 	mov.w	r1, #290	@ 0x122
 80024a4:	2087      	movs	r0, #135	@ 0x87
 80024a6:	f7ff fc8b 	bl	8001dc0 <LCD_DisplayChar>
	LCD_DisplayChar(150,290,'u');
 80024aa:	2275      	movs	r2, #117	@ 0x75
 80024ac:	f44f 7191 	mov.w	r1, #290	@ 0x122
 80024b0:	2096      	movs	r0, #150	@ 0x96
 80024b2:	f7ff fc85 	bl	8001dc0 <LCD_DisplayChar>
	LCD_DisplayChar(165,290,'e');
 80024b6:	2265      	movs	r2, #101	@ 0x65
 80024b8:	f44f 7191 	mov.w	r1, #290	@ 0x122
 80024bc:	20a5      	movs	r0, #165	@ 0xa5
 80024be:	f7ff fc7f 	bl	8001dc0 <LCD_DisplayChar>

}
 80024c2:	bf00      	nop
 80024c4:	3760      	adds	r7, #96	@ 0x60
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000004 	.word	0x20000004
 80024d0:	080080c8 	.word	0x080080c8
 80024d4:	080080d0 	.word	0x080080d0
 80024d8:	080080d8 	.word	0x080080d8
 80024dc:	080080dc 	.word	0x080080dc
 80024e0:	080080e4 	.word	0x080080e4

080024e4 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80024e8:	f000 f9fe 	bl	80028e8 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 80024ec:	20ca      	movs	r0, #202	@ 0xca
 80024ee:	f000 f943 	bl	8002778 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 80024f2:	20c3      	movs	r0, #195	@ 0xc3
 80024f4:	f000 f94d 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 80024f8:	2008      	movs	r0, #8
 80024fa:	f000 f94a 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 80024fe:	2050      	movs	r0, #80	@ 0x50
 8002500:	f000 f947 	bl	8002792 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8002504:	20cf      	movs	r0, #207	@ 0xcf
 8002506:	f000 f937 	bl	8002778 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 800250a:	2000      	movs	r0, #0
 800250c:	f000 f941 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8002510:	20c1      	movs	r0, #193	@ 0xc1
 8002512:	f000 f93e 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8002516:	2030      	movs	r0, #48	@ 0x30
 8002518:	f000 f93b 	bl	8002792 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 800251c:	20ed      	movs	r0, #237	@ 0xed
 800251e:	f000 f92b 	bl	8002778 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8002522:	2064      	movs	r0, #100	@ 0x64
 8002524:	f000 f935 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8002528:	2003      	movs	r0, #3
 800252a:	f000 f932 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 800252e:	2012      	movs	r0, #18
 8002530:	f000 f92f 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8002534:	2081      	movs	r0, #129	@ 0x81
 8002536:	f000 f92c 	bl	8002792 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 800253a:	20e8      	movs	r0, #232	@ 0xe8
 800253c:	f000 f91c 	bl	8002778 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8002540:	2085      	movs	r0, #133	@ 0x85
 8002542:	f000 f926 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002546:	2000      	movs	r0, #0
 8002548:	f000 f923 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 800254c:	2078      	movs	r0, #120	@ 0x78
 800254e:	f000 f920 	bl	8002792 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8002552:	20cb      	movs	r0, #203	@ 0xcb
 8002554:	f000 f910 	bl	8002778 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8002558:	2039      	movs	r0, #57	@ 0x39
 800255a:	f000 f91a 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 800255e:	202c      	movs	r0, #44	@ 0x2c
 8002560:	f000 f917 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002564:	2000      	movs	r0, #0
 8002566:	f000 f914 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 800256a:	2034      	movs	r0, #52	@ 0x34
 800256c:	f000 f911 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8002570:	2002      	movs	r0, #2
 8002572:	f000 f90e 	bl	8002792 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8002576:	20f7      	movs	r0, #247	@ 0xf7
 8002578:	f000 f8fe 	bl	8002778 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 800257c:	2020      	movs	r0, #32
 800257e:	f000 f908 	bl	8002792 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8002582:	20ea      	movs	r0, #234	@ 0xea
 8002584:	f000 f8f8 	bl	8002778 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002588:	2000      	movs	r0, #0
 800258a:	f000 f902 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800258e:	2000      	movs	r0, #0
 8002590:	f000 f8ff 	bl	8002792 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8002594:	20b1      	movs	r0, #177	@ 0xb1
 8002596:	f000 f8ef 	bl	8002778 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800259a:	2000      	movs	r0, #0
 800259c:	f000 f8f9 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80025a0:	201b      	movs	r0, #27
 80025a2:	f000 f8f6 	bl	8002792 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80025a6:	20b6      	movs	r0, #182	@ 0xb6
 80025a8:	f000 f8e6 	bl	8002778 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80025ac:	200a      	movs	r0, #10
 80025ae:	f000 f8f0 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 80025b2:	20a2      	movs	r0, #162	@ 0xa2
 80025b4:	f000 f8ed 	bl	8002792 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 80025b8:	20c0      	movs	r0, #192	@ 0xc0
 80025ba:	f000 f8dd 	bl	8002778 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80025be:	2010      	movs	r0, #16
 80025c0:	f000 f8e7 	bl	8002792 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 80025c4:	20c1      	movs	r0, #193	@ 0xc1
 80025c6:	f000 f8d7 	bl	8002778 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80025ca:	2010      	movs	r0, #16
 80025cc:	f000 f8e1 	bl	8002792 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 80025d0:	20c5      	movs	r0, #197	@ 0xc5
 80025d2:	f000 f8d1 	bl	8002778 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 80025d6:	2045      	movs	r0, #69	@ 0x45
 80025d8:	f000 f8db 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 80025dc:	2015      	movs	r0, #21
 80025de:	f000 f8d8 	bl	8002792 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 80025e2:	20c7      	movs	r0, #199	@ 0xc7
 80025e4:	f000 f8c8 	bl	8002778 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 80025e8:	2090      	movs	r0, #144	@ 0x90
 80025ea:	f000 f8d2 	bl	8002792 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 80025ee:	2036      	movs	r0, #54	@ 0x36
 80025f0:	f000 f8c2 	bl	8002778 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 80025f4:	20c8      	movs	r0, #200	@ 0xc8
 80025f6:	f000 f8cc 	bl	8002792 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 80025fa:	20f2      	movs	r0, #242	@ 0xf2
 80025fc:	f000 f8bc 	bl	8002778 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002600:	2000      	movs	r0, #0
 8002602:	f000 f8c6 	bl	8002792 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8002606:	20b0      	movs	r0, #176	@ 0xb0
 8002608:	f000 f8b6 	bl	8002778 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 800260c:	20c2      	movs	r0, #194	@ 0xc2
 800260e:	f000 f8c0 	bl	8002792 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8002612:	20b6      	movs	r0, #182	@ 0xb6
 8002614:	f000 f8b0 	bl	8002778 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8002618:	200a      	movs	r0, #10
 800261a:	f000 f8ba 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 800261e:	20a7      	movs	r0, #167	@ 0xa7
 8002620:	f000 f8b7 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8002624:	2027      	movs	r0, #39	@ 0x27
 8002626:	f000 f8b4 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800262a:	2004      	movs	r0, #4
 800262c:	f000 f8b1 	bl	8002792 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8002630:	202a      	movs	r0, #42	@ 0x2a
 8002632:	f000 f8a1 	bl	8002778 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002636:	2000      	movs	r0, #0
 8002638:	f000 f8ab 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800263c:	2000      	movs	r0, #0
 800263e:	f000 f8a8 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002642:	2000      	movs	r0, #0
 8002644:	f000 f8a5 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8002648:	20ef      	movs	r0, #239	@ 0xef
 800264a:	f000 f8a2 	bl	8002792 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 800264e:	202b      	movs	r0, #43	@ 0x2b
 8002650:	f000 f892 	bl	8002778 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002654:	2000      	movs	r0, #0
 8002656:	f000 f89c 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800265a:	2000      	movs	r0, #0
 800265c:	f000 f899 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8002660:	2001      	movs	r0, #1
 8002662:	f000 f896 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8002666:	203f      	movs	r0, #63	@ 0x3f
 8002668:	f000 f893 	bl	8002792 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 800266c:	20f6      	movs	r0, #246	@ 0xf6
 800266e:	f000 f883 	bl	8002778 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8002672:	2001      	movs	r0, #1
 8002674:	f000 f88d 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002678:	2000      	movs	r0, #0
 800267a:	f000 f88a 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 800267e:	2006      	movs	r0, #6
 8002680:	f000 f887 	bl	8002792 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8002684:	202c      	movs	r0, #44	@ 0x2c
 8002686:	f000 f877 	bl	8002778 <ili9341_Write_Reg>
  LCD_Delay(200);
 800268a:	20c8      	movs	r0, #200	@ 0xc8
 800268c:	f000 f9e8 	bl	8002a60 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8002690:	2026      	movs	r0, #38	@ 0x26
 8002692:	f000 f871 	bl	8002778 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8002696:	2001      	movs	r0, #1
 8002698:	f000 f87b 	bl	8002792 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 800269c:	20e0      	movs	r0, #224	@ 0xe0
 800269e:	f000 f86b 	bl	8002778 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 80026a2:	200f      	movs	r0, #15
 80026a4:	f000 f875 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 80026a8:	2029      	movs	r0, #41	@ 0x29
 80026aa:	f000 f872 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 80026ae:	2024      	movs	r0, #36	@ 0x24
 80026b0:	f000 f86f 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80026b4:	200c      	movs	r0, #12
 80026b6:	f000 f86c 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80026ba:	200e      	movs	r0, #14
 80026bc:	f000 f869 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80026c0:	2009      	movs	r0, #9
 80026c2:	f000 f866 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 80026c6:	204e      	movs	r0, #78	@ 0x4e
 80026c8:	f000 f863 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80026cc:	2078      	movs	r0, #120	@ 0x78
 80026ce:	f000 f860 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80026d2:	203c      	movs	r0, #60	@ 0x3c
 80026d4:	f000 f85d 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80026d8:	2009      	movs	r0, #9
 80026da:	f000 f85a 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 80026de:	2013      	movs	r0, #19
 80026e0:	f000 f857 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80026e4:	2005      	movs	r0, #5
 80026e6:	f000 f854 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 80026ea:	2017      	movs	r0, #23
 80026ec:	f000 f851 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80026f0:	2011      	movs	r0, #17
 80026f2:	f000 f84e 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80026f6:	2000      	movs	r0, #0
 80026f8:	f000 f84b 	bl	8002792 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 80026fc:	20e1      	movs	r0, #225	@ 0xe1
 80026fe:	f000 f83b 	bl	8002778 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002702:	2000      	movs	r0, #0
 8002704:	f000 f845 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8002708:	2016      	movs	r0, #22
 800270a:	f000 f842 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 800270e:	201b      	movs	r0, #27
 8002710:	f000 f83f 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8002714:	2004      	movs	r0, #4
 8002716:	f000 f83c 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800271a:	2011      	movs	r0, #17
 800271c:	f000 f839 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8002720:	2007      	movs	r0, #7
 8002722:	f000 f836 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8002726:	2031      	movs	r0, #49	@ 0x31
 8002728:	f000 f833 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 800272c:	2033      	movs	r0, #51	@ 0x33
 800272e:	f000 f830 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8002732:	2042      	movs	r0, #66	@ 0x42
 8002734:	f000 f82d 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8002738:	2005      	movs	r0, #5
 800273a:	f000 f82a 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800273e:	200c      	movs	r0, #12
 8002740:	f000 f827 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8002744:	200a      	movs	r0, #10
 8002746:	f000 f824 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 800274a:	2028      	movs	r0, #40	@ 0x28
 800274c:	f000 f821 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8002750:	202f      	movs	r0, #47	@ 0x2f
 8002752:	f000 f81e 	bl	8002792 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8002756:	200f      	movs	r0, #15
 8002758:	f000 f81b 	bl	8002792 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 800275c:	2011      	movs	r0, #17
 800275e:	f000 f80b 	bl	8002778 <ili9341_Write_Reg>
  LCD_Delay(200);
 8002762:	20c8      	movs	r0, #200	@ 0xc8
 8002764:	f000 f97c 	bl	8002a60 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8002768:	2029      	movs	r0, #41	@ 0x29
 800276a:	f000 f805 	bl	8002778 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 800276e:	202c      	movs	r0, #44	@ 0x2c
 8002770:	f000 f802 	bl	8002778 <ili9341_Write_Reg>
}
 8002774:	bf00      	nop
 8002776:	bd80      	pop	{r7, pc}

08002778 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	4618      	mov	r0, r3
 8002786:	f000 f949 	bl	8002a1c <LCD_IO_WriteReg>
}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b082      	sub	sp, #8
 8002796:	af00      	add	r7, sp, #0
 8002798:	4603      	mov	r3, r0
 800279a:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800279c:	88fb      	ldrh	r3, [r7, #6]
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 f91a 	bl	80029d8 <LCD_IO_WriteData>
}
 80027a4:	bf00      	nop
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80027b0:	4819      	ldr	r0, [pc, #100]	@ (8002818 <SPI_Init+0x6c>)
 80027b2:	f004 fc0a 	bl	8006fca <HAL_SPI_GetState>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d12b      	bne.n	8002814 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80027bc:	4b16      	ldr	r3, [pc, #88]	@ (8002818 <SPI_Init+0x6c>)
 80027be:	4a17      	ldr	r2, [pc, #92]	@ (800281c <SPI_Init+0x70>)
 80027c0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80027c2:	4b15      	ldr	r3, [pc, #84]	@ (8002818 <SPI_Init+0x6c>)
 80027c4:	2218      	movs	r2, #24
 80027c6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80027c8:	4b13      	ldr	r3, [pc, #76]	@ (8002818 <SPI_Init+0x6c>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80027ce:	4b12      	ldr	r3, [pc, #72]	@ (8002818 <SPI_Init+0x6c>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80027d4:	4b10      	ldr	r3, [pc, #64]	@ (8002818 <SPI_Init+0x6c>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80027da:	4b0f      	ldr	r3, [pc, #60]	@ (8002818 <SPI_Init+0x6c>)
 80027dc:	2200      	movs	r2, #0
 80027de:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80027e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002818 <SPI_Init+0x6c>)
 80027e2:	2207      	movs	r2, #7
 80027e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80027e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002818 <SPI_Init+0x6c>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80027ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002818 <SPI_Init+0x6c>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80027f2:	4b09      	ldr	r3, [pc, #36]	@ (8002818 <SPI_Init+0x6c>)
 80027f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027f8:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80027fa:	4b07      	ldr	r3, [pc, #28]	@ (8002818 <SPI_Init+0x6c>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002800:	4b05      	ldr	r3, [pc, #20]	@ (8002818 <SPI_Init+0x6c>)
 8002802:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002806:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8002808:	4803      	ldr	r0, [pc, #12]	@ (8002818 <SPI_Init+0x6c>)
 800280a:	f000 f833 	bl	8002874 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800280e:	4802      	ldr	r0, [pc, #8]	@ (8002818 <SPI_Init+0x6c>)
 8002810:	f004 f9e6 	bl	8006be0 <HAL_SPI_Init>
  }
}
 8002814:	bf00      	nop
 8002816:	bd80      	pop	{r7, pc}
 8002818:	200259b0 	.word	0x200259b0
 800281c:	40015000 	.word	0x40015000

08002820 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 800282e:	4b09      	ldr	r3, [pc, #36]	@ (8002854 <SPI_Write+0x34>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	1db9      	adds	r1, r7, #6
 8002834:	2201      	movs	r2, #1
 8002836:	4808      	ldr	r0, [pc, #32]	@ (8002858 <SPI_Write+0x38>)
 8002838:	f004 fa83 	bl	8006d42 <HAL_SPI_Transmit>
 800283c:	4603      	mov	r3, r0
 800283e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8002846:	f000 f809 	bl	800285c <SPI_Error>
  }
}
 800284a:	bf00      	nop
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	2000000c 	.word	0x2000000c
 8002858:	200259b0 	.word	0x200259b0

0800285c <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002860:	4803      	ldr	r0, [pc, #12]	@ (8002870 <SPI_Error+0x14>)
 8002862:	f004 fa46 	bl	8006cf2 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8002866:	f7ff ffa1 	bl	80027ac <SPI_Init>
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	200259b0 	.word	0x200259b0

08002874 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08a      	sub	sp, #40	@ 0x28
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 800287c:	2300      	movs	r3, #0
 800287e:	613b      	str	r3, [r7, #16]
 8002880:	4b17      	ldr	r3, [pc, #92]	@ (80028e0 <SPI_MspInit+0x6c>)
 8002882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002884:	4a16      	ldr	r2, [pc, #88]	@ (80028e0 <SPI_MspInit+0x6c>)
 8002886:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800288a:	6453      	str	r3, [r2, #68]	@ 0x44
 800288c:	4b14      	ldr	r3, [pc, #80]	@ (80028e0 <SPI_MspInit+0x6c>)
 800288e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002890:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8002898:	2300      	movs	r3, #0
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	4b10      	ldr	r3, [pc, #64]	@ (80028e0 <SPI_MspInit+0x6c>)
 800289e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a0:	4a0f      	ldr	r2, [pc, #60]	@ (80028e0 <SPI_MspInit+0x6c>)
 80028a2:	f043 0320 	orr.w	r3, r3, #32
 80028a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80028a8:	4b0d      	ldr	r3, [pc, #52]	@ (80028e0 <SPI_MspInit+0x6c>)
 80028aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ac:	f003 0320 	and.w	r3, r3, #32
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80028b4:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80028b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80028ba:	2302      	movs	r3, #2
 80028bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80028be:	2302      	movs	r3, #2
 80028c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80028c2:	2301      	movs	r3, #1
 80028c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80028c6:	2305      	movs	r3, #5
 80028c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80028ca:	f107 0314 	add.w	r3, r7, #20
 80028ce:	4619      	mov	r1, r3
 80028d0:	4804      	ldr	r0, [pc, #16]	@ (80028e4 <SPI_MspInit+0x70>)
 80028d2:	f001 fc91 	bl	80041f8 <HAL_GPIO_Init>
}
 80028d6:	bf00      	nop
 80028d8:	3728      	adds	r7, #40	@ 0x28
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40023800 	.word	0x40023800
 80028e4:	40021400 	.word	0x40021400

080028e8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b088      	sub	sp, #32
 80028ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 80028ee:	4b36      	ldr	r3, [pc, #216]	@ (80029c8 <LCD_IO_Init+0xe0>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d164      	bne.n	80029c0 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80028f6:	4b34      	ldr	r3, [pc, #208]	@ (80029c8 <LCD_IO_Init+0xe0>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80028fc:	2300      	movs	r3, #0
 80028fe:	60bb      	str	r3, [r7, #8]
 8002900:	4b32      	ldr	r3, [pc, #200]	@ (80029cc <LCD_IO_Init+0xe4>)
 8002902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002904:	4a31      	ldr	r2, [pc, #196]	@ (80029cc <LCD_IO_Init+0xe4>)
 8002906:	f043 0308 	orr.w	r3, r3, #8
 800290a:	6313      	str	r3, [r2, #48]	@ 0x30
 800290c:	4b2f      	ldr	r3, [pc, #188]	@ (80029cc <LCD_IO_Init+0xe4>)
 800290e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002910:	f003 0308 	and.w	r3, r3, #8
 8002914:	60bb      	str	r3, [r7, #8]
 8002916:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002918:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800291c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800291e:	2301      	movs	r3, #1
 8002920:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002922:	2300      	movs	r3, #0
 8002924:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002926:	2302      	movs	r3, #2
 8002928:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800292a:	f107 030c 	add.w	r3, r7, #12
 800292e:	4619      	mov	r1, r3
 8002930:	4827      	ldr	r0, [pc, #156]	@ (80029d0 <LCD_IO_Init+0xe8>)
 8002932:	f001 fc61 	bl	80041f8 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	607b      	str	r3, [r7, #4]
 800293a:	4b24      	ldr	r3, [pc, #144]	@ (80029cc <LCD_IO_Init+0xe4>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293e:	4a23      	ldr	r2, [pc, #140]	@ (80029cc <LCD_IO_Init+0xe4>)
 8002940:	f043 0308 	orr.w	r3, r3, #8
 8002944:	6313      	str	r3, [r2, #48]	@ 0x30
 8002946:	4b21      	ldr	r3, [pc, #132]	@ (80029cc <LCD_IO_Init+0xe4>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	607b      	str	r3, [r7, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002952:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002956:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002958:	2301      	movs	r3, #1
 800295a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002960:	2302      	movs	r3, #2
 8002962:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002964:	f107 030c 	add.w	r3, r7, #12
 8002968:	4619      	mov	r1, r3
 800296a:	4819      	ldr	r0, [pc, #100]	@ (80029d0 <LCD_IO_Init+0xe8>)
 800296c:	f001 fc44 	bl	80041f8 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002970:	2300      	movs	r3, #0
 8002972:	603b      	str	r3, [r7, #0]
 8002974:	4b15      	ldr	r3, [pc, #84]	@ (80029cc <LCD_IO_Init+0xe4>)
 8002976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002978:	4a14      	ldr	r2, [pc, #80]	@ (80029cc <LCD_IO_Init+0xe4>)
 800297a:	f043 0304 	orr.w	r3, r3, #4
 800297e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002980:	4b12      	ldr	r3, [pc, #72]	@ (80029cc <LCD_IO_Init+0xe4>)
 8002982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	603b      	str	r3, [r7, #0]
 800298a:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800298c:	2304      	movs	r3, #4
 800298e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002990:	2301      	movs	r3, #1
 8002992:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002998:	2302      	movs	r3, #2
 800299a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800299c:	f107 030c 	add.w	r3, r7, #12
 80029a0:	4619      	mov	r1, r3
 80029a2:	480c      	ldr	r0, [pc, #48]	@ (80029d4 <LCD_IO_Init+0xec>)
 80029a4:	f001 fc28 	bl	80041f8 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80029a8:	2200      	movs	r2, #0
 80029aa:	2104      	movs	r1, #4
 80029ac:	4809      	ldr	r0, [pc, #36]	@ (80029d4 <LCD_IO_Init+0xec>)
 80029ae:	f001 fedb 	bl	8004768 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80029b2:	2201      	movs	r2, #1
 80029b4:	2104      	movs	r1, #4
 80029b6:	4807      	ldr	r0, [pc, #28]	@ (80029d4 <LCD_IO_Init+0xec>)
 80029b8:	f001 fed6 	bl	8004768 <HAL_GPIO_WritePin>

    SPI_Init();
 80029bc:	f7ff fef6 	bl	80027ac <SPI_Init>
  }
}
 80029c0:	bf00      	nop
 80029c2:	3720      	adds	r7, #32
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20025a08 	.word	0x20025a08
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40020c00 	.word	0x40020c00
 80029d4:	40020800 	.word	0x40020800

080029d8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80029e2:	2201      	movs	r2, #1
 80029e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80029e8:	480a      	ldr	r0, [pc, #40]	@ (8002a14 <LCD_IO_WriteData+0x3c>)
 80029ea:	f001 febd 	bl	8004768 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80029ee:	2200      	movs	r2, #0
 80029f0:	2104      	movs	r1, #4
 80029f2:	4809      	ldr	r0, [pc, #36]	@ (8002a18 <LCD_IO_WriteData+0x40>)
 80029f4:	f001 feb8 	bl	8004768 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 80029f8:	88fb      	ldrh	r3, [r7, #6]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff ff10 	bl	8002820 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002a00:	2201      	movs	r2, #1
 8002a02:	2104      	movs	r1, #4
 8002a04:	4804      	ldr	r0, [pc, #16]	@ (8002a18 <LCD_IO_WriteData+0x40>)
 8002a06:	f001 feaf 	bl	8004768 <HAL_GPIO_WritePin>
}
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40020c00 	.word	0x40020c00
 8002a18:	40020800 	.word	0x40020800

08002a1c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	4603      	mov	r3, r0
 8002a24:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002a26:	2200      	movs	r2, #0
 8002a28:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a2c:	480a      	ldr	r0, [pc, #40]	@ (8002a58 <LCD_IO_WriteReg+0x3c>)
 8002a2e:	f001 fe9b 	bl	8004768 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002a32:	2200      	movs	r2, #0
 8002a34:	2104      	movs	r1, #4
 8002a36:	4809      	ldr	r0, [pc, #36]	@ (8002a5c <LCD_IO_WriteReg+0x40>)
 8002a38:	f001 fe96 	bl	8004768 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8002a3c:	79fb      	ldrb	r3, [r7, #7]
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff feed 	bl	8002820 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002a46:	2201      	movs	r2, #1
 8002a48:	2104      	movs	r1, #4
 8002a4a:	4804      	ldr	r0, [pc, #16]	@ (8002a5c <LCD_IO_WriteReg+0x40>)
 8002a4c:	f001 fe8c 	bl	8004768 <HAL_GPIO_WritePin>
}
 8002a50:	bf00      	nop
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40020c00 	.word	0x40020c00
 8002a5c:	40020800 	.word	0x40020800

08002a60 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f001 fa8f 	bl	8003f8c <HAL_Delay>
}
 8002a6e:	bf00      	nop
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a7a:	f001 fa15 	bl	8003ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a7e:	f000 f819 	bl	8002ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a82:	f000 fa09 	bl	8002e98 <MX_GPIO_Init>
  MX_LTDC_Init();
 8002a86:	f000 f8bf 	bl	8002c08 <MX_LTDC_Init>
  MX_RNG_Init();
 8002a8a:	f000 f96f 	bl	8002d6c <MX_RNG_Init>
  MX_TIM2_Init();
 8002a8e:	f000 f9b7 	bl	8002e00 <MX_TIM2_Init>
  MX_SPI5_Init();
 8002a92:	f000 f97f 	bl	8002d94 <MX_SPI5_Init>
  MX_I2C3_Init();
 8002a96:	f000 f877 	bl	8002b88 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 8002a9a:	f7fe f877 	bl	8000b8c <ApplicationInit>
//  LCD_Visual_Demo();
  HAL_Delay(5000);
 8002a9e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002aa2:	f001 fa73 	bl	8003f8c <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  gameInit();
 8002aa6:	f7fe f9d3 	bl	8000e50 <gameInit>
	  Run_Game();
 8002aaa:	f7fe f8cd 	bl	8000c48 <Run_Game>
	  gameInit();
 8002aae:	bf00      	nop
 8002ab0:	e7f9      	b.n	8002aa6 <main+0x30>
	...

08002ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b094      	sub	sp, #80	@ 0x50
 8002ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002aba:	f107 0320 	add.w	r3, r7, #32
 8002abe:	2230      	movs	r2, #48	@ 0x30
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f004 fe64 	bl	8007790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ac8:	f107 030c 	add.w	r3, r7, #12
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	605a      	str	r2, [r3, #4]
 8002ad2:	609a      	str	r2, [r3, #8]
 8002ad4:	60da      	str	r2, [r3, #12]
 8002ad6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60bb      	str	r3, [r7, #8]
 8002adc:	4b28      	ldr	r3, [pc, #160]	@ (8002b80 <SystemClock_Config+0xcc>)
 8002ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae0:	4a27      	ldr	r2, [pc, #156]	@ (8002b80 <SystemClock_Config+0xcc>)
 8002ae2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ae6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ae8:	4b25      	ldr	r3, [pc, #148]	@ (8002b80 <SystemClock_Config+0xcc>)
 8002aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002af4:	2300      	movs	r3, #0
 8002af6:	607b      	str	r3, [r7, #4]
 8002af8:	4b22      	ldr	r3, [pc, #136]	@ (8002b84 <SystemClock_Config+0xd0>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a21      	ldr	r2, [pc, #132]	@ (8002b84 <SystemClock_Config+0xd0>)
 8002afe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b02:	6013      	str	r3, [r2, #0]
 8002b04:	4b1f      	ldr	r3, [pc, #124]	@ (8002b84 <SystemClock_Config+0xd0>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002b0c:	607b      	str	r3, [r7, #4]
 8002b0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b10:	2301      	movs	r3, #1
 8002b12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b18:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b1e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002b24:	2308      	movs	r3, #8
 8002b26:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002b28:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002b2c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b2e:	2302      	movs	r3, #2
 8002b30:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002b32:	2307      	movs	r3, #7
 8002b34:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b36:	f107 0320 	add.w	r3, r7, #32
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f003 f98c 	bl	8005e58 <HAL_RCC_OscConfig>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002b46:	f000 fb55 	bl	80031f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b4a:	230f      	movs	r3, #15
 8002b4c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002b56:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002b5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002b5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b60:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002b62:	f107 030c 	add.w	r3, r7, #12
 8002b66:	2105      	movs	r1, #5
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f003 fbed 	bl	8006348 <HAL_RCC_ClockConfig>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002b74:	f000 fb3e 	bl	80031f4 <Error_Handler>
  }
}
 8002b78:	bf00      	nop
 8002b7a:	3750      	adds	r7, #80	@ 0x50
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40007000 	.word	0x40007000

08002b88 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bfc <MX_I2C3_Init+0x74>)
 8002b8e:	4a1c      	ldr	r2, [pc, #112]	@ (8002c00 <MX_I2C3_Init+0x78>)
 8002b90:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002b92:	4b1a      	ldr	r3, [pc, #104]	@ (8002bfc <MX_I2C3_Init+0x74>)
 8002b94:	4a1b      	ldr	r2, [pc, #108]	@ (8002c04 <MX_I2C3_Init+0x7c>)
 8002b96:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b98:	4b18      	ldr	r3, [pc, #96]	@ (8002bfc <MX_I2C3_Init+0x74>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002b9e:	4b17      	ldr	r3, [pc, #92]	@ (8002bfc <MX_I2C3_Init+0x74>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ba4:	4b15      	ldr	r3, [pc, #84]	@ (8002bfc <MX_I2C3_Init+0x74>)
 8002ba6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002baa:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bac:	4b13      	ldr	r3, [pc, #76]	@ (8002bfc <MX_I2C3_Init+0x74>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002bb2:	4b12      	ldr	r3, [pc, #72]	@ (8002bfc <MX_I2C3_Init+0x74>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bb8:	4b10      	ldr	r3, [pc, #64]	@ (8002bfc <MX_I2C3_Init+0x74>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8002bfc <MX_I2C3_Init+0x74>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002bc4:	480d      	ldr	r0, [pc, #52]	@ (8002bfc <MX_I2C3_Init+0x74>)
 8002bc6:	f001 fe01 	bl	80047cc <HAL_I2C_Init>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002bd0:	f000 fb10 	bl	80031f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	4809      	ldr	r0, [pc, #36]	@ (8002bfc <MX_I2C3_Init+0x74>)
 8002bd8:	f002 fe1c 	bl	8005814 <HAL_I2CEx_ConfigAnalogFilter>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8002be2:	f000 fb07 	bl	80031f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002be6:	2100      	movs	r1, #0
 8002be8:	4804      	ldr	r0, [pc, #16]	@ (8002bfc <MX_I2C3_Init+0x74>)
 8002bea:	f002 fe4f 	bl	800588c <HAL_I2CEx_ConfigDigitalFilter>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002bf4:	f000 fafe 	bl	80031f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002bf8:	bf00      	nop
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20025a0c 	.word	0x20025a0c
 8002c00:	40005c00 	.word	0x40005c00
 8002c04:	000186a0 	.word	0x000186a0

08002c08 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b09a      	sub	sp, #104	@ 0x68
 8002c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002c0e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002c12:	2234      	movs	r2, #52	@ 0x34
 8002c14:	2100      	movs	r1, #0
 8002c16:	4618      	mov	r0, r3
 8002c18:	f004 fdba 	bl	8007790 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8002c1c:	463b      	mov	r3, r7
 8002c1e:	2234      	movs	r2, #52	@ 0x34
 8002c20:	2100      	movs	r1, #0
 8002c22:	4618      	mov	r0, r3
 8002c24:	f004 fdb4 	bl	8007790 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002c28:	4b4e      	ldr	r3, [pc, #312]	@ (8002d64 <MX_LTDC_Init+0x15c>)
 8002c2a:	4a4f      	ldr	r2, [pc, #316]	@ (8002d68 <MX_LTDC_Init+0x160>)
 8002c2c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002c2e:	4b4d      	ldr	r3, [pc, #308]	@ (8002d64 <MX_LTDC_Init+0x15c>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002c34:	4b4b      	ldr	r3, [pc, #300]	@ (8002d64 <MX_LTDC_Init+0x15c>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002c3a:	4b4a      	ldr	r3, [pc, #296]	@ (8002d64 <MX_LTDC_Init+0x15c>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002c40:	4b48      	ldr	r3, [pc, #288]	@ (8002d64 <MX_LTDC_Init+0x15c>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8002c46:	4b47      	ldr	r3, [pc, #284]	@ (8002d64 <MX_LTDC_Init+0x15c>)
 8002c48:	2207      	movs	r2, #7
 8002c4a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8002c4c:	4b45      	ldr	r3, [pc, #276]	@ (8002d64 <MX_LTDC_Init+0x15c>)
 8002c4e:	2203      	movs	r2, #3
 8002c50:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8002c52:	4b44      	ldr	r3, [pc, #272]	@ (8002d64 <MX_LTDC_Init+0x15c>)
 8002c54:	220e      	movs	r2, #14
 8002c56:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8002c58:	4b42      	ldr	r3, [pc, #264]	@ (8002d64 <MX_LTDC_Init+0x15c>)
 8002c5a:	2205      	movs	r2, #5
 8002c5c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8002c5e:	4b41      	ldr	r3, [pc, #260]	@ (8002d64 <MX_LTDC_Init+0x15c>)
 8002c60:	f240 228e 	movw	r2, #654	@ 0x28e
 8002c64:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8002c66:	4b3f      	ldr	r3, [pc, #252]	@ (8002d64 <MX_LTDC_Init+0x15c>)
 8002c68:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8002c6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8002c6e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d64 <MX_LTDC_Init+0x15c>)
 8002c70:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8002c74:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8002c76:	4b3b      	ldr	r3, [pc, #236]	@ (8002d64 <MX_LTDC_Init+0x15c>)
 8002c78:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8002c7c:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002c7e:	4b39      	ldr	r3, [pc, #228]	@ (8002d64 <MX_LTDC_Init+0x15c>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002c86:	4b37      	ldr	r3, [pc, #220]	@ (8002d64 <MX_LTDC_Init+0x15c>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002c8e:	4b35      	ldr	r3, [pc, #212]	@ (8002d64 <MX_LTDC_Init+0x15c>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002c96:	4833      	ldr	r0, [pc, #204]	@ (8002d64 <MX_LTDC_Init+0x15c>)
 8002c98:	f002 fe38 	bl	800590c <HAL_LTDC_Init>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8002ca2:	f000 faa7 	bl	80031f4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002cc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002cc6:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002cc8:	2305      	movs	r3, #5
 8002cca:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002cea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002cee:	2200      	movs	r2, #0
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	481c      	ldr	r0, [pc, #112]	@ (8002d64 <MX_LTDC_Init+0x15c>)
 8002cf4:	f002 feda 	bl	8005aac <HAL_LTDC_ConfigLayer>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8002cfe:	f000 fa79 	bl	80031f4 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8002d02:	2300      	movs	r3, #0
 8002d04:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002d12:	2300      	movs	r3, #0
 8002d14:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8002d16:	2300      	movs	r3, #0
 8002d18:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002d1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d22:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002d24:	2305      	movs	r3, #5
 8002d26:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8002d30:	2300      	movs	r3, #0
 8002d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8002d34:	2300      	movs	r3, #0
 8002d36:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8002d40:	2300      	movs	r3, #0
 8002d42:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8002d46:	463b      	mov	r3, r7
 8002d48:	2201      	movs	r2, #1
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4805      	ldr	r0, [pc, #20]	@ (8002d64 <MX_LTDC_Init+0x15c>)
 8002d4e:	f002 fead 	bl	8005aac <HAL_LTDC_ConfigLayer>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8002d58:	f000 fa4c 	bl	80031f4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002d5c:	bf00      	nop
 8002d5e:	3768      	adds	r7, #104	@ 0x68
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	20025a60 	.word	0x20025a60
 8002d68:	40016800 	.word	0x40016800

08002d6c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002d70:	4b06      	ldr	r3, [pc, #24]	@ (8002d8c <MX_RNG_Init+0x20>)
 8002d72:	4a07      	ldr	r2, [pc, #28]	@ (8002d90 <MX_RNG_Init+0x24>)
 8002d74:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002d76:	4805      	ldr	r0, [pc, #20]	@ (8002d8c <MX_RNG_Init+0x20>)
 8002d78:	f003 feb2 	bl	8006ae0 <HAL_RNG_Init>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8002d82:	f000 fa37 	bl	80031f4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002d86:	bf00      	nop
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20025b08 	.word	0x20025b08
 8002d90:	50060800 	.word	0x50060800

08002d94 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002d98:	4b17      	ldr	r3, [pc, #92]	@ (8002df8 <MX_SPI5_Init+0x64>)
 8002d9a:	4a18      	ldr	r2, [pc, #96]	@ (8002dfc <MX_SPI5_Init+0x68>)
 8002d9c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002d9e:	4b16      	ldr	r3, [pc, #88]	@ (8002df8 <MX_SPI5_Init+0x64>)
 8002da0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002da4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002da6:	4b14      	ldr	r3, [pc, #80]	@ (8002df8 <MX_SPI5_Init+0x64>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002dac:	4b12      	ldr	r3, [pc, #72]	@ (8002df8 <MX_SPI5_Init+0x64>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002db2:	4b11      	ldr	r3, [pc, #68]	@ (8002df8 <MX_SPI5_Init+0x64>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002db8:	4b0f      	ldr	r3, [pc, #60]	@ (8002df8 <MX_SPI5_Init+0x64>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8002df8 <MX_SPI5_Init+0x64>)
 8002dc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dc4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8002df8 <MX_SPI5_Init+0x64>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8002df8 <MX_SPI5_Init+0x64>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002dd2:	4b09      	ldr	r3, [pc, #36]	@ (8002df8 <MX_SPI5_Init+0x64>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dd8:	4b07      	ldr	r3, [pc, #28]	@ (8002df8 <MX_SPI5_Init+0x64>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002dde:	4b06      	ldr	r3, [pc, #24]	@ (8002df8 <MX_SPI5_Init+0x64>)
 8002de0:	220a      	movs	r2, #10
 8002de2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002de4:	4804      	ldr	r0, [pc, #16]	@ (8002df8 <MX_SPI5_Init+0x64>)
 8002de6:	f003 fefb 	bl	8006be0 <HAL_SPI_Init>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002df0:	f000 fa00 	bl	80031f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002df4:	bf00      	nop
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	20025b18 	.word	0x20025b18
 8002dfc:	40015000 	.word	0x40015000

08002e00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e06:	f107 0308 	add.w	r3, r7, #8
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	605a      	str	r2, [r3, #4]
 8002e10:	609a      	str	r2, [r3, #8]
 8002e12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e14:	463b      	mov	r3, r7
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002e94 <MX_TIM2_Init+0x94>)
 8002e1e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002e22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002e24:	4b1b      	ldr	r3, [pc, #108]	@ (8002e94 <MX_TIM2_Init+0x94>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002e94 <MX_TIM2_Init+0x94>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002e30:	4b18      	ldr	r3, [pc, #96]	@ (8002e94 <MX_TIM2_Init+0x94>)
 8002e32:	f04f 32ff 	mov.w	r2, #4294967295
 8002e36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e38:	4b16      	ldr	r3, [pc, #88]	@ (8002e94 <MX_TIM2_Init+0x94>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e3e:	4b15      	ldr	r3, [pc, #84]	@ (8002e94 <MX_TIM2_Init+0x94>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e44:	4813      	ldr	r0, [pc, #76]	@ (8002e94 <MX_TIM2_Init+0x94>)
 8002e46:	f004 f9ab 	bl	80071a0 <HAL_TIM_Base_Init>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002e50:	f000 f9d0 	bl	80031f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e5a:	f107 0308 	add.w	r3, r7, #8
 8002e5e:	4619      	mov	r1, r3
 8002e60:	480c      	ldr	r0, [pc, #48]	@ (8002e94 <MX_TIM2_Init+0x94>)
 8002e62:	f004 f9ec 	bl	800723e <HAL_TIM_ConfigClockSource>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002e6c:	f000 f9c2 	bl	80031f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e70:	2300      	movs	r3, #0
 8002e72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e74:	2300      	movs	r3, #0
 8002e76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e78:	463b      	mov	r3, r7
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4805      	ldr	r0, [pc, #20]	@ (8002e94 <MX_TIM2_Init+0x94>)
 8002e7e:	f004 fbeb 	bl	8007658 <HAL_TIMEx_MasterConfigSynchronization>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002e88:	f000 f9b4 	bl	80031f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e8c:	bf00      	nop
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	20025b70 	.word	0x20025b70

08002e98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08e      	sub	sp, #56	@ 0x38
 8002e9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	605a      	str	r2, [r3, #4]
 8002ea8:	609a      	str	r2, [r3, #8]
 8002eaa:	60da      	str	r2, [r3, #12]
 8002eac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eae:	2300      	movs	r3, #0
 8002eb0:	623b      	str	r3, [r7, #32]
 8002eb2:	4bb2      	ldr	r3, [pc, #712]	@ (800317c <MX_GPIO_Init+0x2e4>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb6:	4ab1      	ldr	r2, [pc, #708]	@ (800317c <MX_GPIO_Init+0x2e4>)
 8002eb8:	f043 0304 	orr.w	r3, r3, #4
 8002ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ebe:	4baf      	ldr	r3, [pc, #700]	@ (800317c <MX_GPIO_Init+0x2e4>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec2:	f003 0304 	and.w	r3, r3, #4
 8002ec6:	623b      	str	r3, [r7, #32]
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61fb      	str	r3, [r7, #28]
 8002ece:	4bab      	ldr	r3, [pc, #684]	@ (800317c <MX_GPIO_Init+0x2e4>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed2:	4aaa      	ldr	r2, [pc, #680]	@ (800317c <MX_GPIO_Init+0x2e4>)
 8002ed4:	f043 0320 	orr.w	r3, r3, #32
 8002ed8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eda:	4ba8      	ldr	r3, [pc, #672]	@ (800317c <MX_GPIO_Init+0x2e4>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ede:	f003 0320 	and.w	r3, r3, #32
 8002ee2:	61fb      	str	r3, [r7, #28]
 8002ee4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61bb      	str	r3, [r7, #24]
 8002eea:	4ba4      	ldr	r3, [pc, #656]	@ (800317c <MX_GPIO_Init+0x2e4>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eee:	4aa3      	ldr	r2, [pc, #652]	@ (800317c <MX_GPIO_Init+0x2e4>)
 8002ef0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ef6:	4ba1      	ldr	r3, [pc, #644]	@ (800317c <MX_GPIO_Init+0x2e4>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002efe:	61bb      	str	r3, [r7, #24]
 8002f00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	617b      	str	r3, [r7, #20]
 8002f06:	4b9d      	ldr	r3, [pc, #628]	@ (800317c <MX_GPIO_Init+0x2e4>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0a:	4a9c      	ldr	r2, [pc, #624]	@ (800317c <MX_GPIO_Init+0x2e4>)
 8002f0c:	f043 0301 	orr.w	r3, r3, #1
 8002f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f12:	4b9a      	ldr	r3, [pc, #616]	@ (800317c <MX_GPIO_Init+0x2e4>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	613b      	str	r3, [r7, #16]
 8002f22:	4b96      	ldr	r3, [pc, #600]	@ (800317c <MX_GPIO_Init+0x2e4>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f26:	4a95      	ldr	r2, [pc, #596]	@ (800317c <MX_GPIO_Init+0x2e4>)
 8002f28:	f043 0302 	orr.w	r3, r3, #2
 8002f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f2e:	4b93      	ldr	r3, [pc, #588]	@ (800317c <MX_GPIO_Init+0x2e4>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	613b      	str	r3, [r7, #16]
 8002f38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	4b8f      	ldr	r3, [pc, #572]	@ (800317c <MX_GPIO_Init+0x2e4>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f42:	4a8e      	ldr	r2, [pc, #568]	@ (800317c <MX_GPIO_Init+0x2e4>)
 8002f44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f4a:	4b8c      	ldr	r3, [pc, #560]	@ (800317c <MX_GPIO_Init+0x2e4>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f56:	2300      	movs	r3, #0
 8002f58:	60bb      	str	r3, [r7, #8]
 8002f5a:	4b88      	ldr	r3, [pc, #544]	@ (800317c <MX_GPIO_Init+0x2e4>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5e:	4a87      	ldr	r2, [pc, #540]	@ (800317c <MX_GPIO_Init+0x2e4>)
 8002f60:	f043 0310 	orr.w	r3, r3, #16
 8002f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f66:	4b85      	ldr	r3, [pc, #532]	@ (800317c <MX_GPIO_Init+0x2e4>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	60bb      	str	r3, [r7, #8]
 8002f70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	607b      	str	r3, [r7, #4]
 8002f76:	4b81      	ldr	r3, [pc, #516]	@ (800317c <MX_GPIO_Init+0x2e4>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7a:	4a80      	ldr	r2, [pc, #512]	@ (800317c <MX_GPIO_Init+0x2e4>)
 8002f7c:	f043 0308 	orr.w	r3, r3, #8
 8002f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f82:	4b7e      	ldr	r3, [pc, #504]	@ (800317c <MX_GPIO_Init+0x2e4>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f86:	f003 0308 	and.w	r3, r3, #8
 8002f8a:	607b      	str	r3, [r7, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2116      	movs	r1, #22
 8002f92:	487b      	ldr	r0, [pc, #492]	@ (8003180 <MX_GPIO_Init+0x2e8>)
 8002f94:	f001 fbe8 	bl	8004768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8002f98:	2200      	movs	r2, #0
 8002f9a:	2180      	movs	r1, #128	@ 0x80
 8002f9c:	4879      	ldr	r0, [pc, #484]	@ (8003184 <MX_GPIO_Init+0x2ec>)
 8002f9e:	f001 fbe3 	bl	8004768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8002fa8:	4877      	ldr	r0, [pc, #476]	@ (8003188 <MX_GPIO_Init+0x2f0>)
 8002faa:	f001 fbdd 	bl	8004768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8002fb4:	4875      	ldr	r0, [pc, #468]	@ (800318c <MX_GPIO_Init+0x2f4>)
 8002fb6:	f001 fbd7 	bl	8004768 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002fba:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002fbe:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002fcc:	230c      	movs	r3, #12
 8002fce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002fd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	486e      	ldr	r0, [pc, #440]	@ (8003190 <MX_GPIO_Init+0x2f8>)
 8002fd8:	f001 f90e 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002fec:	230c      	movs	r3, #12
 8002fee:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002ff0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	4862      	ldr	r0, [pc, #392]	@ (8003180 <MX_GPIO_Init+0x2e8>)
 8002ff8:	f001 f8fe 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8002ffc:	2316      	movs	r3, #22
 8002ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003000:	2301      	movs	r3, #1
 8003002:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003004:	2300      	movs	r3, #0
 8003006:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003008:	2300      	movs	r3, #0
 800300a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800300c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003010:	4619      	mov	r1, r3
 8003012:	485b      	ldr	r0, [pc, #364]	@ (8003180 <MX_GPIO_Init+0x2e8>)
 8003014:	f001 f8f0 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8003018:	f248 0307 	movw	r3, #32775	@ 0x8007
 800301c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800301e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8003022:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003024:	2300      	movs	r3, #0
 8003026:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003028:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800302c:	4619      	mov	r1, r3
 800302e:	4855      	ldr	r0, [pc, #340]	@ (8003184 <MX_GPIO_Init+0x2ec>)
 8003030:	f001 f8e2 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8003034:	2380      	movs	r3, #128	@ 0x80
 8003036:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003038:	2301      	movs	r3, #1
 800303a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303c:	2300      	movs	r3, #0
 800303e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003040:	2300      	movs	r3, #0
 8003042:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8003044:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003048:	4619      	mov	r1, r3
 800304a:	484e      	ldr	r0, [pc, #312]	@ (8003184 <MX_GPIO_Init+0x2ec>)
 800304c:	f001 f8d4 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8003050:	2320      	movs	r3, #32
 8003052:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003054:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8003058:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305a:	2300      	movs	r3, #0
 800305c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800305e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003062:	4619      	mov	r1, r3
 8003064:	4846      	ldr	r0, [pc, #280]	@ (8003180 <MX_GPIO_Init+0x2e8>)
 8003066:	f001 f8c7 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800306a:	2304      	movs	r3, #4
 800306c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800306e:	2300      	movs	r3, #0
 8003070:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003072:	2300      	movs	r3, #0
 8003074:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003076:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800307a:	4619      	mov	r1, r3
 800307c:	4845      	ldr	r0, [pc, #276]	@ (8003194 <MX_GPIO_Init+0x2fc>)
 800307e:	f001 f8bb 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8003082:	f248 1333 	movw	r3, #33075	@ 0x8133
 8003086:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003088:	2302      	movs	r3, #2
 800308a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308c:	2300      	movs	r3, #0
 800308e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003090:	2303      	movs	r3, #3
 8003092:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003094:	230c      	movs	r3, #12
 8003096:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003098:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800309c:	4619      	mov	r1, r3
 800309e:	483b      	ldr	r0, [pc, #236]	@ (800318c <MX_GPIO_Init+0x2f4>)
 80030a0:	f001 f8aa 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80030a4:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80030a8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030aa:	2302      	movs	r3, #2
 80030ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030b2:	2303      	movs	r3, #3
 80030b4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80030b6:	230c      	movs	r3, #12
 80030b8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030be:	4619      	mov	r1, r3
 80030c0:	4835      	ldr	r0, [pc, #212]	@ (8003198 <MX_GPIO_Init+0x300>)
 80030c2:	f001 f899 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80030c6:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80030ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030cc:	2302      	movs	r3, #2
 80030ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d0:	2300      	movs	r3, #0
 80030d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d4:	2300      	movs	r3, #0
 80030d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80030d8:	230c      	movs	r3, #12
 80030da:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030e0:	4619      	mov	r1, r3
 80030e2:	482c      	ldr	r0, [pc, #176]	@ (8003194 <MX_GPIO_Init+0x2fc>)
 80030e4:	f001 f888 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80030e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80030ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030ee:	2300      	movs	r3, #0
 80030f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f2:	2300      	movs	r3, #0
 80030f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80030f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030fa:	4619      	mov	r1, r3
 80030fc:	4825      	ldr	r0, [pc, #148]	@ (8003194 <MX_GPIO_Init+0x2fc>)
 80030fe:	f001 f87b 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8003102:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8003106:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003108:	2302      	movs	r3, #2
 800310a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310c:	2300      	movs	r3, #0
 800310e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003110:	2303      	movs	r3, #3
 8003112:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003114:	230c      	movs	r3, #12
 8003116:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003118:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800311c:	4619      	mov	r1, r3
 800311e:	481a      	ldr	r0, [pc, #104]	@ (8003188 <MX_GPIO_Init+0x2f0>)
 8003120:	f001 f86a 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8003124:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003128:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800312a:	2300      	movs	r3, #0
 800312c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312e:	2300      	movs	r3, #0
 8003130:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8003132:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003136:	4619      	mov	r1, r3
 8003138:	4813      	ldr	r0, [pc, #76]	@ (8003188 <MX_GPIO_Init+0x2f0>)
 800313a:	f001 f85d 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800313e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003142:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003144:	2301      	movs	r3, #1
 8003146:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003148:	2300      	movs	r3, #0
 800314a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800314c:	2300      	movs	r3, #0
 800314e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003150:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003154:	4619      	mov	r1, r3
 8003156:	480c      	ldr	r0, [pc, #48]	@ (8003188 <MX_GPIO_Init+0x2f0>)
 8003158:	f001 f84e 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800315c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003160:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003162:	2302      	movs	r3, #2
 8003164:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003166:	2300      	movs	r3, #0
 8003168:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800316a:	2303      	movs	r3, #3
 800316c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800316e:	2307      	movs	r3, #7
 8003170:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003172:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003176:	4619      	mov	r1, r3
 8003178:	e010      	b.n	800319c <MX_GPIO_Init+0x304>
 800317a:	bf00      	nop
 800317c:	40023800 	.word	0x40023800
 8003180:	40020800 	.word	0x40020800
 8003184:	40020000 	.word	0x40020000
 8003188:	40020c00 	.word	0x40020c00
 800318c:	40021800 	.word	0x40021800
 8003190:	40021400 	.word	0x40021400
 8003194:	40020400 	.word	0x40020400
 8003198:	40021000 	.word	0x40021000
 800319c:	4812      	ldr	r0, [pc, #72]	@ (80031e8 <MX_GPIO_Init+0x350>)
 800319e:	f001 f82b 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80031a2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80031a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031a8:	2301      	movs	r3, #1
 80031aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b0:	2300      	movs	r3, #0
 80031b2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80031b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031b8:	4619      	mov	r1, r3
 80031ba:	480c      	ldr	r0, [pc, #48]	@ (80031ec <MX_GPIO_Init+0x354>)
 80031bc:	f001 f81c 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80031c0:	2360      	movs	r3, #96	@ 0x60
 80031c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c4:	2302      	movs	r3, #2
 80031c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c8:	2300      	movs	r3, #0
 80031ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031cc:	2303      	movs	r3, #3
 80031ce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80031d0:	230c      	movs	r3, #12
 80031d2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031d8:	4619      	mov	r1, r3
 80031da:	4805      	ldr	r0, [pc, #20]	@ (80031f0 <MX_GPIO_Init+0x358>)
 80031dc:	f001 f80c 	bl	80041f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80031e0:	bf00      	nop
 80031e2:	3738      	adds	r7, #56	@ 0x38
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40020000 	.word	0x40020000
 80031ec:	40021800 	.word	0x40021800
 80031f0:	40020400 	.word	0x40020400

080031f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80031f8:	b672      	cpsid	i
}
 80031fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031fc:	bf00      	nop
 80031fe:	e7fd      	b.n	80031fc <Error_Handler+0x8>

08003200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003206:	2300      	movs	r3, #0
 8003208:	607b      	str	r3, [r7, #4]
 800320a:	4b10      	ldr	r3, [pc, #64]	@ (800324c <HAL_MspInit+0x4c>)
 800320c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800320e:	4a0f      	ldr	r2, [pc, #60]	@ (800324c <HAL_MspInit+0x4c>)
 8003210:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003214:	6453      	str	r3, [r2, #68]	@ 0x44
 8003216:	4b0d      	ldr	r3, [pc, #52]	@ (800324c <HAL_MspInit+0x4c>)
 8003218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800321e:	607b      	str	r3, [r7, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003222:	2300      	movs	r3, #0
 8003224:	603b      	str	r3, [r7, #0]
 8003226:	4b09      	ldr	r3, [pc, #36]	@ (800324c <HAL_MspInit+0x4c>)
 8003228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322a:	4a08      	ldr	r2, [pc, #32]	@ (800324c <HAL_MspInit+0x4c>)
 800322c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003230:	6413      	str	r3, [r2, #64]	@ 0x40
 8003232:	4b06      	ldr	r3, [pc, #24]	@ (800324c <HAL_MspInit+0x4c>)
 8003234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800323a:	603b      	str	r3, [r7, #0]
 800323c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800323e:	2007      	movs	r0, #7
 8003240:	f000 ff98 	bl	8004174 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003244:	bf00      	nop
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40023800 	.word	0x40023800

08003250 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b08a      	sub	sp, #40	@ 0x28
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003258:	f107 0314 	add.w	r3, r7, #20
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	605a      	str	r2, [r3, #4]
 8003262:	609a      	str	r2, [r3, #8]
 8003264:	60da      	str	r2, [r3, #12]
 8003266:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a29      	ldr	r2, [pc, #164]	@ (8003314 <HAL_I2C_MspInit+0xc4>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d14b      	bne.n	800330a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003272:	2300      	movs	r3, #0
 8003274:	613b      	str	r3, [r7, #16]
 8003276:	4b28      	ldr	r3, [pc, #160]	@ (8003318 <HAL_I2C_MspInit+0xc8>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327a:	4a27      	ldr	r2, [pc, #156]	@ (8003318 <HAL_I2C_MspInit+0xc8>)
 800327c:	f043 0304 	orr.w	r3, r3, #4
 8003280:	6313      	str	r3, [r2, #48]	@ 0x30
 8003282:	4b25      	ldr	r3, [pc, #148]	@ (8003318 <HAL_I2C_MspInit+0xc8>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003286:	f003 0304 	and.w	r3, r3, #4
 800328a:	613b      	str	r3, [r7, #16]
 800328c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800328e:	2300      	movs	r3, #0
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	4b21      	ldr	r3, [pc, #132]	@ (8003318 <HAL_I2C_MspInit+0xc8>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003296:	4a20      	ldr	r2, [pc, #128]	@ (8003318 <HAL_I2C_MspInit+0xc8>)
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	6313      	str	r3, [r2, #48]	@ 0x30
 800329e:	4b1e      	ldr	r3, [pc, #120]	@ (8003318 <HAL_I2C_MspInit+0xc8>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80032aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032b0:	2312      	movs	r3, #18
 80032b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b4:	2300      	movs	r3, #0
 80032b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b8:	2300      	movs	r3, #0
 80032ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80032bc:	2304      	movs	r3, #4
 80032be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80032c0:	f107 0314 	add.w	r3, r7, #20
 80032c4:	4619      	mov	r1, r3
 80032c6:	4815      	ldr	r0, [pc, #84]	@ (800331c <HAL_I2C_MspInit+0xcc>)
 80032c8:	f000 ff96 	bl	80041f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80032cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032d2:	2312      	movs	r3, #18
 80032d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d6:	2300      	movs	r3, #0
 80032d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032da:	2300      	movs	r3, #0
 80032dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80032de:	2304      	movs	r3, #4
 80032e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80032e2:	f107 0314 	add.w	r3, r7, #20
 80032e6:	4619      	mov	r1, r3
 80032e8:	480d      	ldr	r0, [pc, #52]	@ (8003320 <HAL_I2C_MspInit+0xd0>)
 80032ea:	f000 ff85 	bl	80041f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	60bb      	str	r3, [r7, #8]
 80032f2:	4b09      	ldr	r3, [pc, #36]	@ (8003318 <HAL_I2C_MspInit+0xc8>)
 80032f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f6:	4a08      	ldr	r2, [pc, #32]	@ (8003318 <HAL_I2C_MspInit+0xc8>)
 80032f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80032fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80032fe:	4b06      	ldr	r3, [pc, #24]	@ (8003318 <HAL_I2C_MspInit+0xc8>)
 8003300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003302:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003306:	60bb      	str	r3, [r7, #8]
 8003308:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800330a:	bf00      	nop
 800330c:	3728      	adds	r7, #40	@ 0x28
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40005c00 	.word	0x40005c00
 8003318:	40023800 	.word	0x40023800
 800331c:	40020800 	.word	0x40020800
 8003320:	40020000 	.word	0x40020000

08003324 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b09a      	sub	sp, #104	@ 0x68
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800332c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	605a      	str	r2, [r3, #4]
 8003336:	609a      	str	r2, [r3, #8]
 8003338:	60da      	str	r2, [r3, #12]
 800333a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800333c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003340:	2230      	movs	r2, #48	@ 0x30
 8003342:	2100      	movs	r1, #0
 8003344:	4618      	mov	r0, r3
 8003346:	f004 fa23 	bl	8007790 <memset>
  if(hltdc->Instance==LTDC)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a81      	ldr	r2, [pc, #516]	@ (8003554 <HAL_LTDC_MspInit+0x230>)
 8003350:	4293      	cmp	r3, r2
 8003352:	f040 80fb 	bne.w	800354c <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003356:	2308      	movs	r3, #8
 8003358:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 800335a:	23c8      	movs	r3, #200	@ 0xc8
 800335c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800335e:	2302      	movs	r3, #2
 8003360:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8003362:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8003366:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003368:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800336c:	4618      	mov	r0, r3
 800336e:	f003 f9f7 	bl	8006760 <HAL_RCCEx_PeriphCLKConfig>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8003378:	f7ff ff3c 	bl	80031f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800337c:	2300      	movs	r3, #0
 800337e:	623b      	str	r3, [r7, #32]
 8003380:	4b75      	ldr	r3, [pc, #468]	@ (8003558 <HAL_LTDC_MspInit+0x234>)
 8003382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003384:	4a74      	ldr	r2, [pc, #464]	@ (8003558 <HAL_LTDC_MspInit+0x234>)
 8003386:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800338a:	6453      	str	r3, [r2, #68]	@ 0x44
 800338c:	4b72      	ldr	r3, [pc, #456]	@ (8003558 <HAL_LTDC_MspInit+0x234>)
 800338e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003390:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003394:	623b      	str	r3, [r7, #32]
 8003396:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003398:	2300      	movs	r3, #0
 800339a:	61fb      	str	r3, [r7, #28]
 800339c:	4b6e      	ldr	r3, [pc, #440]	@ (8003558 <HAL_LTDC_MspInit+0x234>)
 800339e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a0:	4a6d      	ldr	r2, [pc, #436]	@ (8003558 <HAL_LTDC_MspInit+0x234>)
 80033a2:	f043 0320 	orr.w	r3, r3, #32
 80033a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80033a8:	4b6b      	ldr	r3, [pc, #428]	@ (8003558 <HAL_LTDC_MspInit+0x234>)
 80033aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ac:	f003 0320 	and.w	r3, r3, #32
 80033b0:	61fb      	str	r3, [r7, #28]
 80033b2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033b4:	2300      	movs	r3, #0
 80033b6:	61bb      	str	r3, [r7, #24]
 80033b8:	4b67      	ldr	r3, [pc, #412]	@ (8003558 <HAL_LTDC_MspInit+0x234>)
 80033ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033bc:	4a66      	ldr	r2, [pc, #408]	@ (8003558 <HAL_LTDC_MspInit+0x234>)
 80033be:	f043 0301 	orr.w	r3, r3, #1
 80033c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80033c4:	4b64      	ldr	r3, [pc, #400]	@ (8003558 <HAL_LTDC_MspInit+0x234>)
 80033c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	61bb      	str	r3, [r7, #24]
 80033ce:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]
 80033d4:	4b60      	ldr	r3, [pc, #384]	@ (8003558 <HAL_LTDC_MspInit+0x234>)
 80033d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d8:	4a5f      	ldr	r2, [pc, #380]	@ (8003558 <HAL_LTDC_MspInit+0x234>)
 80033da:	f043 0302 	orr.w	r3, r3, #2
 80033de:	6313      	str	r3, [r2, #48]	@ 0x30
 80033e0:	4b5d      	ldr	r3, [pc, #372]	@ (8003558 <HAL_LTDC_MspInit+0x234>)
 80033e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	617b      	str	r3, [r7, #20]
 80033ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80033ec:	2300      	movs	r3, #0
 80033ee:	613b      	str	r3, [r7, #16]
 80033f0:	4b59      	ldr	r3, [pc, #356]	@ (8003558 <HAL_LTDC_MspInit+0x234>)
 80033f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f4:	4a58      	ldr	r2, [pc, #352]	@ (8003558 <HAL_LTDC_MspInit+0x234>)
 80033f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80033fc:	4b56      	ldr	r3, [pc, #344]	@ (8003558 <HAL_LTDC_MspInit+0x234>)
 80033fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003404:	613b      	str	r3, [r7, #16]
 8003406:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003408:	2300      	movs	r3, #0
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	4b52      	ldr	r3, [pc, #328]	@ (8003558 <HAL_LTDC_MspInit+0x234>)
 800340e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003410:	4a51      	ldr	r2, [pc, #324]	@ (8003558 <HAL_LTDC_MspInit+0x234>)
 8003412:	f043 0304 	orr.w	r3, r3, #4
 8003416:	6313      	str	r3, [r2, #48]	@ 0x30
 8003418:	4b4f      	ldr	r3, [pc, #316]	@ (8003558 <HAL_LTDC_MspInit+0x234>)
 800341a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003424:	2300      	movs	r3, #0
 8003426:	60bb      	str	r3, [r7, #8]
 8003428:	4b4b      	ldr	r3, [pc, #300]	@ (8003558 <HAL_LTDC_MspInit+0x234>)
 800342a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342c:	4a4a      	ldr	r2, [pc, #296]	@ (8003558 <HAL_LTDC_MspInit+0x234>)
 800342e:	f043 0308 	orr.w	r3, r3, #8
 8003432:	6313      	str	r3, [r2, #48]	@ 0x30
 8003434:	4b48      	ldr	r3, [pc, #288]	@ (8003558 <HAL_LTDC_MspInit+0x234>)
 8003436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003438:	f003 0308 	and.w	r3, r3, #8
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8003440:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003444:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003446:	2302      	movs	r3, #2
 8003448:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344a:	2300      	movs	r3, #0
 800344c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800344e:	2300      	movs	r3, #0
 8003450:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003452:	230e      	movs	r3, #14
 8003454:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003456:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800345a:	4619      	mov	r1, r3
 800345c:	483f      	ldr	r0, [pc, #252]	@ (800355c <HAL_LTDC_MspInit+0x238>)
 800345e:	f000 fecb 	bl	80041f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8003462:	f641 0358 	movw	r3, #6232	@ 0x1858
 8003466:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003468:	2302      	movs	r3, #2
 800346a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346c:	2300      	movs	r3, #0
 800346e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003470:	2300      	movs	r3, #0
 8003472:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003474:	230e      	movs	r3, #14
 8003476:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003478:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800347c:	4619      	mov	r1, r3
 800347e:	4838      	ldr	r0, [pc, #224]	@ (8003560 <HAL_LTDC_MspInit+0x23c>)
 8003480:	f000 feba 	bl	80041f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8003484:	2303      	movs	r3, #3
 8003486:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003488:	2302      	movs	r3, #2
 800348a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348c:	2300      	movs	r3, #0
 800348e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003490:	2300      	movs	r3, #0
 8003492:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003494:	2309      	movs	r3, #9
 8003496:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003498:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800349c:	4619      	mov	r1, r3
 800349e:	4831      	ldr	r0, [pc, #196]	@ (8003564 <HAL_LTDC_MspInit+0x240>)
 80034a0:	f000 feaa 	bl	80041f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80034a4:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80034a8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034aa:	2302      	movs	r3, #2
 80034ac:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ae:	2300      	movs	r3, #0
 80034b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b2:	2300      	movs	r3, #0
 80034b4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80034b6:	230e      	movs	r3, #14
 80034b8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80034be:	4619      	mov	r1, r3
 80034c0:	4828      	ldr	r0, [pc, #160]	@ (8003564 <HAL_LTDC_MspInit+0x240>)
 80034c2:	f000 fe99 	bl	80041f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80034c6:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80034ca:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034cc:	2302      	movs	r3, #2
 80034ce:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d4:	2300      	movs	r3, #0
 80034d6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80034d8:	230e      	movs	r3, #14
 80034da:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034dc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80034e0:	4619      	mov	r1, r3
 80034e2:	4821      	ldr	r0, [pc, #132]	@ (8003568 <HAL_LTDC_MspInit+0x244>)
 80034e4:	f000 fe88 	bl	80041f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80034e8:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80034ec:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ee:	2302      	movs	r3, #2
 80034f0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f2:	2300      	movs	r3, #0
 80034f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f6:	2300      	movs	r3, #0
 80034f8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80034fa:	230e      	movs	r3, #14
 80034fc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034fe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003502:	4619      	mov	r1, r3
 8003504:	4819      	ldr	r0, [pc, #100]	@ (800356c <HAL_LTDC_MspInit+0x248>)
 8003506:	f000 fe77 	bl	80041f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800350a:	2348      	movs	r3, #72	@ 0x48
 800350c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800350e:	2302      	movs	r3, #2
 8003510:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003512:	2300      	movs	r3, #0
 8003514:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003516:	2300      	movs	r3, #0
 8003518:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800351a:	230e      	movs	r3, #14
 800351c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800351e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003522:	4619      	mov	r1, r3
 8003524:	4812      	ldr	r0, [pc, #72]	@ (8003570 <HAL_LTDC_MspInit+0x24c>)
 8003526:	f000 fe67 	bl	80041f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800352a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800352e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003530:	2302      	movs	r3, #2
 8003532:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003534:	2300      	movs	r3, #0
 8003536:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003538:	2300      	movs	r3, #0
 800353a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800353c:	2309      	movs	r3, #9
 800353e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003540:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003544:	4619      	mov	r1, r3
 8003546:	4808      	ldr	r0, [pc, #32]	@ (8003568 <HAL_LTDC_MspInit+0x244>)
 8003548:	f000 fe56 	bl	80041f8 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800354c:	bf00      	nop
 800354e:	3768      	adds	r7, #104	@ 0x68
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40016800 	.word	0x40016800
 8003558:	40023800 	.word	0x40023800
 800355c:	40021400 	.word	0x40021400
 8003560:	40020000 	.word	0x40020000
 8003564:	40020400 	.word	0x40020400
 8003568:	40021800 	.word	0x40021800
 800356c:	40020800 	.word	0x40020800
 8003570:	40020c00 	.word	0x40020c00

08003574 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a0b      	ldr	r2, [pc, #44]	@ (80035b0 <HAL_RNG_MspInit+0x3c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d10d      	bne.n	80035a2 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003586:	2300      	movs	r3, #0
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	4b0a      	ldr	r3, [pc, #40]	@ (80035b4 <HAL_RNG_MspInit+0x40>)
 800358c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800358e:	4a09      	ldr	r2, [pc, #36]	@ (80035b4 <HAL_RNG_MspInit+0x40>)
 8003590:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003594:	6353      	str	r3, [r2, #52]	@ 0x34
 8003596:	4b07      	ldr	r3, [pc, #28]	@ (80035b4 <HAL_RNG_MspInit+0x40>)
 8003598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800359a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 80035a2:	bf00      	nop
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	50060800 	.word	0x50060800
 80035b4:	40023800 	.word	0x40023800

080035b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08a      	sub	sp, #40	@ 0x28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c0:	f107 0314 	add.w	r3, r7, #20
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	605a      	str	r2, [r3, #4]
 80035ca:	609a      	str	r2, [r3, #8]
 80035cc:	60da      	str	r2, [r3, #12]
 80035ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a19      	ldr	r2, [pc, #100]	@ (800363c <HAL_SPI_MspInit+0x84>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d12c      	bne.n	8003634 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80035da:	2300      	movs	r3, #0
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	4b18      	ldr	r3, [pc, #96]	@ (8003640 <HAL_SPI_MspInit+0x88>)
 80035e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e2:	4a17      	ldr	r2, [pc, #92]	@ (8003640 <HAL_SPI_MspInit+0x88>)
 80035e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80035ea:	4b15      	ldr	r3, [pc, #84]	@ (8003640 <HAL_SPI_MspInit+0x88>)
 80035ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035f2:	613b      	str	r3, [r7, #16]
 80035f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80035f6:	2300      	movs	r3, #0
 80035f8:	60fb      	str	r3, [r7, #12]
 80035fa:	4b11      	ldr	r3, [pc, #68]	@ (8003640 <HAL_SPI_MspInit+0x88>)
 80035fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fe:	4a10      	ldr	r2, [pc, #64]	@ (8003640 <HAL_SPI_MspInit+0x88>)
 8003600:	f043 0320 	orr.w	r3, r3, #32
 8003604:	6313      	str	r3, [r2, #48]	@ 0x30
 8003606:	4b0e      	ldr	r3, [pc, #56]	@ (8003640 <HAL_SPI_MspInit+0x88>)
 8003608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360a:	f003 0320 	and.w	r3, r3, #32
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8003612:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003618:	2302      	movs	r3, #2
 800361a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361c:	2300      	movs	r3, #0
 800361e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003620:	2300      	movs	r3, #0
 8003622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003624:	2305      	movs	r3, #5
 8003626:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003628:	f107 0314 	add.w	r3, r7, #20
 800362c:	4619      	mov	r1, r3
 800362e:	4805      	ldr	r0, [pc, #20]	@ (8003644 <HAL_SPI_MspInit+0x8c>)
 8003630:	f000 fde2 	bl	80041f8 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8003634:	bf00      	nop
 8003636:	3728      	adds	r7, #40	@ 0x28
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40015000 	.word	0x40015000
 8003640:	40023800 	.word	0x40023800
 8003644:	40021400 	.word	0x40021400

08003648 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a08      	ldr	r2, [pc, #32]	@ (8003678 <HAL_SPI_MspDeInit+0x30>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d10a      	bne.n	8003670 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800365a:	4b08      	ldr	r3, [pc, #32]	@ (800367c <HAL_SPI_MspDeInit+0x34>)
 800365c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365e:	4a07      	ldr	r2, [pc, #28]	@ (800367c <HAL_SPI_MspDeInit+0x34>)
 8003660:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003664:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8003666:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800366a:	4805      	ldr	r0, [pc, #20]	@ (8003680 <HAL_SPI_MspDeInit+0x38>)
 800366c:	f000 ff70 	bl	8004550 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8003670:	bf00      	nop
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40015000 	.word	0x40015000
 800367c:	40023800 	.word	0x40023800
 8003680:	40021400 	.word	0x40021400

08003684 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003694:	d10d      	bne.n	80036b2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003696:	2300      	movs	r3, #0
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	4b09      	ldr	r3, [pc, #36]	@ (80036c0 <HAL_TIM_Base_MspInit+0x3c>)
 800369c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369e:	4a08      	ldr	r2, [pc, #32]	@ (80036c0 <HAL_TIM_Base_MspInit+0x3c>)
 80036a0:	f043 0301 	orr.w	r3, r3, #1
 80036a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80036a6:	4b06      	ldr	r3, [pc, #24]	@ (80036c0 <HAL_TIM_Base_MspInit+0x3c>)
 80036a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80036b2:	bf00      	nop
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40023800 	.word	0x40023800

080036c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80036c8:	bf00      	nop
 80036ca:	e7fd      	b.n	80036c8 <NMI_Handler+0x4>

080036cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036d0:	bf00      	nop
 80036d2:	e7fd      	b.n	80036d0 <HardFault_Handler+0x4>

080036d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036d8:	bf00      	nop
 80036da:	e7fd      	b.n	80036d8 <MemManage_Handler+0x4>

080036dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036e0:	bf00      	nop
 80036e2:	e7fd      	b.n	80036e0 <BusFault_Handler+0x4>

080036e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036e8:	bf00      	nop
 80036ea:	e7fd      	b.n	80036e8 <UsageFault_Handler+0x4>

080036ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036f0:	bf00      	nop
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036fa:	b480      	push	{r7}
 80036fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036fe:	bf00      	nop
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800370c:	bf00      	nop
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800371a:	f000 fc17 	bl	8003f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800371e:	bf00      	nop
 8003720:	bd80      	pop	{r7, pc}

08003722 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b082      	sub	sp, #8
 8003726:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8003728:	f000 f9ce 	bl	8003ac8 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 800372c:	f000 f98e 	bl	8003a4c <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8003730:	2202      	movs	r2, #2
 8003732:	2103      	movs	r1, #3
 8003734:	2082      	movs	r0, #130	@ 0x82
 8003736:	f000 fa1b 	bl	8003b70 <I2C3_Write>
    HAL_Delay(5);
 800373a:	2005      	movs	r0, #5
 800373c:	f000 fc26 	bl	8003f8c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8003740:	2200      	movs	r2, #0
 8003742:	2103      	movs	r1, #3
 8003744:	2082      	movs	r0, #130	@ 0x82
 8003746:	f000 fa13 	bl	8003b70 <I2C3_Write>
    HAL_Delay(2);
 800374a:	2002      	movs	r0, #2
 800374c:	f000 fc1e 	bl	8003f8c <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8003750:	1cba      	adds	r2, r7, #2
 8003752:	2302      	movs	r3, #2
 8003754:	2100      	movs	r1, #0
 8003756:	2082      	movs	r0, #130	@ 0x82
 8003758:	f000 fa5a 	bl	8003c10 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 800375c:	887b      	ldrh	r3, [r7, #2]
 800375e:	021b      	lsls	r3, r3, #8
 8003760:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8003762:	887b      	ldrh	r3, [r7, #2]
 8003764:	0a1b      	lsrs	r3, r3, #8
 8003766:	b29a      	uxth	r2, r3
 8003768:	88fb      	ldrh	r3, [r7, #6]
 800376a:	4313      	orrs	r3, r2
 800376c:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 800376e:	88fb      	ldrh	r3, [r7, #6]
 8003770:	f640 0211 	movw	r2, #2065	@ 0x811
 8003774:	4293      	cmp	r3, r2
 8003776:	d001      	beq.n	800377c <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8003778:	2303      	movs	r3, #3
 800377a:	e075      	b.n	8003868 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800377c:	2202      	movs	r2, #2
 800377e:	2103      	movs	r1, #3
 8003780:	2082      	movs	r0, #130	@ 0x82
 8003782:	f000 f9f5 	bl	8003b70 <I2C3_Write>
    HAL_Delay(5);
 8003786:	2005      	movs	r0, #5
 8003788:	f000 fc00 	bl	8003f8c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 800378c:	2200      	movs	r2, #0
 800378e:	2103      	movs	r1, #3
 8003790:	2082      	movs	r0, #130	@ 0x82
 8003792:	f000 f9ed 	bl	8003b70 <I2C3_Write>
    HAL_Delay(2);
 8003796:	2002      	movs	r0, #2
 8003798:	f000 fbf8 	bl	8003f8c <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800379c:	2004      	movs	r0, #4
 800379e:	f000 f867 	bl	8003870 <STMPE811_Read>
 80037a2:	4603      	mov	r3, r0
 80037a4:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 80037a6:	797b      	ldrb	r3, [r7, #5]
 80037a8:	f023 0301 	bic.w	r3, r3, #1
 80037ac:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80037ae:	797b      	ldrb	r3, [r7, #5]
 80037b0:	461a      	mov	r2, r3
 80037b2:	2104      	movs	r1, #4
 80037b4:	2082      	movs	r0, #130	@ 0x82
 80037b6:	f000 f9db 	bl	8003b70 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80037ba:	2004      	movs	r0, #4
 80037bc:	f000 f858 	bl	8003870 <STMPE811_Read>
 80037c0:	4603      	mov	r3, r0
 80037c2:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 80037c4:	797b      	ldrb	r3, [r7, #5]
 80037c6:	f023 0302 	bic.w	r3, r3, #2
 80037ca:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80037cc:	797b      	ldrb	r3, [r7, #5]
 80037ce:	461a      	mov	r2, r3
 80037d0:	2104      	movs	r1, #4
 80037d2:	2082      	movs	r0, #130	@ 0x82
 80037d4:	f000 f9cc 	bl	8003b70 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 80037d8:	2249      	movs	r2, #73	@ 0x49
 80037da:	2120      	movs	r1, #32
 80037dc:	2082      	movs	r0, #130	@ 0x82
 80037de:	f000 f9c7 	bl	8003b70 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 80037e2:	2002      	movs	r0, #2
 80037e4:	f000 fbd2 	bl	8003f8c <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 80037e8:	2201      	movs	r2, #1
 80037ea:	2121      	movs	r1, #33	@ 0x21
 80037ec:	2082      	movs	r0, #130	@ 0x82
 80037ee:	f000 f9bf 	bl	8003b70 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 80037f2:	2017      	movs	r0, #23
 80037f4:	f000 f83c 	bl	8003870 <STMPE811_Read>
 80037f8:	4603      	mov	r3, r0
 80037fa:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 80037fc:	797b      	ldrb	r3, [r7, #5]
 80037fe:	f043 031e 	orr.w	r3, r3, #30
 8003802:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8003804:	797b      	ldrb	r3, [r7, #5]
 8003806:	461a      	mov	r2, r3
 8003808:	2117      	movs	r1, #23
 800380a:	2082      	movs	r0, #130	@ 0x82
 800380c:	f000 f9b0 	bl	8003b70 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8003810:	229a      	movs	r2, #154	@ 0x9a
 8003812:	2141      	movs	r1, #65	@ 0x41
 8003814:	2082      	movs	r0, #130	@ 0x82
 8003816:	f000 f9ab 	bl	8003b70 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 800381a:	2201      	movs	r2, #1
 800381c:	214a      	movs	r1, #74	@ 0x4a
 800381e:	2082      	movs	r0, #130	@ 0x82
 8003820:	f000 f9a6 	bl	8003b70 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8003824:	2201      	movs	r2, #1
 8003826:	214b      	movs	r1, #75	@ 0x4b
 8003828:	2082      	movs	r0, #130	@ 0x82
 800382a:	f000 f9a1 	bl	8003b70 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800382e:	2200      	movs	r2, #0
 8003830:	214b      	movs	r1, #75	@ 0x4b
 8003832:	2082      	movs	r0, #130	@ 0x82
 8003834:	f000 f99c 	bl	8003b70 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8003838:	2201      	movs	r2, #1
 800383a:	2156      	movs	r1, #86	@ 0x56
 800383c:	2082      	movs	r0, #130	@ 0x82
 800383e:	f000 f997 	bl	8003b70 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8003842:	2201      	movs	r2, #1
 8003844:	2158      	movs	r1, #88	@ 0x58
 8003846:	2082      	movs	r0, #130	@ 0x82
 8003848:	f000 f992 	bl	8003b70 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 800384c:	2203      	movs	r2, #3
 800384e:	2140      	movs	r1, #64	@ 0x40
 8003850:	2082      	movs	r0, #130	@ 0x82
 8003852:	f000 f98d 	bl	8003b70 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8003856:	22ff      	movs	r2, #255	@ 0xff
 8003858:	210b      	movs	r1, #11
 800385a:	2082      	movs	r0, #130	@ 0x82
 800385c:	f000 f988 	bl	8003b70 <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8003860:	20c8      	movs	r0, #200	@ 0xc8
 8003862:	f000 fb93 	bl	8003f8c <HAL_Delay>

    return STMPE811_State_Ok;
 8003866:	2302      	movs	r3, #2

}
 8003868:	4618      	mov	r0, r3
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 800387a:	f107 020f 	add.w	r2, r7, #15
 800387e:	79fb      	ldrb	r3, [r7, #7]
 8003880:	4619      	mov	r1, r3
 8003882:	2082      	movs	r0, #130	@ 0x82
 8003884:	f000 f99e 	bl	8003bc4 <I2C3_Read>

    return readData;
 8003888:	7bfb      	ldrb	r3, [r7, #15]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b084      	sub	sp, #16
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	791a      	ldrb	r2, [r3, #4]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 80038a2:	2040      	movs	r0, #64	@ 0x40
 80038a4:	f7ff ffe4 	bl	8003870 <STMPE811_Read>
 80038a8:	4603      	mov	r3, r0
 80038aa:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 80038ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	db0e      	blt.n	80038d2 <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80038ba:	2201      	movs	r2, #1
 80038bc:	214b      	movs	r1, #75	@ 0x4b
 80038be:	2082      	movs	r0, #130	@ 0x82
 80038c0:	f000 f956 	bl	8003b70 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80038c4:	2200      	movs	r2, #0
 80038c6:	214b      	movs	r1, #75	@ 0x4b
 80038c8:	2082      	movs	r0, #130	@ 0x82
 80038ca:	f000 f951 	bl	8003b70 <I2C3_Write>

        return STMPE811_State_Released;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e0a7      	b.n	8003a22 <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	799b      	ldrb	r3, [r3, #6]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d117      	bne.n	800390a <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	881b      	ldrh	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 f9b8 	bl	8003c54 <TM_STMPE811_ReadX>
 80038e4:	4603      	mov	r3, r0
 80038e6:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	885b      	ldrh	r3, [r3, #2]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 fa0b 	bl	8003d10 <TM_STMPE811_ReadY>
 80038fa:	4603      	mov	r3, r0
 80038fc:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8003900:	3301      	adds	r3, #1
 8003902:	b29a      	uxth	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	805a      	strh	r2, [r3, #2]
 8003908:	e048      	b.n	800399c <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	799b      	ldrb	r3, [r3, #6]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d112      	bne.n	8003938 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f000 f99c 	bl	8003c54 <TM_STMPE811_ReadX>
 800391c:	4603      	mov	r3, r0
 800391e:	461a      	mov	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	885b      	ldrh	r3, [r3, #2]
 8003928:	4618      	mov	r0, r3
 800392a:	f000 f9f1 	bl	8003d10 <TM_STMPE811_ReadY>
 800392e:	4603      	mov	r3, r0
 8003930:	461a      	mov	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	805a      	strh	r2, [r3, #2]
 8003936:	e031      	b.n	800399c <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	799b      	ldrb	r3, [r3, #6]
 800393c:	2b02      	cmp	r3, #2
 800393e:	d115      	bne.n	800396c <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	885b      	ldrh	r3, [r3, #2]
 8003944:	4618      	mov	r0, r3
 8003946:	f000 f985 	bl	8003c54 <TM_STMPE811_ReadX>
 800394a:	4603      	mov	r3, r0
 800394c:	461a      	mov	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	881b      	ldrh	r3, [r3, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f000 f9da 	bl	8003d10 <TM_STMPE811_ReadY>
 800395c:	4603      	mov	r3, r0
 800395e:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8003962:	3301      	adds	r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	801a      	strh	r2, [r3, #0]
 800396a:	e017      	b.n	800399c <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	799b      	ldrb	r3, [r3, #6]
 8003970:	2b03      	cmp	r3, #3
 8003972:	d113      	bne.n	800399c <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	881b      	ldrh	r3, [r3, #0]
 8003978:	4618      	mov	r0, r3
 800397a:	f000 f96b 	bl	8003c54 <TM_STMPE811_ReadX>
 800397e:	4603      	mov	r3, r0
 8003980:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8003984:	b29a      	uxth	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f000 f9be 	bl	8003d10 <TM_STMPE811_ReadY>
 8003994:	4603      	mov	r3, r0
 8003996:	461a      	mov	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800399c:	2201      	movs	r2, #1
 800399e:	214b      	movs	r1, #75	@ 0x4b
 80039a0:	2082      	movs	r0, #130	@ 0x82
 80039a2:	f000 f8e5 	bl	8003b70 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80039a6:	2200      	movs	r2, #0
 80039a8:	214b      	movs	r1, #75	@ 0x4b
 80039aa:	2082      	movs	r0, #130	@ 0x82
 80039ac:	f000 f8e0 	bl	8003b70 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	799b      	ldrb	r3, [r3, #6]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <STMPE811_ReadTouch+0x12e>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	799b      	ldrb	r3, [r3, #6]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d115      	bne.n	80039ec <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	881b      	ldrh	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d027      	beq.n	8003a18 <STMPE811_ReadTouch+0x186>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	881b      	ldrh	r3, [r3, #0]
 80039cc:	2bee      	cmp	r3, #238	@ 0xee
 80039ce:	d823      	bhi.n	8003a18 <STMPE811_ReadTouch+0x186>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	885b      	ldrh	r3, [r3, #2]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d01f      	beq.n	8003a18 <STMPE811_ReadTouch+0x186>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	885b      	ldrh	r3, [r3, #2]
 80039dc:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80039e0:	d81a      	bhi.n	8003a18 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 80039e8:	2300      	movs	r3, #0
 80039ea:	e01a      	b.n	8003a22 <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	881b      	ldrh	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d012      	beq.n	8003a1a <STMPE811_ReadTouch+0x188>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80039fc:	d80d      	bhi.n	8003a1a <STMPE811_ReadTouch+0x188>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	885b      	ldrh	r3, [r3, #2]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d009      	beq.n	8003a1a <STMPE811_ReadTouch+0x188>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	885b      	ldrh	r3, [r3, #2]
 8003a0a:	2bee      	cmp	r3, #238	@ 0xee
 8003a0c:	d805      	bhi.n	8003a1a <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8003a14:	2300      	movs	r3, #0
 8003a16:	e004      	b.n	8003a22 <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8003a18:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8003a20:	2301      	movs	r3, #1
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
	...

08003a2c <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8003a30:	4b05      	ldr	r3, [pc, #20]	@ (8003a48 <verifyHAL_I2C_IS_OKAY+0x1c>)
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8003a38:	bf00      	nop
 8003a3a:	e7fd      	b.n	8003a38 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8003a3c:	bf00      	nop
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	20025c0c 	.word	0x20025c0c

08003a4c <I2C3_Init>:

static void I2C3_Init()
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8003a52:	2300      	movs	r3, #0
 8003a54:	603b      	str	r3, [r7, #0]
 8003a56:	4b18      	ldr	r3, [pc, #96]	@ (8003ab8 <I2C3_Init+0x6c>)
 8003a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5a:	4a17      	ldr	r2, [pc, #92]	@ (8003ab8 <I2C3_Init+0x6c>)
 8003a5c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a60:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a62:	4b15      	ldr	r3, [pc, #84]	@ (8003ab8 <I2C3_Init+0x6c>)
 8003a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a6a:	603b      	str	r3, [r7, #0]
 8003a6c:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8003a6e:	4b13      	ldr	r3, [pc, #76]	@ (8003abc <I2C3_Init+0x70>)
 8003a70:	4a13      	ldr	r2, [pc, #76]	@ (8003ac0 <I2C3_Init+0x74>)
 8003a72:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8003a74:	4b11      	ldr	r3, [pc, #68]	@ (8003abc <I2C3_Init+0x70>)
 8003a76:	4a13      	ldr	r2, [pc, #76]	@ (8003ac4 <I2C3_Init+0x78>)
 8003a78:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003a7a:	4b10      	ldr	r3, [pc, #64]	@ (8003abc <I2C3_Init+0x70>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8003a80:	4b0e      	ldr	r3, [pc, #56]	@ (8003abc <I2C3_Init+0x70>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a86:	4b0d      	ldr	r3, [pc, #52]	@ (8003abc <I2C3_Init+0x70>)
 8003a88:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003a8c:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8003a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003abc <I2C3_Init+0x70>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a94:	4b09      	ldr	r3, [pc, #36]	@ (8003abc <I2C3_Init+0x70>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8003a9a:	4808      	ldr	r0, [pc, #32]	@ (8003abc <I2C3_Init+0x70>)
 8003a9c:	f000 fe96 	bl	80047cc <HAL_I2C_Init>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8003aa4:	79fb      	ldrb	r3, [r7, #7]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8003aaa:	bf00      	nop
 8003aac:	e7fd      	b.n	8003aaa <I2C3_Init+0x5e>
    }
    return;
 8003aae:	bf00      	nop
}
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	20025bb8 	.word	0x20025bb8
 8003ac0:	40005c00 	.word	0x40005c00
 8003ac4:	000186a0 	.word	0x000186a0

08003ac8 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b088      	sub	sp, #32
 8003acc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ace:	f107 030c 	add.w	r3, r7, #12
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	605a      	str	r2, [r3, #4]
 8003ad8:	609a      	str	r2, [r3, #8]
 8003ada:	60da      	str	r2, [r3, #12]
 8003adc:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60bb      	str	r3, [r7, #8]
 8003ae2:	4b20      	ldr	r3, [pc, #128]	@ (8003b64 <I2C3_MspInit+0x9c>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae6:	4a1f      	ldr	r2, [pc, #124]	@ (8003b64 <I2C3_MspInit+0x9c>)
 8003ae8:	f043 0304 	orr.w	r3, r3, #4
 8003aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8003aee:	4b1d      	ldr	r3, [pc, #116]	@ (8003b64 <I2C3_MspInit+0x9c>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af2:	f003 0304 	and.w	r3, r3, #4
 8003af6:	60bb      	str	r3, [r7, #8]
 8003af8:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003afa:	2300      	movs	r3, #0
 8003afc:	607b      	str	r3, [r7, #4]
 8003afe:	4b19      	ldr	r3, [pc, #100]	@ (8003b64 <I2C3_MspInit+0x9c>)
 8003b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b02:	4a18      	ldr	r2, [pc, #96]	@ (8003b64 <I2C3_MspInit+0x9c>)
 8003b04:	f043 0301 	orr.w	r3, r3, #1
 8003b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b0a:	4b16      	ldr	r3, [pc, #88]	@ (8003b64 <I2C3_MspInit+0x9c>)
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	607b      	str	r3, [r7, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8003b16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b1c:	2312      	movs	r3, #18
 8003b1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b20:	2300      	movs	r3, #0
 8003b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b24:	2300      	movs	r3, #0
 8003b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003b28:	2304      	movs	r3, #4
 8003b2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003b2c:	f107 030c 	add.w	r3, r7, #12
 8003b30:	4619      	mov	r1, r3
 8003b32:	480d      	ldr	r0, [pc, #52]	@ (8003b68 <I2C3_MspInit+0xa0>)
 8003b34:	f000 fb60 	bl	80041f8 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003b38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b3c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b3e:	2312      	movs	r3, #18
 8003b40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b42:	2300      	movs	r3, #0
 8003b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b46:	2300      	movs	r3, #0
 8003b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003b4a:	2304      	movs	r3, #4
 8003b4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8003b4e:	f107 030c 	add.w	r3, r7, #12
 8003b52:	4619      	mov	r1, r3
 8003b54:	4805      	ldr	r0, [pc, #20]	@ (8003b6c <I2C3_MspInit+0xa4>)
 8003b56:	f000 fb4f 	bl	80041f8 <HAL_GPIO_Init>
    
}
 8003b5a:	bf00      	nop
 8003b5c:	3720      	adds	r7, #32
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	40023800 	.word	0x40023800
 8003b68:	40020800 	.word	0x40020800
 8003b6c:	40020000 	.word	0x40020000

08003b70 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af04      	add	r7, sp, #16
 8003b76:	4603      	mov	r3, r0
 8003b78:	80fb      	strh	r3, [r7, #6]
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	717b      	strb	r3, [r7, #5]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8003b82:	793b      	ldrb	r3, [r7, #4]
 8003b84:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8003b86:	797b      	ldrb	r3, [r7, #5]
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	88f9      	ldrh	r1, [r7, #6]
 8003b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8003bb8 <I2C3_Write+0x48>)
 8003b8e:	9302      	str	r3, [sp, #8]
 8003b90:	2301      	movs	r3, #1
 8003b92:	9301      	str	r3, [sp, #4]
 8003b94:	f107 030f 	add.w	r3, r7, #15
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	4807      	ldr	r0, [pc, #28]	@ (8003bbc <I2C3_Write+0x4c>)
 8003b9e:	f000 ff59 	bl	8004a54 <HAL_I2C_Mem_Write>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4b06      	ldr	r3, [pc, #24]	@ (8003bc0 <I2C3_Write+0x50>)
 8003ba8:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8003baa:	f7ff ff3f 	bl	8003a2c <verifyHAL_I2C_IS_OKAY>
}
 8003bae:	bf00      	nop
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	0003d090 	.word	0x0003d090
 8003bbc:	20025bb8 	.word	0x20025bb8
 8003bc0:	20025c0c 	.word	0x20025c0c

08003bc4 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af04      	add	r7, sp, #16
 8003bca:	4603      	mov	r3, r0
 8003bcc:	603a      	str	r2, [r7, #0]
 8003bce:	71fb      	strb	r3, [r7, #7]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	b299      	uxth	r1, r3
 8003bd8:	79bb      	ldrb	r3, [r7, #6]
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	4b09      	ldr	r3, [pc, #36]	@ (8003c04 <I2C3_Read+0x40>)
 8003bde:	9302      	str	r3, [sp, #8]
 8003be0:	2301      	movs	r3, #1
 8003be2:	9301      	str	r3, [sp, #4]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	2301      	movs	r3, #1
 8003bea:	4807      	ldr	r0, [pc, #28]	@ (8003c08 <I2C3_Read+0x44>)
 8003bec:	f001 f82c 	bl	8004c48 <HAL_I2C_Mem_Read>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	4b05      	ldr	r3, [pc, #20]	@ (8003c0c <I2C3_Read+0x48>)
 8003bf6:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8003bf8:	f7ff ff18 	bl	8003a2c <verifyHAL_I2C_IS_OKAY>
}
 8003bfc:	bf00      	nop
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	0003d090 	.word	0x0003d090
 8003c08:	20025bb8 	.word	0x20025bb8
 8003c0c:	20025c0c 	.word	0x20025c0c

08003c10 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af04      	add	r7, sp, #16
 8003c16:	603a      	str	r2, [r7, #0]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	71fb      	strb	r3, [r7, #7]
 8003c1e:	460b      	mov	r3, r1
 8003c20:	71bb      	strb	r3, [r7, #6]
 8003c22:	4613      	mov	r3, r2
 8003c24:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8003c26:	79fb      	ldrb	r3, [r7, #7]
 8003c28:	b299      	uxth	r1, r3
 8003c2a:	79bb      	ldrb	r3, [r7, #6]
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	4b07      	ldr	r3, [pc, #28]	@ (8003c4c <I2C3_MulitByteRead+0x3c>)
 8003c30:	9302      	str	r3, [sp, #8]
 8003c32:	88bb      	ldrh	r3, [r7, #4]
 8003c34:	9301      	str	r3, [sp, #4]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	4804      	ldr	r0, [pc, #16]	@ (8003c50 <I2C3_MulitByteRead+0x40>)
 8003c3e:	f001 f803 	bl	8004c48 <HAL_I2C_Mem_Read>
}
 8003c42:	bf00      	nop
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	0003d090 	.word	0x0003d090
 8003c50:	20025bb8 	.word	0x20025bb8

08003c54 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8003c5e:	204d      	movs	r0, #77	@ 0x4d
 8003c60:	f7ff fe06 	bl	8003870 <STMPE811_Read>
 8003c64:	4603      	mov	r3, r0
 8003c66:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8003c68:	204e      	movs	r0, #78	@ 0x4e
 8003c6a:	f7ff fe01 	bl	8003870 <STMPE811_Read>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8003c72:	7a7b      	ldrb	r3, [r7, #9]
 8003c74:	021b      	lsls	r3, r3, #8
 8003c76:	b21a      	sxth	r2, r3
 8003c78:	7a3b      	ldrb	r3, [r7, #8]
 8003c7a:	b21b      	sxth	r3, r3
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8003c80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c84:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	dc06      	bgt.n	8003c9a <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8003c8c:	89fb      	ldrh	r3, [r7, #14]
 8003c8e:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8003c92:	330c      	adds	r3, #12
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	81fb      	strh	r3, [r7, #14]
 8003c98:	e005      	b.n	8003ca6 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8003c9a:	89fb      	ldrh	r3, [r7, #14]
 8003c9c:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8003ca0:	3308      	adds	r3, #8
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8003ca6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003caa:	4a18      	ldr	r2, [pc, #96]	@ (8003d0c <TM_STMPE811_ReadX+0xb8>)
 8003cac:	fb82 1203 	smull	r1, r2, r2, r3
 8003cb0:	441a      	add	r2, r3
 8003cb2:	10d2      	asrs	r2, r2, #3
 8003cb4:	17db      	asrs	r3, r3, #31
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8003cba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003cbe:	2bef      	cmp	r3, #239	@ 0xef
 8003cc0:	dd02      	ble.n	8003cc8 <TM_STMPE811_ReadX+0x74>
        val = 239;
 8003cc2:	23ef      	movs	r3, #239	@ 0xef
 8003cc4:	81fb      	strh	r3, [r7, #14]
 8003cc6:	e005      	b.n	8003cd4 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8003cc8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	da01      	bge.n	8003cd4 <TM_STMPE811_ReadX+0x80>
        val = 0;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8003cd4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003cd8:	88fb      	ldrh	r3, [r7, #6]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	dd05      	ble.n	8003cea <TM_STMPE811_ReadX+0x96>
 8003cde:	89fa      	ldrh	r2, [r7, #14]
 8003ce0:	88fb      	ldrh	r3, [r7, #6]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	b21b      	sxth	r3, r3
 8003ce8:	e004      	b.n	8003cf4 <TM_STMPE811_ReadX+0xa0>
 8003cea:	89fb      	ldrh	r3, [r7, #14]
 8003cec:	88fa      	ldrh	r2, [r7, #6]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	b21b      	sxth	r3, r3
 8003cf4:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8003cf6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	dd01      	ble.n	8003d02 <TM_STMPE811_ReadX+0xae>
        return val;
 8003cfe:	89fb      	ldrh	r3, [r7, #14]
 8003d00:	e000      	b.n	8003d04 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8003d02:	88fb      	ldrh	r3, [r7, #6]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	88888889 	.word	0x88888889

08003d10 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	4603      	mov	r3, r0
 8003d18:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8003d1a:	204f      	movs	r0, #79	@ 0x4f
 8003d1c:	f7ff fda8 	bl	8003870 <STMPE811_Read>
 8003d20:	4603      	mov	r3, r0
 8003d22:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8003d24:	2050      	movs	r0, #80	@ 0x50
 8003d26:	f7ff fda3 	bl	8003870 <STMPE811_Read>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8003d2e:	7a7b      	ldrb	r3, [r7, #9]
 8003d30:	021b      	lsls	r3, r3, #8
 8003d32:	b21a      	sxth	r2, r3
 8003d34:	7a3b      	ldrb	r3, [r7, #8]
 8003d36:	b21b      	sxth	r3, r3
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8003d3c:	89fb      	ldrh	r3, [r7, #14]
 8003d3e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8003d46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d4a:	4a19      	ldr	r2, [pc, #100]	@ (8003db0 <TM_STMPE811_ReadY+0xa0>)
 8003d4c:	fb82 1203 	smull	r1, r2, r2, r3
 8003d50:	1052      	asrs	r2, r2, #1
 8003d52:	17db      	asrs	r3, r3, #31
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8003d58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	dc02      	bgt.n	8003d66 <TM_STMPE811_ReadY+0x56>
        val = 0;
 8003d60:	2300      	movs	r3, #0
 8003d62:	81fb      	strh	r3, [r7, #14]
 8003d64:	e007      	b.n	8003d76 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8003d66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d6a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003d6e:	db02      	blt.n	8003d76 <TM_STMPE811_ReadY+0x66>
        val = 319;
 8003d70:	f240 133f 	movw	r3, #319	@ 0x13f
 8003d74:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8003d76:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003d7a:	88fb      	ldrh	r3, [r7, #6]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	dd05      	ble.n	8003d8c <TM_STMPE811_ReadY+0x7c>
 8003d80:	89fa      	ldrh	r2, [r7, #14]
 8003d82:	88fb      	ldrh	r3, [r7, #6]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	b21b      	sxth	r3, r3
 8003d8a:	e004      	b.n	8003d96 <TM_STMPE811_ReadY+0x86>
 8003d8c:	89fb      	ldrh	r3, [r7, #14]
 8003d8e:	88fa      	ldrh	r2, [r7, #6]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	b21b      	sxth	r3, r3
 8003d96:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8003d98:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003d9c:	2b04      	cmp	r3, #4
 8003d9e:	dd01      	ble.n	8003da4 <TM_STMPE811_ReadY+0x94>
        return val;
 8003da0:	89fb      	ldrh	r3, [r7, #14]
 8003da2:	e000      	b.n	8003da6 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8003da4:	88fb      	ldrh	r3, [r7, #6]
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	2e8ba2e9 	.word	0x2e8ba2e9

08003db4 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
}
 8003db8:	bf00      	nop
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
	...

08003dc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003dcc:	4a14      	ldr	r2, [pc, #80]	@ (8003e20 <_sbrk+0x5c>)
 8003dce:	4b15      	ldr	r3, [pc, #84]	@ (8003e24 <_sbrk+0x60>)
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003dd8:	4b13      	ldr	r3, [pc, #76]	@ (8003e28 <_sbrk+0x64>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d102      	bne.n	8003de6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003de0:	4b11      	ldr	r3, [pc, #68]	@ (8003e28 <_sbrk+0x64>)
 8003de2:	4a12      	ldr	r2, [pc, #72]	@ (8003e2c <_sbrk+0x68>)
 8003de4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003de6:	4b10      	ldr	r3, [pc, #64]	@ (8003e28 <_sbrk+0x64>)
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4413      	add	r3, r2
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d207      	bcs.n	8003e04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003df4:	f003 fcd4 	bl	80077a0 <__errno>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	220c      	movs	r2, #12
 8003dfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8003e02:	e009      	b.n	8003e18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e04:	4b08      	ldr	r3, [pc, #32]	@ (8003e28 <_sbrk+0x64>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e0a:	4b07      	ldr	r3, [pc, #28]	@ (8003e28 <_sbrk+0x64>)
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4413      	add	r3, r2
 8003e12:	4a05      	ldr	r2, [pc, #20]	@ (8003e28 <_sbrk+0x64>)
 8003e14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e16:	68fb      	ldr	r3, [r7, #12]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	20030000 	.word	0x20030000
 8003e24:	00000400 	.word	0x00000400
 8003e28:	20025c10 	.word	0x20025c10
 8003e2c:	20025d60 	.word	0x20025d60

08003e30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e34:	4b06      	ldr	r3, [pc, #24]	@ (8003e50 <SystemInit+0x20>)
 8003e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e3a:	4a05      	ldr	r2, [pc, #20]	@ (8003e50 <SystemInit+0x20>)
 8003e3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003e40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e44:	bf00      	nop
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	e000ed00 	.word	0xe000ed00

08003e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003e54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003e8c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003e58:	f7ff ffea 	bl	8003e30 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e5c:	480c      	ldr	r0, [pc, #48]	@ (8003e90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003e5e:	490d      	ldr	r1, [pc, #52]	@ (8003e94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003e60:	4a0d      	ldr	r2, [pc, #52]	@ (8003e98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e64:	e002      	b.n	8003e6c <LoopCopyDataInit>

08003e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e6a:	3304      	adds	r3, #4

08003e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e70:	d3f9      	bcc.n	8003e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e72:	4a0a      	ldr	r2, [pc, #40]	@ (8003e9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003e74:	4c0a      	ldr	r4, [pc, #40]	@ (8003ea0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e78:	e001      	b.n	8003e7e <LoopFillZerobss>

08003e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e7c:	3204      	adds	r2, #4

08003e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e80:	d3fb      	bcc.n	8003e7a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003e82:	f003 fc93 	bl	80077ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e86:	f7fe fdf6 	bl	8002a76 <main>
  bx  lr    
 8003e8a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003e8c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e94:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8003e98:	08009314 	.word	0x08009314
  ldr r2, =_sbss
 8003e9c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8003ea0:	20025d60 	.word	0x20025d60

08003ea4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ea4:	e7fe      	b.n	8003ea4 <ADC_IRQHandler>
	...

08003ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003eac:	4b0e      	ldr	r3, [pc, #56]	@ (8003ee8 <HAL_Init+0x40>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8003ee8 <HAL_Init+0x40>)
 8003eb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003eb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee8 <HAL_Init+0x40>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8003ee8 <HAL_Init+0x40>)
 8003ebe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ec2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ec4:	4b08      	ldr	r3, [pc, #32]	@ (8003ee8 <HAL_Init+0x40>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a07      	ldr	r2, [pc, #28]	@ (8003ee8 <HAL_Init+0x40>)
 8003eca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ece:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ed0:	2003      	movs	r0, #3
 8003ed2:	f000 f94f 	bl	8004174 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ed6:	2000      	movs	r0, #0
 8003ed8:	f000 f808 	bl	8003eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003edc:	f7ff f990 	bl	8003200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40023c00 	.word	0x40023c00

08003eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ef4:	4b12      	ldr	r3, [pc, #72]	@ (8003f40 <HAL_InitTick+0x54>)
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	4b12      	ldr	r3, [pc, #72]	@ (8003f44 <HAL_InitTick+0x58>)
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	4619      	mov	r1, r3
 8003efe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 f967 	bl	80041de <HAL_SYSTICK_Config>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e00e      	b.n	8003f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b0f      	cmp	r3, #15
 8003f1e:	d80a      	bhi.n	8003f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f20:	2200      	movs	r2, #0
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	f04f 30ff 	mov.w	r0, #4294967295
 8003f28:	f000 f92f 	bl	800418a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f2c:	4a06      	ldr	r2, [pc, #24]	@ (8003f48 <HAL_InitTick+0x5c>)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
 8003f34:	e000      	b.n	8003f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	20000010 	.word	0x20000010
 8003f44:	20000018 	.word	0x20000018
 8003f48:	20000014 	.word	0x20000014

08003f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f50:	4b06      	ldr	r3, [pc, #24]	@ (8003f6c <HAL_IncTick+0x20>)
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	461a      	mov	r2, r3
 8003f56:	4b06      	ldr	r3, [pc, #24]	@ (8003f70 <HAL_IncTick+0x24>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	4a04      	ldr	r2, [pc, #16]	@ (8003f70 <HAL_IncTick+0x24>)
 8003f5e:	6013      	str	r3, [r2, #0]
}
 8003f60:	bf00      	nop
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	20000018 	.word	0x20000018
 8003f70:	20025c14 	.word	0x20025c14

08003f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
  return uwTick;
 8003f78:	4b03      	ldr	r3, [pc, #12]	@ (8003f88 <HAL_GetTick+0x14>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	20025c14 	.word	0x20025c14

08003f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f94:	f7ff ffee 	bl	8003f74 <HAL_GetTick>
 8003f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa4:	d005      	beq.n	8003fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8003fd0 <HAL_Delay+0x44>)
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	461a      	mov	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4413      	add	r3, r2
 8003fb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003fb2:	bf00      	nop
 8003fb4:	f7ff ffde 	bl	8003f74 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d8f7      	bhi.n	8003fb4 <HAL_Delay+0x28>
  {
  }
}
 8003fc4:	bf00      	nop
 8003fc6:	bf00      	nop
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	20000018 	.word	0x20000018

08003fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8004018 <__NVIC_SetPriorityGrouping+0x44>)
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ffc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004000:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004006:	4a04      	ldr	r2, [pc, #16]	@ (8004018 <__NVIC_SetPriorityGrouping+0x44>)
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	60d3      	str	r3, [r2, #12]
}
 800400c:	bf00      	nop
 800400e:	3714      	adds	r7, #20
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	e000ed00 	.word	0xe000ed00

0800401c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004020:	4b04      	ldr	r3, [pc, #16]	@ (8004034 <__NVIC_GetPriorityGrouping+0x18>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	0a1b      	lsrs	r3, r3, #8
 8004026:	f003 0307 	and.w	r3, r3, #7
}
 800402a:	4618      	mov	r0, r3
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr
 8004034:	e000ed00 	.word	0xe000ed00

08004038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	4603      	mov	r3, r0
 8004040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004046:	2b00      	cmp	r3, #0
 8004048:	db0b      	blt.n	8004062 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800404a:	79fb      	ldrb	r3, [r7, #7]
 800404c:	f003 021f 	and.w	r2, r3, #31
 8004050:	4907      	ldr	r1, [pc, #28]	@ (8004070 <__NVIC_EnableIRQ+0x38>)
 8004052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004056:	095b      	lsrs	r3, r3, #5
 8004058:	2001      	movs	r0, #1
 800405a:	fa00 f202 	lsl.w	r2, r0, r2
 800405e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	e000e100 	.word	0xe000e100

08004074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	4603      	mov	r3, r0
 800407c:	6039      	str	r1, [r7, #0]
 800407e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004084:	2b00      	cmp	r3, #0
 8004086:	db0a      	blt.n	800409e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	b2da      	uxtb	r2, r3
 800408c:	490c      	ldr	r1, [pc, #48]	@ (80040c0 <__NVIC_SetPriority+0x4c>)
 800408e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004092:	0112      	lsls	r2, r2, #4
 8004094:	b2d2      	uxtb	r2, r2
 8004096:	440b      	add	r3, r1
 8004098:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800409c:	e00a      	b.n	80040b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	4908      	ldr	r1, [pc, #32]	@ (80040c4 <__NVIC_SetPriority+0x50>)
 80040a4:	79fb      	ldrb	r3, [r7, #7]
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	3b04      	subs	r3, #4
 80040ac:	0112      	lsls	r2, r2, #4
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	440b      	add	r3, r1
 80040b2:	761a      	strb	r2, [r3, #24]
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	e000e100 	.word	0xe000e100
 80040c4:	e000ed00 	.word	0xe000ed00

080040c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b089      	sub	sp, #36	@ 0x24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	f1c3 0307 	rsb	r3, r3, #7
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	bf28      	it	cs
 80040e6:	2304      	movcs	r3, #4
 80040e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	3304      	adds	r3, #4
 80040ee:	2b06      	cmp	r3, #6
 80040f0:	d902      	bls.n	80040f8 <NVIC_EncodePriority+0x30>
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	3b03      	subs	r3, #3
 80040f6:	e000      	b.n	80040fa <NVIC_EncodePriority+0x32>
 80040f8:	2300      	movs	r3, #0
 80040fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	fa02 f303 	lsl.w	r3, r2, r3
 8004106:	43da      	mvns	r2, r3
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	401a      	ands	r2, r3
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004110:	f04f 31ff 	mov.w	r1, #4294967295
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	fa01 f303 	lsl.w	r3, r1, r3
 800411a:	43d9      	mvns	r1, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004120:	4313      	orrs	r3, r2
         );
}
 8004122:	4618      	mov	r0, r3
 8004124:	3724      	adds	r7, #36	@ 0x24
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
	...

08004130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	3b01      	subs	r3, #1
 800413c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004140:	d301      	bcc.n	8004146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004142:	2301      	movs	r3, #1
 8004144:	e00f      	b.n	8004166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004146:	4a0a      	ldr	r2, [pc, #40]	@ (8004170 <SysTick_Config+0x40>)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3b01      	subs	r3, #1
 800414c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800414e:	210f      	movs	r1, #15
 8004150:	f04f 30ff 	mov.w	r0, #4294967295
 8004154:	f7ff ff8e 	bl	8004074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004158:	4b05      	ldr	r3, [pc, #20]	@ (8004170 <SysTick_Config+0x40>)
 800415a:	2200      	movs	r2, #0
 800415c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800415e:	4b04      	ldr	r3, [pc, #16]	@ (8004170 <SysTick_Config+0x40>)
 8004160:	2207      	movs	r2, #7
 8004162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	e000e010 	.word	0xe000e010

08004174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7ff ff29 	bl	8003fd4 <__NVIC_SetPriorityGrouping>
}
 8004182:	bf00      	nop
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800418a:	b580      	push	{r7, lr}
 800418c:	b086      	sub	sp, #24
 800418e:	af00      	add	r7, sp, #0
 8004190:	4603      	mov	r3, r0
 8004192:	60b9      	str	r1, [r7, #8]
 8004194:	607a      	str	r2, [r7, #4]
 8004196:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004198:	2300      	movs	r3, #0
 800419a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800419c:	f7ff ff3e 	bl	800401c <__NVIC_GetPriorityGrouping>
 80041a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	68b9      	ldr	r1, [r7, #8]
 80041a6:	6978      	ldr	r0, [r7, #20]
 80041a8:	f7ff ff8e 	bl	80040c8 <NVIC_EncodePriority>
 80041ac:	4602      	mov	r2, r0
 80041ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041b2:	4611      	mov	r1, r2
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7ff ff5d 	bl	8004074 <__NVIC_SetPriority>
}
 80041ba:	bf00      	nop
 80041bc:	3718      	adds	r7, #24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b082      	sub	sp, #8
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	4603      	mov	r3, r0
 80041ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7ff ff31 	bl	8004038 <__NVIC_EnableIRQ>
}
 80041d6:	bf00      	nop
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b082      	sub	sp, #8
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7ff ffa2 	bl	8004130 <SysTick_Config>
 80041ec:	4603      	mov	r3, r0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
	...

080041f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b089      	sub	sp, #36	@ 0x24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004202:	2300      	movs	r3, #0
 8004204:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004206:	2300      	movs	r3, #0
 8004208:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800420a:	2300      	movs	r3, #0
 800420c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800420e:	2300      	movs	r3, #0
 8004210:	61fb      	str	r3, [r7, #28]
 8004212:	e177      	b.n	8004504 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004214:	2201      	movs	r2, #1
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	fa02 f303 	lsl.w	r3, r2, r3
 800421c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	4013      	ands	r3, r2
 8004226:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	429a      	cmp	r2, r3
 800422e:	f040 8166 	bne.w	80044fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f003 0303 	and.w	r3, r3, #3
 800423a:	2b01      	cmp	r3, #1
 800423c:	d005      	beq.n	800424a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004246:	2b02      	cmp	r3, #2
 8004248:	d130      	bne.n	80042ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	2203      	movs	r2, #3
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	43db      	mvns	r3, r3
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	4013      	ands	r3, r2
 8004260:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	fa02 f303 	lsl.w	r3, r2, r3
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	4313      	orrs	r3, r2
 8004272:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004280:	2201      	movs	r2, #1
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	43db      	mvns	r3, r3
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	4013      	ands	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	091b      	lsrs	r3, r3, #4
 8004296:	f003 0201 	and.w	r2, r3, #1
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	fa02 f303 	lsl.w	r3, r2, r3
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f003 0303 	and.w	r3, r3, #3
 80042b4:	2b03      	cmp	r3, #3
 80042b6:	d017      	beq.n	80042e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	2203      	movs	r2, #3
 80042c4:	fa02 f303 	lsl.w	r3, r2, r3
 80042c8:	43db      	mvns	r3, r3
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	4013      	ands	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	fa02 f303 	lsl.w	r3, r2, r3
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	4313      	orrs	r3, r2
 80042e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f003 0303 	and.w	r3, r3, #3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d123      	bne.n	800433c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	08da      	lsrs	r2, r3, #3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	3208      	adds	r2, #8
 80042fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004300:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	220f      	movs	r2, #15
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	43db      	mvns	r3, r3
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	4013      	ands	r3, r2
 8004316:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	691a      	ldr	r2, [r3, #16]
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	f003 0307 	and.w	r3, r3, #7
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	fa02 f303 	lsl.w	r3, r2, r3
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	4313      	orrs	r3, r2
 800432c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	08da      	lsrs	r2, r3, #3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	3208      	adds	r2, #8
 8004336:	69b9      	ldr	r1, [r7, #24]
 8004338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	2203      	movs	r2, #3
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	43db      	mvns	r3, r3
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	4013      	ands	r3, r2
 8004352:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f003 0203 	and.w	r2, r3, #3
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	4313      	orrs	r3, r2
 8004368:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 80c0 	beq.w	80044fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800437e:	2300      	movs	r3, #0
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	4b66      	ldr	r3, [pc, #408]	@ (800451c <HAL_GPIO_Init+0x324>)
 8004384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004386:	4a65      	ldr	r2, [pc, #404]	@ (800451c <HAL_GPIO_Init+0x324>)
 8004388:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800438c:	6453      	str	r3, [r2, #68]	@ 0x44
 800438e:	4b63      	ldr	r3, [pc, #396]	@ (800451c <HAL_GPIO_Init+0x324>)
 8004390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004392:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004396:	60fb      	str	r3, [r7, #12]
 8004398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800439a:	4a61      	ldr	r2, [pc, #388]	@ (8004520 <HAL_GPIO_Init+0x328>)
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	089b      	lsrs	r3, r3, #2
 80043a0:	3302      	adds	r3, #2
 80043a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	220f      	movs	r2, #15
 80043b2:	fa02 f303 	lsl.w	r3, r2, r3
 80043b6:	43db      	mvns	r3, r3
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	4013      	ands	r3, r2
 80043bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a58      	ldr	r2, [pc, #352]	@ (8004524 <HAL_GPIO_Init+0x32c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d037      	beq.n	8004436 <HAL_GPIO_Init+0x23e>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a57      	ldr	r2, [pc, #348]	@ (8004528 <HAL_GPIO_Init+0x330>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d031      	beq.n	8004432 <HAL_GPIO_Init+0x23a>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a56      	ldr	r2, [pc, #344]	@ (800452c <HAL_GPIO_Init+0x334>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d02b      	beq.n	800442e <HAL_GPIO_Init+0x236>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a55      	ldr	r2, [pc, #340]	@ (8004530 <HAL_GPIO_Init+0x338>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d025      	beq.n	800442a <HAL_GPIO_Init+0x232>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a54      	ldr	r2, [pc, #336]	@ (8004534 <HAL_GPIO_Init+0x33c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d01f      	beq.n	8004426 <HAL_GPIO_Init+0x22e>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a53      	ldr	r2, [pc, #332]	@ (8004538 <HAL_GPIO_Init+0x340>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d019      	beq.n	8004422 <HAL_GPIO_Init+0x22a>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a52      	ldr	r2, [pc, #328]	@ (800453c <HAL_GPIO_Init+0x344>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d013      	beq.n	800441e <HAL_GPIO_Init+0x226>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a51      	ldr	r2, [pc, #324]	@ (8004540 <HAL_GPIO_Init+0x348>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d00d      	beq.n	800441a <HAL_GPIO_Init+0x222>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a50      	ldr	r2, [pc, #320]	@ (8004544 <HAL_GPIO_Init+0x34c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d007      	beq.n	8004416 <HAL_GPIO_Init+0x21e>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a4f      	ldr	r2, [pc, #316]	@ (8004548 <HAL_GPIO_Init+0x350>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d101      	bne.n	8004412 <HAL_GPIO_Init+0x21a>
 800440e:	2309      	movs	r3, #9
 8004410:	e012      	b.n	8004438 <HAL_GPIO_Init+0x240>
 8004412:	230a      	movs	r3, #10
 8004414:	e010      	b.n	8004438 <HAL_GPIO_Init+0x240>
 8004416:	2308      	movs	r3, #8
 8004418:	e00e      	b.n	8004438 <HAL_GPIO_Init+0x240>
 800441a:	2307      	movs	r3, #7
 800441c:	e00c      	b.n	8004438 <HAL_GPIO_Init+0x240>
 800441e:	2306      	movs	r3, #6
 8004420:	e00a      	b.n	8004438 <HAL_GPIO_Init+0x240>
 8004422:	2305      	movs	r3, #5
 8004424:	e008      	b.n	8004438 <HAL_GPIO_Init+0x240>
 8004426:	2304      	movs	r3, #4
 8004428:	e006      	b.n	8004438 <HAL_GPIO_Init+0x240>
 800442a:	2303      	movs	r3, #3
 800442c:	e004      	b.n	8004438 <HAL_GPIO_Init+0x240>
 800442e:	2302      	movs	r3, #2
 8004430:	e002      	b.n	8004438 <HAL_GPIO_Init+0x240>
 8004432:	2301      	movs	r3, #1
 8004434:	e000      	b.n	8004438 <HAL_GPIO_Init+0x240>
 8004436:	2300      	movs	r3, #0
 8004438:	69fa      	ldr	r2, [r7, #28]
 800443a:	f002 0203 	and.w	r2, r2, #3
 800443e:	0092      	lsls	r2, r2, #2
 8004440:	4093      	lsls	r3, r2
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	4313      	orrs	r3, r2
 8004446:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004448:	4935      	ldr	r1, [pc, #212]	@ (8004520 <HAL_GPIO_Init+0x328>)
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	089b      	lsrs	r3, r3, #2
 800444e:	3302      	adds	r3, #2
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004456:	4b3d      	ldr	r3, [pc, #244]	@ (800454c <HAL_GPIO_Init+0x354>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	43db      	mvns	r3, r3
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	4013      	ands	r3, r2
 8004464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	4313      	orrs	r3, r2
 8004478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800447a:	4a34      	ldr	r2, [pc, #208]	@ (800454c <HAL_GPIO_Init+0x354>)
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004480:	4b32      	ldr	r3, [pc, #200]	@ (800454c <HAL_GPIO_Init+0x354>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	43db      	mvns	r3, r3
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	4013      	ands	r3, r2
 800448e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044a4:	4a29      	ldr	r2, [pc, #164]	@ (800454c <HAL_GPIO_Init+0x354>)
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044aa:	4b28      	ldr	r3, [pc, #160]	@ (800454c <HAL_GPIO_Init+0x354>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	43db      	mvns	r3, r3
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	4013      	ands	r3, r2
 80044b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80044c6:	69ba      	ldr	r2, [r7, #24]
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044ce:	4a1f      	ldr	r2, [pc, #124]	@ (800454c <HAL_GPIO_Init+0x354>)
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044d4:	4b1d      	ldr	r3, [pc, #116]	@ (800454c <HAL_GPIO_Init+0x354>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	43db      	mvns	r3, r3
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	4013      	ands	r3, r2
 80044e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d003      	beq.n	80044f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044f8:	4a14      	ldr	r2, [pc, #80]	@ (800454c <HAL_GPIO_Init+0x354>)
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	3301      	adds	r3, #1
 8004502:	61fb      	str	r3, [r7, #28]
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	2b0f      	cmp	r3, #15
 8004508:	f67f ae84 	bls.w	8004214 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800450c:	bf00      	nop
 800450e:	bf00      	nop
 8004510:	3724      	adds	r7, #36	@ 0x24
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	40023800 	.word	0x40023800
 8004520:	40013800 	.word	0x40013800
 8004524:	40020000 	.word	0x40020000
 8004528:	40020400 	.word	0x40020400
 800452c:	40020800 	.word	0x40020800
 8004530:	40020c00 	.word	0x40020c00
 8004534:	40021000 	.word	0x40021000
 8004538:	40021400 	.word	0x40021400
 800453c:	40021800 	.word	0x40021800
 8004540:	40021c00 	.word	0x40021c00
 8004544:	40022000 	.word	0x40022000
 8004548:	40022400 	.word	0x40022400
 800454c:	40013c00 	.word	0x40013c00

08004550 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004550:	b480      	push	{r7}
 8004552:	b087      	sub	sp, #28
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800455a:	2300      	movs	r3, #0
 800455c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800455e:	2300      	movs	r3, #0
 8004560:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004562:	2300      	movs	r3, #0
 8004564:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004566:	2300      	movs	r3, #0
 8004568:	617b      	str	r3, [r7, #20]
 800456a:	e0d9      	b.n	8004720 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800456c:	2201      	movs	r2, #1
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	fa02 f303 	lsl.w	r3, r2, r3
 8004574:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	4013      	ands	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	429a      	cmp	r2, r3
 8004584:	f040 80c9 	bne.w	800471a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004588:	4a6b      	ldr	r2, [pc, #428]	@ (8004738 <HAL_GPIO_DeInit+0x1e8>)
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	089b      	lsrs	r3, r3, #2
 800458e:	3302      	adds	r3, #2
 8004590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004594:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f003 0303 	and.w	r3, r3, #3
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	220f      	movs	r2, #15
 80045a0:	fa02 f303 	lsl.w	r3, r2, r3
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	4013      	ands	r3, r2
 80045a8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a63      	ldr	r2, [pc, #396]	@ (800473c <HAL_GPIO_DeInit+0x1ec>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d037      	beq.n	8004622 <HAL_GPIO_DeInit+0xd2>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a62      	ldr	r2, [pc, #392]	@ (8004740 <HAL_GPIO_DeInit+0x1f0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d031      	beq.n	800461e <HAL_GPIO_DeInit+0xce>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a61      	ldr	r2, [pc, #388]	@ (8004744 <HAL_GPIO_DeInit+0x1f4>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d02b      	beq.n	800461a <HAL_GPIO_DeInit+0xca>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a60      	ldr	r2, [pc, #384]	@ (8004748 <HAL_GPIO_DeInit+0x1f8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d025      	beq.n	8004616 <HAL_GPIO_DeInit+0xc6>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a5f      	ldr	r2, [pc, #380]	@ (800474c <HAL_GPIO_DeInit+0x1fc>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d01f      	beq.n	8004612 <HAL_GPIO_DeInit+0xc2>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a5e      	ldr	r2, [pc, #376]	@ (8004750 <HAL_GPIO_DeInit+0x200>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d019      	beq.n	800460e <HAL_GPIO_DeInit+0xbe>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a5d      	ldr	r2, [pc, #372]	@ (8004754 <HAL_GPIO_DeInit+0x204>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d013      	beq.n	800460a <HAL_GPIO_DeInit+0xba>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a5c      	ldr	r2, [pc, #368]	@ (8004758 <HAL_GPIO_DeInit+0x208>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d00d      	beq.n	8004606 <HAL_GPIO_DeInit+0xb6>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a5b      	ldr	r2, [pc, #364]	@ (800475c <HAL_GPIO_DeInit+0x20c>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d007      	beq.n	8004602 <HAL_GPIO_DeInit+0xb2>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a5a      	ldr	r2, [pc, #360]	@ (8004760 <HAL_GPIO_DeInit+0x210>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d101      	bne.n	80045fe <HAL_GPIO_DeInit+0xae>
 80045fa:	2309      	movs	r3, #9
 80045fc:	e012      	b.n	8004624 <HAL_GPIO_DeInit+0xd4>
 80045fe:	230a      	movs	r3, #10
 8004600:	e010      	b.n	8004624 <HAL_GPIO_DeInit+0xd4>
 8004602:	2308      	movs	r3, #8
 8004604:	e00e      	b.n	8004624 <HAL_GPIO_DeInit+0xd4>
 8004606:	2307      	movs	r3, #7
 8004608:	e00c      	b.n	8004624 <HAL_GPIO_DeInit+0xd4>
 800460a:	2306      	movs	r3, #6
 800460c:	e00a      	b.n	8004624 <HAL_GPIO_DeInit+0xd4>
 800460e:	2305      	movs	r3, #5
 8004610:	e008      	b.n	8004624 <HAL_GPIO_DeInit+0xd4>
 8004612:	2304      	movs	r3, #4
 8004614:	e006      	b.n	8004624 <HAL_GPIO_DeInit+0xd4>
 8004616:	2303      	movs	r3, #3
 8004618:	e004      	b.n	8004624 <HAL_GPIO_DeInit+0xd4>
 800461a:	2302      	movs	r3, #2
 800461c:	e002      	b.n	8004624 <HAL_GPIO_DeInit+0xd4>
 800461e:	2301      	movs	r3, #1
 8004620:	e000      	b.n	8004624 <HAL_GPIO_DeInit+0xd4>
 8004622:	2300      	movs	r3, #0
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	f002 0203 	and.w	r2, r2, #3
 800462a:	0092      	lsls	r2, r2, #2
 800462c:	4093      	lsls	r3, r2
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	429a      	cmp	r2, r3
 8004632:	d132      	bne.n	800469a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004634:	4b4b      	ldr	r3, [pc, #300]	@ (8004764 <HAL_GPIO_DeInit+0x214>)
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	43db      	mvns	r3, r3
 800463c:	4949      	ldr	r1, [pc, #292]	@ (8004764 <HAL_GPIO_DeInit+0x214>)
 800463e:	4013      	ands	r3, r2
 8004640:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004642:	4b48      	ldr	r3, [pc, #288]	@ (8004764 <HAL_GPIO_DeInit+0x214>)
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	43db      	mvns	r3, r3
 800464a:	4946      	ldr	r1, [pc, #280]	@ (8004764 <HAL_GPIO_DeInit+0x214>)
 800464c:	4013      	ands	r3, r2
 800464e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004650:	4b44      	ldr	r3, [pc, #272]	@ (8004764 <HAL_GPIO_DeInit+0x214>)
 8004652:	68da      	ldr	r2, [r3, #12]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	43db      	mvns	r3, r3
 8004658:	4942      	ldr	r1, [pc, #264]	@ (8004764 <HAL_GPIO_DeInit+0x214>)
 800465a:	4013      	ands	r3, r2
 800465c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800465e:	4b41      	ldr	r3, [pc, #260]	@ (8004764 <HAL_GPIO_DeInit+0x214>)
 8004660:	689a      	ldr	r2, [r3, #8]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	43db      	mvns	r3, r3
 8004666:	493f      	ldr	r1, [pc, #252]	@ (8004764 <HAL_GPIO_DeInit+0x214>)
 8004668:	4013      	ands	r3, r2
 800466a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	220f      	movs	r2, #15
 8004676:	fa02 f303 	lsl.w	r3, r2, r3
 800467a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800467c:	4a2e      	ldr	r2, [pc, #184]	@ (8004738 <HAL_GPIO_DeInit+0x1e8>)
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	089b      	lsrs	r3, r3, #2
 8004682:	3302      	adds	r3, #2
 8004684:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	43da      	mvns	r2, r3
 800468c:	482a      	ldr	r0, [pc, #168]	@ (8004738 <HAL_GPIO_DeInit+0x1e8>)
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	089b      	lsrs	r3, r3, #2
 8004692:	400a      	ands	r2, r1
 8004694:	3302      	adds	r3, #2
 8004696:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	2103      	movs	r1, #3
 80046a4:	fa01 f303 	lsl.w	r3, r1, r3
 80046a8:	43db      	mvns	r3, r3
 80046aa:	401a      	ands	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	08da      	lsrs	r2, r3, #3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	3208      	adds	r2, #8
 80046b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	f003 0307 	and.w	r3, r3, #7
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	220f      	movs	r2, #15
 80046c6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ca:	43db      	mvns	r3, r3
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	08d2      	lsrs	r2, r2, #3
 80046d0:	4019      	ands	r1, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3208      	adds	r2, #8
 80046d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	2103      	movs	r1, #3
 80046e4:	fa01 f303 	lsl.w	r3, r1, r3
 80046e8:	43db      	mvns	r3, r3
 80046ea:	401a      	ands	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	2101      	movs	r1, #1
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	fa01 f303 	lsl.w	r3, r1, r3
 80046fc:	43db      	mvns	r3, r3
 80046fe:	401a      	ands	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	2103      	movs	r1, #3
 800470e:	fa01 f303 	lsl.w	r3, r1, r3
 8004712:	43db      	mvns	r3, r3
 8004714:	401a      	ands	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	3301      	adds	r3, #1
 800471e:	617b      	str	r3, [r7, #20]
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	2b0f      	cmp	r3, #15
 8004724:	f67f af22 	bls.w	800456c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004728:	bf00      	nop
 800472a:	bf00      	nop
 800472c:	371c      	adds	r7, #28
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	40013800 	.word	0x40013800
 800473c:	40020000 	.word	0x40020000
 8004740:	40020400 	.word	0x40020400
 8004744:	40020800 	.word	0x40020800
 8004748:	40020c00 	.word	0x40020c00
 800474c:	40021000 	.word	0x40021000
 8004750:	40021400 	.word	0x40021400
 8004754:	40021800 	.word	0x40021800
 8004758:	40021c00 	.word	0x40021c00
 800475c:	40022000 	.word	0x40022000
 8004760:	40022400 	.word	0x40022400
 8004764:	40013c00 	.word	0x40013c00

08004768 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	460b      	mov	r3, r1
 8004772:	807b      	strh	r3, [r7, #2]
 8004774:	4613      	mov	r3, r2
 8004776:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004778:	787b      	ldrb	r3, [r7, #1]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800477e:	887a      	ldrh	r2, [r7, #2]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004784:	e003      	b.n	800478e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004786:	887b      	ldrh	r3, [r7, #2]
 8004788:	041a      	lsls	r2, r3, #16
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	619a      	str	r2, [r3, #24]
}
 800478e:	bf00      	nop
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
	...

0800479c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	4603      	mov	r3, r0
 80047a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80047a6:	4b08      	ldr	r3, [pc, #32]	@ (80047c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047a8:	695a      	ldr	r2, [r3, #20]
 80047aa:	88fb      	ldrh	r3, [r7, #6]
 80047ac:	4013      	ands	r3, r2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d006      	beq.n	80047c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047b2:	4a05      	ldr	r2, [pc, #20]	@ (80047c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047b4:	88fb      	ldrh	r3, [r7, #6]
 80047b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047b8:	88fb      	ldrh	r3, [r7, #6]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fc fb02 	bl	8000dc4 <HAL_GPIO_EXTI_Callback>
  }
}
 80047c0:	bf00      	nop
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40013c00 	.word	0x40013c00

080047cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e12b      	b.n	8004a36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d106      	bne.n	80047f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7fe fd2c 	bl	8003250 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2224      	movs	r2, #36	@ 0x24
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0201 	bic.w	r2, r2, #1
 800480e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800481e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800482e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004830:	f001 ff82 	bl	8006738 <HAL_RCC_GetPCLK1Freq>
 8004834:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	4a81      	ldr	r2, [pc, #516]	@ (8004a40 <HAL_I2C_Init+0x274>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d807      	bhi.n	8004850 <HAL_I2C_Init+0x84>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4a80      	ldr	r2, [pc, #512]	@ (8004a44 <HAL_I2C_Init+0x278>)
 8004844:	4293      	cmp	r3, r2
 8004846:	bf94      	ite	ls
 8004848:	2301      	movls	r3, #1
 800484a:	2300      	movhi	r3, #0
 800484c:	b2db      	uxtb	r3, r3
 800484e:	e006      	b.n	800485e <HAL_I2C_Init+0x92>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4a7d      	ldr	r2, [pc, #500]	@ (8004a48 <HAL_I2C_Init+0x27c>)
 8004854:	4293      	cmp	r3, r2
 8004856:	bf94      	ite	ls
 8004858:	2301      	movls	r3, #1
 800485a:	2300      	movhi	r3, #0
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e0e7      	b.n	8004a36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4a78      	ldr	r2, [pc, #480]	@ (8004a4c <HAL_I2C_Init+0x280>)
 800486a:	fba2 2303 	umull	r2, r3, r2, r3
 800486e:	0c9b      	lsrs	r3, r3, #18
 8004870:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	430a      	orrs	r2, r1
 8004884:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	4a6a      	ldr	r2, [pc, #424]	@ (8004a40 <HAL_I2C_Init+0x274>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d802      	bhi.n	80048a0 <HAL_I2C_Init+0xd4>
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	3301      	adds	r3, #1
 800489e:	e009      	b.n	80048b4 <HAL_I2C_Init+0xe8>
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80048a6:	fb02 f303 	mul.w	r3, r2, r3
 80048aa:	4a69      	ldr	r2, [pc, #420]	@ (8004a50 <HAL_I2C_Init+0x284>)
 80048ac:	fba2 2303 	umull	r2, r3, r2, r3
 80048b0:	099b      	lsrs	r3, r3, #6
 80048b2:	3301      	adds	r3, #1
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6812      	ldr	r2, [r2, #0]
 80048b8:	430b      	orrs	r3, r1
 80048ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80048c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	495c      	ldr	r1, [pc, #368]	@ (8004a40 <HAL_I2C_Init+0x274>)
 80048d0:	428b      	cmp	r3, r1
 80048d2:	d819      	bhi.n	8004908 <HAL_I2C_Init+0x13c>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	1e59      	subs	r1, r3, #1
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	fbb1 f3f3 	udiv	r3, r1, r3
 80048e2:	1c59      	adds	r1, r3, #1
 80048e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80048e8:	400b      	ands	r3, r1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <HAL_I2C_Init+0x138>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	1e59      	subs	r1, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80048fc:	3301      	adds	r3, #1
 80048fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004902:	e051      	b.n	80049a8 <HAL_I2C_Init+0x1dc>
 8004904:	2304      	movs	r3, #4
 8004906:	e04f      	b.n	80049a8 <HAL_I2C_Init+0x1dc>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d111      	bne.n	8004934 <HAL_I2C_Init+0x168>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	1e58      	subs	r0, r3, #1
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6859      	ldr	r1, [r3, #4]
 8004918:	460b      	mov	r3, r1
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	440b      	add	r3, r1
 800491e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004922:	3301      	adds	r3, #1
 8004924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004928:	2b00      	cmp	r3, #0
 800492a:	bf0c      	ite	eq
 800492c:	2301      	moveq	r3, #1
 800492e:	2300      	movne	r3, #0
 8004930:	b2db      	uxtb	r3, r3
 8004932:	e012      	b.n	800495a <HAL_I2C_Init+0x18e>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	1e58      	subs	r0, r3, #1
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6859      	ldr	r1, [r3, #4]
 800493c:	460b      	mov	r3, r1
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	440b      	add	r3, r1
 8004942:	0099      	lsls	r1, r3, #2
 8004944:	440b      	add	r3, r1
 8004946:	fbb0 f3f3 	udiv	r3, r0, r3
 800494a:	3301      	adds	r3, #1
 800494c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004950:	2b00      	cmp	r3, #0
 8004952:	bf0c      	ite	eq
 8004954:	2301      	moveq	r3, #1
 8004956:	2300      	movne	r3, #0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <HAL_I2C_Init+0x196>
 800495e:	2301      	movs	r3, #1
 8004960:	e022      	b.n	80049a8 <HAL_I2C_Init+0x1dc>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10e      	bne.n	8004988 <HAL_I2C_Init+0x1bc>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	1e58      	subs	r0, r3, #1
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6859      	ldr	r1, [r3, #4]
 8004972:	460b      	mov	r3, r1
 8004974:	005b      	lsls	r3, r3, #1
 8004976:	440b      	add	r3, r1
 8004978:	fbb0 f3f3 	udiv	r3, r0, r3
 800497c:	3301      	adds	r3, #1
 800497e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004982:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004986:	e00f      	b.n	80049a8 <HAL_I2C_Init+0x1dc>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	1e58      	subs	r0, r3, #1
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6859      	ldr	r1, [r3, #4]
 8004990:	460b      	mov	r3, r1
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	440b      	add	r3, r1
 8004996:	0099      	lsls	r1, r3, #2
 8004998:	440b      	add	r3, r1
 800499a:	fbb0 f3f3 	udiv	r3, r0, r3
 800499e:	3301      	adds	r3, #1
 80049a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049a8:	6879      	ldr	r1, [r7, #4]
 80049aa:	6809      	ldr	r1, [r1, #0]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	69da      	ldr	r2, [r3, #28]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	431a      	orrs	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80049d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6911      	ldr	r1, [r2, #16]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	68d2      	ldr	r2, [r2, #12]
 80049e2:	4311      	orrs	r1, r2
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	6812      	ldr	r2, [r2, #0]
 80049e8:	430b      	orrs	r3, r1
 80049ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	695a      	ldr	r2, [r3, #20]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	431a      	orrs	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0201 	orr.w	r2, r2, #1
 8004a16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2220      	movs	r2, #32
 8004a22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	000186a0 	.word	0x000186a0
 8004a44:	001e847f 	.word	0x001e847f
 8004a48:	003d08ff 	.word	0x003d08ff
 8004a4c:	431bde83 	.word	0x431bde83
 8004a50:	10624dd3 	.word	0x10624dd3

08004a54 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b088      	sub	sp, #32
 8004a58:	af02      	add	r7, sp, #8
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	4608      	mov	r0, r1
 8004a5e:	4611      	mov	r1, r2
 8004a60:	461a      	mov	r2, r3
 8004a62:	4603      	mov	r3, r0
 8004a64:	817b      	strh	r3, [r7, #10]
 8004a66:	460b      	mov	r3, r1
 8004a68:	813b      	strh	r3, [r7, #8]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a6e:	f7ff fa81 	bl	8003f74 <HAL_GetTick>
 8004a72:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b20      	cmp	r3, #32
 8004a7e:	f040 80d9 	bne.w	8004c34 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	2319      	movs	r3, #25
 8004a88:	2201      	movs	r2, #1
 8004a8a:	496d      	ldr	r1, [pc, #436]	@ (8004c40 <HAL_I2C_Mem_Write+0x1ec>)
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 fc8b 	bl	80053a8 <I2C_WaitOnFlagUntilTimeout>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004a98:	2302      	movs	r3, #2
 8004a9a:	e0cc      	b.n	8004c36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d101      	bne.n	8004aaa <HAL_I2C_Mem_Write+0x56>
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	e0c5      	b.n	8004c36 <HAL_I2C_Mem_Write+0x1e2>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d007      	beq.n	8004ad0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f042 0201 	orr.w	r2, r2, #1
 8004ace:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ade:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2221      	movs	r2, #33	@ 0x21
 8004ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2240      	movs	r2, #64	@ 0x40
 8004aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6a3a      	ldr	r2, [r7, #32]
 8004afa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004b00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	4a4d      	ldr	r2, [pc, #308]	@ (8004c44 <HAL_I2C_Mem_Write+0x1f0>)
 8004b10:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b12:	88f8      	ldrh	r0, [r7, #6]
 8004b14:	893a      	ldrh	r2, [r7, #8]
 8004b16:	8979      	ldrh	r1, [r7, #10]
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	9301      	str	r3, [sp, #4]
 8004b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	4603      	mov	r3, r0
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 fac2 	bl	80050ac <I2C_RequestMemoryWrite>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d052      	beq.n	8004bd4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e081      	b.n	8004c36 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 fd50 	bl	80055dc <I2C_WaitOnTXEFlagUntilTimeout>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00d      	beq.n	8004b5e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d107      	bne.n	8004b5a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e06b      	b.n	8004c36 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b62:	781a      	ldrb	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6e:	1c5a      	adds	r2, r3, #1
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	3b01      	subs	r3, #1
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	f003 0304 	and.w	r3, r3, #4
 8004b98:	2b04      	cmp	r3, #4
 8004b9a:	d11b      	bne.n	8004bd4 <HAL_I2C_Mem_Write+0x180>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d017      	beq.n	8004bd4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba8:	781a      	ldrb	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb4:	1c5a      	adds	r2, r3, #1
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1aa      	bne.n	8004b32 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f000 fd43 	bl	800566c <I2C_WaitOnBTFFlagUntilTimeout>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00d      	beq.n	8004c08 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf0:	2b04      	cmp	r3, #4
 8004bf2:	d107      	bne.n	8004c04 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c02:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e016      	b.n	8004c36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004c30:	2300      	movs	r3, #0
 8004c32:	e000      	b.n	8004c36 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004c34:	2302      	movs	r3, #2
  }
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3718      	adds	r7, #24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	00100002 	.word	0x00100002
 8004c44:	ffff0000 	.word	0xffff0000

08004c48 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b08c      	sub	sp, #48	@ 0x30
 8004c4c:	af02      	add	r7, sp, #8
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	4608      	mov	r0, r1
 8004c52:	4611      	mov	r1, r2
 8004c54:	461a      	mov	r2, r3
 8004c56:	4603      	mov	r3, r0
 8004c58:	817b      	strh	r3, [r7, #10]
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	813b      	strh	r3, [r7, #8]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c62:	f7ff f987 	bl	8003f74 <HAL_GetTick>
 8004c66:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b20      	cmp	r3, #32
 8004c72:	f040 8214 	bne.w	800509e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	2319      	movs	r3, #25
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	497b      	ldr	r1, [pc, #492]	@ (8004e6c <HAL_I2C_Mem_Read+0x224>)
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 fb91 	bl	80053a8 <I2C_WaitOnFlagUntilTimeout>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	e207      	b.n	80050a0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d101      	bne.n	8004c9e <HAL_I2C_Mem_Read+0x56>
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	e200      	b.n	80050a0 <HAL_I2C_Mem_Read+0x458>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d007      	beq.n	8004cc4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f042 0201 	orr.w	r2, r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2222      	movs	r2, #34	@ 0x22
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2240      	movs	r2, #64	@ 0x40
 8004ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004cf4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4a5b      	ldr	r2, [pc, #364]	@ (8004e70 <HAL_I2C_Mem_Read+0x228>)
 8004d04:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d06:	88f8      	ldrh	r0, [r7, #6]
 8004d08:	893a      	ldrh	r2, [r7, #8]
 8004d0a:	8979      	ldrh	r1, [r7, #10]
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0e:	9301      	str	r3, [sp, #4]
 8004d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	4603      	mov	r3, r0
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 fa5e 	bl	80051d8 <I2C_RequestMemoryRead>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e1bc      	b.n	80050a0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d113      	bne.n	8004d56 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d2e:	2300      	movs	r3, #0
 8004d30:	623b      	str	r3, [r7, #32]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	623b      	str	r3, [r7, #32]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	623b      	str	r3, [r7, #32]
 8004d42:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	e190      	b.n	8005078 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d11b      	bne.n	8004d96 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d6e:	2300      	movs	r3, #0
 8004d70:	61fb      	str	r3, [r7, #28]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	61fb      	str	r3, [r7, #28]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	61fb      	str	r3, [r7, #28]
 8004d82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d92:	601a      	str	r2, [r3, #0]
 8004d94:	e170      	b.n	8005078 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d11b      	bne.n	8004dd6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	61bb      	str	r3, [r7, #24]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	61bb      	str	r3, [r7, #24]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	61bb      	str	r3, [r7, #24]
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	e150      	b.n	8005078 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	617b      	str	r3, [r7, #20]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	617b      	str	r3, [r7, #20]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	617b      	str	r3, [r7, #20]
 8004dea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004dec:	e144      	b.n	8005078 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004df2:	2b03      	cmp	r3, #3
 8004df4:	f200 80f1 	bhi.w	8004fda <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d123      	bne.n	8004e48 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e02:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f000 fc79 	bl	80056fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d001      	beq.n	8004e14 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e145      	b.n	80050a0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	691a      	ldr	r2, [r3, #16]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1e:	b2d2      	uxtb	r2, r2
 8004e20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e26:	1c5a      	adds	r2, r3, #1
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e30:	3b01      	subs	r3, #1
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004e46:	e117      	b.n	8005078 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d14e      	bne.n	8004eee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e56:	2200      	movs	r2, #0
 8004e58:	4906      	ldr	r1, [pc, #24]	@ (8004e74 <HAL_I2C_Mem_Read+0x22c>)
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 faa4 	bl	80053a8 <I2C_WaitOnFlagUntilTimeout>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d008      	beq.n	8004e78 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e11a      	b.n	80050a0 <HAL_I2C_Mem_Read+0x458>
 8004e6a:	bf00      	nop
 8004e6c:	00100002 	.word	0x00100002
 8004e70:	ffff0000 	.word	0xffff0000
 8004e74:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	691a      	ldr	r2, [r3, #16]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e92:	b2d2      	uxtb	r2, r2
 8004e94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9a:	1c5a      	adds	r2, r3, #1
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	691a      	ldr	r2, [r3, #16]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec4:	b2d2      	uxtb	r2, r2
 8004ec6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ecc:	1c5a      	adds	r2, r3, #1
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004eec:	e0c4      	b.n	8005078 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	496c      	ldr	r1, [pc, #432]	@ (80050a8 <HAL_I2C_Mem_Read+0x460>)
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f000 fa55 	bl	80053a8 <I2C_WaitOnFlagUntilTimeout>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d001      	beq.n	8004f08 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e0cb      	b.n	80050a0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	691a      	ldr	r2, [r3, #16]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2a:	1c5a      	adds	r2, r3, #1
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f34:	3b01      	subs	r3, #1
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	3b01      	subs	r3, #1
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4c:	9300      	str	r3, [sp, #0]
 8004f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f50:	2200      	movs	r2, #0
 8004f52:	4955      	ldr	r1, [pc, #340]	@ (80050a8 <HAL_I2C_Mem_Read+0x460>)
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f000 fa27 	bl	80053a8 <I2C_WaitOnFlagUntilTimeout>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d001      	beq.n	8004f64 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e09d      	b.n	80050a0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	691a      	ldr	r2, [r3, #16]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7e:	b2d2      	uxtb	r2, r2
 8004f80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f86:	1c5a      	adds	r2, r3, #1
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f90:	3b01      	subs	r3, #1
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	691a      	ldr	r2, [r3, #16]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb0:	b2d2      	uxtb	r2, r2
 8004fb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb8:	1c5a      	adds	r2, r3, #1
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004fd8:	e04e      	b.n	8005078 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fdc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f000 fb8c 	bl	80056fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e058      	b.n	80050a0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	691a      	ldr	r2, [r3, #16]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff8:	b2d2      	uxtb	r2, r2
 8004ffa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005000:	1c5a      	adds	r2, r3, #1
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800500a:	3b01      	subs	r3, #1
 800500c:	b29a      	uxth	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005016:	b29b      	uxth	r3, r3
 8005018:	3b01      	subs	r3, #1
 800501a:	b29a      	uxth	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	f003 0304 	and.w	r3, r3, #4
 800502a:	2b04      	cmp	r3, #4
 800502c:	d124      	bne.n	8005078 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005032:	2b03      	cmp	r3, #3
 8005034:	d107      	bne.n	8005046 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005044:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	691a      	ldr	r2, [r3, #16]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005050:	b2d2      	uxtb	r2, r2
 8005052:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005062:	3b01      	subs	r3, #1
 8005064:	b29a      	uxth	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800506e:	b29b      	uxth	r3, r3
 8005070:	3b01      	subs	r3, #1
 8005072:	b29a      	uxth	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800507c:	2b00      	cmp	r3, #0
 800507e:	f47f aeb6 	bne.w	8004dee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2220      	movs	r2, #32
 8005086:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800509a:	2300      	movs	r3, #0
 800509c:	e000      	b.n	80050a0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800509e:	2302      	movs	r3, #2
  }
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3728      	adds	r7, #40	@ 0x28
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	00010004 	.word	0x00010004

080050ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b088      	sub	sp, #32
 80050b0:	af02      	add	r7, sp, #8
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	4608      	mov	r0, r1
 80050b6:	4611      	mov	r1, r2
 80050b8:	461a      	mov	r2, r3
 80050ba:	4603      	mov	r3, r0
 80050bc:	817b      	strh	r3, [r7, #10]
 80050be:	460b      	mov	r3, r1
 80050c0:	813b      	strh	r3, [r7, #8]
 80050c2:	4613      	mov	r3, r2
 80050c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	2200      	movs	r2, #0
 80050de:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f000 f960 	bl	80053a8 <I2C_WaitOnFlagUntilTimeout>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00d      	beq.n	800510a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050fc:	d103      	bne.n	8005106 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005104:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e05f      	b.n	80051ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800510a:	897b      	ldrh	r3, [r7, #10]
 800510c:	b2db      	uxtb	r3, r3
 800510e:	461a      	mov	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005118:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800511a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511c:	6a3a      	ldr	r2, [r7, #32]
 800511e:	492d      	ldr	r1, [pc, #180]	@ (80051d4 <I2C_RequestMemoryWrite+0x128>)
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f000 f9bb 	bl	800549c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d001      	beq.n	8005130 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e04c      	b.n	80051ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005130:	2300      	movs	r3, #0
 8005132:	617b      	str	r3, [r7, #20]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	617b      	str	r3, [r7, #20]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	617b      	str	r3, [r7, #20]
 8005144:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005148:	6a39      	ldr	r1, [r7, #32]
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f000 fa46 	bl	80055dc <I2C_WaitOnTXEFlagUntilTimeout>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00d      	beq.n	8005172 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515a:	2b04      	cmp	r3, #4
 800515c:	d107      	bne.n	800516e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800516c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e02b      	b.n	80051ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005172:	88fb      	ldrh	r3, [r7, #6]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d105      	bne.n	8005184 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005178:	893b      	ldrh	r3, [r7, #8]
 800517a:	b2da      	uxtb	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	611a      	str	r2, [r3, #16]
 8005182:	e021      	b.n	80051c8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005184:	893b      	ldrh	r3, [r7, #8]
 8005186:	0a1b      	lsrs	r3, r3, #8
 8005188:	b29b      	uxth	r3, r3
 800518a:	b2da      	uxtb	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005192:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005194:	6a39      	ldr	r1, [r7, #32]
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f000 fa20 	bl	80055dc <I2C_WaitOnTXEFlagUntilTimeout>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00d      	beq.n	80051be <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	d107      	bne.n	80051ba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e005      	b.n	80051ca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051be:	893b      	ldrh	r3, [r7, #8]
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3718      	adds	r7, #24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	00010002 	.word	0x00010002

080051d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b088      	sub	sp, #32
 80051dc:	af02      	add	r7, sp, #8
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	4608      	mov	r0, r1
 80051e2:	4611      	mov	r1, r2
 80051e4:	461a      	mov	r2, r3
 80051e6:	4603      	mov	r3, r0
 80051e8:	817b      	strh	r3, [r7, #10]
 80051ea:	460b      	mov	r3, r1
 80051ec:	813b      	strh	r3, [r7, #8]
 80051ee:	4613      	mov	r3, r2
 80051f0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005200:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005210:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	6a3b      	ldr	r3, [r7, #32]
 8005218:	2200      	movs	r2, #0
 800521a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f000 f8c2 	bl	80053a8 <I2C_WaitOnFlagUntilTimeout>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00d      	beq.n	8005246 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005234:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005238:	d103      	bne.n	8005242 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005240:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e0aa      	b.n	800539c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005246:	897b      	ldrh	r3, [r7, #10]
 8005248:	b2db      	uxtb	r3, r3
 800524a:	461a      	mov	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005254:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005258:	6a3a      	ldr	r2, [r7, #32]
 800525a:	4952      	ldr	r1, [pc, #328]	@ (80053a4 <I2C_RequestMemoryRead+0x1cc>)
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f000 f91d 	bl	800549c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d001      	beq.n	800526c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e097      	b.n	800539c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800526c:	2300      	movs	r3, #0
 800526e:	617b      	str	r3, [r7, #20]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	617b      	str	r3, [r7, #20]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	617b      	str	r3, [r7, #20]
 8005280:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005282:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005284:	6a39      	ldr	r1, [r7, #32]
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f000 f9a8 	bl	80055dc <I2C_WaitOnTXEFlagUntilTimeout>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00d      	beq.n	80052ae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005296:	2b04      	cmp	r3, #4
 8005298:	d107      	bne.n	80052aa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e076      	b.n	800539c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052ae:	88fb      	ldrh	r3, [r7, #6]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d105      	bne.n	80052c0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052b4:	893b      	ldrh	r3, [r7, #8]
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	611a      	str	r2, [r3, #16]
 80052be:	e021      	b.n	8005304 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80052c0:	893b      	ldrh	r3, [r7, #8]
 80052c2:	0a1b      	lsrs	r3, r3, #8
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	b2da      	uxtb	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052d0:	6a39      	ldr	r1, [r7, #32]
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 f982 	bl	80055dc <I2C_WaitOnTXEFlagUntilTimeout>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00d      	beq.n	80052fa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e2:	2b04      	cmp	r3, #4
 80052e4:	d107      	bne.n	80052f6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e050      	b.n	800539c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052fa:	893b      	ldrh	r3, [r7, #8]
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005304:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005306:	6a39      	ldr	r1, [r7, #32]
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f000 f967 	bl	80055dc <I2C_WaitOnTXEFlagUntilTimeout>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00d      	beq.n	8005330 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005318:	2b04      	cmp	r3, #4
 800531a:	d107      	bne.n	800532c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800532a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e035      	b.n	800539c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800533e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	6a3b      	ldr	r3, [r7, #32]
 8005346:	2200      	movs	r2, #0
 8005348:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f000 f82b 	bl	80053a8 <I2C_WaitOnFlagUntilTimeout>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00d      	beq.n	8005374 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005362:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005366:	d103      	bne.n	8005370 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800536e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e013      	b.n	800539c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005374:	897b      	ldrh	r3, [r7, #10]
 8005376:	b2db      	uxtb	r3, r3
 8005378:	f043 0301 	orr.w	r3, r3, #1
 800537c:	b2da      	uxtb	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005386:	6a3a      	ldr	r2, [r7, #32]
 8005388:	4906      	ldr	r1, [pc, #24]	@ (80053a4 <I2C_RequestMemoryRead+0x1cc>)
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 f886 	bl	800549c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e000      	b.n	800539c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3718      	adds	r7, #24
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	00010002 	.word	0x00010002

080053a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	603b      	str	r3, [r7, #0]
 80053b4:	4613      	mov	r3, r2
 80053b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053b8:	e048      	b.n	800544c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c0:	d044      	beq.n	800544c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053c2:	f7fe fdd7 	bl	8003f74 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d302      	bcc.n	80053d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d139      	bne.n	800544c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	0c1b      	lsrs	r3, r3, #16
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d10d      	bne.n	80053fe <I2C_WaitOnFlagUntilTimeout+0x56>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	43da      	mvns	r2, r3
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	4013      	ands	r3, r2
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	bf0c      	ite	eq
 80053f4:	2301      	moveq	r3, #1
 80053f6:	2300      	movne	r3, #0
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	461a      	mov	r2, r3
 80053fc:	e00c      	b.n	8005418 <I2C_WaitOnFlagUntilTimeout+0x70>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	43da      	mvns	r2, r3
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	4013      	ands	r3, r2
 800540a:	b29b      	uxth	r3, r3
 800540c:	2b00      	cmp	r3, #0
 800540e:	bf0c      	ite	eq
 8005410:	2301      	moveq	r3, #1
 8005412:	2300      	movne	r3, #0
 8005414:	b2db      	uxtb	r3, r3
 8005416:	461a      	mov	r2, r3
 8005418:	79fb      	ldrb	r3, [r7, #7]
 800541a:	429a      	cmp	r2, r3
 800541c:	d116      	bne.n	800544c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2220      	movs	r2, #32
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005438:	f043 0220 	orr.w	r2, r3, #32
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e023      	b.n	8005494 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	0c1b      	lsrs	r3, r3, #16
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b01      	cmp	r3, #1
 8005454:	d10d      	bne.n	8005472 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	695b      	ldr	r3, [r3, #20]
 800545c:	43da      	mvns	r2, r3
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	4013      	ands	r3, r2
 8005462:	b29b      	uxth	r3, r3
 8005464:	2b00      	cmp	r3, #0
 8005466:	bf0c      	ite	eq
 8005468:	2301      	moveq	r3, #1
 800546a:	2300      	movne	r3, #0
 800546c:	b2db      	uxtb	r3, r3
 800546e:	461a      	mov	r2, r3
 8005470:	e00c      	b.n	800548c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	43da      	mvns	r2, r3
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	4013      	ands	r3, r2
 800547e:	b29b      	uxth	r3, r3
 8005480:	2b00      	cmp	r3, #0
 8005482:	bf0c      	ite	eq
 8005484:	2301      	moveq	r3, #1
 8005486:	2300      	movne	r3, #0
 8005488:	b2db      	uxtb	r3, r3
 800548a:	461a      	mov	r2, r3
 800548c:	79fb      	ldrb	r3, [r7, #7]
 800548e:	429a      	cmp	r2, r3
 8005490:	d093      	beq.n	80053ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
 80054a8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054aa:	e071      	b.n	8005590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054ba:	d123      	bne.n	8005504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054ca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80054d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2220      	movs	r2, #32
 80054e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f0:	f043 0204 	orr.w	r2, r3, #4
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e067      	b.n	80055d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550a:	d041      	beq.n	8005590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800550c:	f7fe fd32 	bl	8003f74 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	429a      	cmp	r2, r3
 800551a:	d302      	bcc.n	8005522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d136      	bne.n	8005590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	0c1b      	lsrs	r3, r3, #16
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b01      	cmp	r3, #1
 800552a:	d10c      	bne.n	8005546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	43da      	mvns	r2, r3
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	4013      	ands	r3, r2
 8005538:	b29b      	uxth	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	bf14      	ite	ne
 800553e:	2301      	movne	r3, #1
 8005540:	2300      	moveq	r3, #0
 8005542:	b2db      	uxtb	r3, r3
 8005544:	e00b      	b.n	800555e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	43da      	mvns	r2, r3
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	4013      	ands	r3, r2
 8005552:	b29b      	uxth	r3, r3
 8005554:	2b00      	cmp	r3, #0
 8005556:	bf14      	ite	ne
 8005558:	2301      	movne	r3, #1
 800555a:	2300      	moveq	r3, #0
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d016      	beq.n	8005590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2220      	movs	r2, #32
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800557c:	f043 0220 	orr.w	r2, r3, #32
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e021      	b.n	80055d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	0c1b      	lsrs	r3, r3, #16
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b01      	cmp	r3, #1
 8005598:	d10c      	bne.n	80055b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	43da      	mvns	r2, r3
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	4013      	ands	r3, r2
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	bf14      	ite	ne
 80055ac:	2301      	movne	r3, #1
 80055ae:	2300      	moveq	r3, #0
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	e00b      	b.n	80055cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	43da      	mvns	r2, r3
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	4013      	ands	r3, r2
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	bf14      	ite	ne
 80055c6:	2301      	movne	r3, #1
 80055c8:	2300      	moveq	r3, #0
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f47f af6d 	bne.w	80054ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055e8:	e034      	b.n	8005654 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055ea:	68f8      	ldr	r0, [r7, #12]
 80055ec:	f000 f8e3 	bl	80057b6 <I2C_IsAcknowledgeFailed>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e034      	b.n	8005664 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005600:	d028      	beq.n	8005654 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005602:	f7fe fcb7 	bl	8003f74 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	429a      	cmp	r2, r3
 8005610:	d302      	bcc.n	8005618 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d11d      	bne.n	8005654 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005622:	2b80      	cmp	r3, #128	@ 0x80
 8005624:	d016      	beq.n	8005654 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2220      	movs	r2, #32
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005640:	f043 0220 	orr.w	r2, r3, #32
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e007      	b.n	8005664 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800565e:	2b80      	cmp	r3, #128	@ 0x80
 8005660:	d1c3      	bne.n	80055ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005678:	e034      	b.n	80056e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f000 f89b 	bl	80057b6 <I2C_IsAcknowledgeFailed>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e034      	b.n	80056f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005690:	d028      	beq.n	80056e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005692:	f7fe fc6f 	bl	8003f74 <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d302      	bcc.n	80056a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d11d      	bne.n	80056e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	f003 0304 	and.w	r3, r3, #4
 80056b2:	2b04      	cmp	r3, #4
 80056b4:	d016      	beq.n	80056e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2220      	movs	r2, #32
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d0:	f043 0220 	orr.w	r2, r3, #32
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e007      	b.n	80056f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	f003 0304 	and.w	r3, r3, #4
 80056ee:	2b04      	cmp	r3, #4
 80056f0:	d1c3      	bne.n	800567a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005708:	e049      	b.n	800579e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	695b      	ldr	r3, [r3, #20]
 8005710:	f003 0310 	and.w	r3, r3, #16
 8005714:	2b10      	cmp	r3, #16
 8005716:	d119      	bne.n	800574c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f06f 0210 	mvn.w	r2, #16
 8005720:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2220      	movs	r2, #32
 800572c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e030      	b.n	80057ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800574c:	f7fe fc12 	bl	8003f74 <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	429a      	cmp	r2, r3
 800575a:	d302      	bcc.n	8005762 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d11d      	bne.n	800579e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800576c:	2b40      	cmp	r3, #64	@ 0x40
 800576e:	d016      	beq.n	800579e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2220      	movs	r2, #32
 800577a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578a:	f043 0220 	orr.w	r2, r3, #32
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e007      	b.n	80057ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057a8:	2b40      	cmp	r3, #64	@ 0x40
 80057aa:	d1ae      	bne.n	800570a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b083      	sub	sp, #12
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057cc:	d11b      	bne.n	8005806 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80057d6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2220      	movs	r2, #32
 80057e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f2:	f043 0204 	orr.w	r2, r3, #4
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e000      	b.n	8005808 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b20      	cmp	r3, #32
 8005828:	d129      	bne.n	800587e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2224      	movs	r2, #36	@ 0x24
 800582e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f022 0201 	bic.w	r2, r2, #1
 8005840:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f022 0210 	bic.w	r2, r2, #16
 8005850:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	683a      	ldr	r2, [r7, #0]
 800585e:	430a      	orrs	r2, r1
 8005860:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f042 0201 	orr.w	r2, r2, #1
 8005870:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2220      	movs	r2, #32
 8005876:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800587a:	2300      	movs	r3, #0
 800587c:	e000      	b.n	8005880 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800587e:	2302      	movs	r3, #2
  }
}
 8005880:	4618      	mov	r0, r3
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005896:	2300      	movs	r3, #0
 8005898:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b20      	cmp	r3, #32
 80058a4:	d12a      	bne.n	80058fc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2224      	movs	r2, #36	@ 0x24
 80058aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f022 0201 	bic.w	r2, r2, #1
 80058bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80058c6:	89fb      	ldrh	r3, [r7, #14]
 80058c8:	f023 030f 	bic.w	r3, r3, #15
 80058cc:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	89fb      	ldrh	r3, [r7, #14]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	89fa      	ldrh	r2, [r7, #14]
 80058de:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f042 0201 	orr.w	r2, r2, #1
 80058ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2220      	movs	r2, #32
 80058f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80058f8:	2300      	movs	r3, #0
 80058fa:	e000      	b.n	80058fe <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80058fc:	2302      	movs	r3, #2
  }
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
	...

0800590c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e0bf      	b.n	8005a9e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d106      	bne.n	8005938 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f7fd fcf6 	bl	8003324 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2202      	movs	r2, #2
 800593c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	699a      	ldr	r2, [r3, #24]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800594e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6999      	ldr	r1, [r3, #24]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005964:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	430a      	orrs	r2, r1
 8005972:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	6899      	ldr	r1, [r3, #8]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	4b4a      	ldr	r3, [pc, #296]	@ (8005aa8 <HAL_LTDC_Init+0x19c>)
 8005980:	400b      	ands	r3, r1
 8005982:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	695b      	ldr	r3, [r3, #20]
 8005988:	041b      	lsls	r3, r3, #16
 800598a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6899      	ldr	r1, [r3, #8]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	699a      	ldr	r2, [r3, #24]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	431a      	orrs	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	430a      	orrs	r2, r1
 80059a0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68d9      	ldr	r1, [r3, #12]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	4b3e      	ldr	r3, [pc, #248]	@ (8005aa8 <HAL_LTDC_Init+0x19c>)
 80059ae:	400b      	ands	r3, r1
 80059b0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	041b      	lsls	r3, r3, #16
 80059b8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68d9      	ldr	r1, [r3, #12]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a1a      	ldr	r2, [r3, #32]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	431a      	orrs	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	430a      	orrs	r2, r1
 80059ce:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6919      	ldr	r1, [r3, #16]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	4b33      	ldr	r3, [pc, #204]	@ (8005aa8 <HAL_LTDC_Init+0x19c>)
 80059dc:	400b      	ands	r3, r1
 80059de:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e4:	041b      	lsls	r3, r3, #16
 80059e6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6919      	ldr	r1, [r3, #16]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	431a      	orrs	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	6959      	ldr	r1, [r3, #20]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	4b27      	ldr	r3, [pc, #156]	@ (8005aa8 <HAL_LTDC_Init+0x19c>)
 8005a0a:	400b      	ands	r3, r1
 8005a0c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a12:	041b      	lsls	r3, r3, #16
 8005a14:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6959      	ldr	r1, [r3, #20]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	431a      	orrs	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005a32:	021b      	lsls	r3, r3, #8
 8005a34:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005a3c:	041b      	lsls	r3, r3, #16
 8005a3e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005a4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8005a62:	431a      	orrs	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 0206 	orr.w	r2, r2, #6
 8005a7a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	699a      	ldr	r2, [r3, #24]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f042 0201 	orr.w	r2, r2, #1
 8005a8a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	f000f800 	.word	0xf000f800

08005aac <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005aac:	b5b0      	push	{r4, r5, r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d101      	bne.n	8005ac6 <HAL_LTDC_ConfigLayer+0x1a>
 8005ac2:	2302      	movs	r3, #2
 8005ac4:	e02c      	b.n	8005b20 <HAL_LTDC_ConfigLayer+0x74>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2202      	movs	r2, #2
 8005ad2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2134      	movs	r1, #52	@ 0x34
 8005adc:	fb01 f303 	mul.w	r3, r1, r3
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	4614      	mov	r4, r2
 8005aea:	461d      	mov	r5, r3
 8005aec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005aee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005af0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005af2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005af8:	682b      	ldr	r3, [r5, #0]
 8005afa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	68b9      	ldr	r1, [r7, #8]
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f000 f811 	bl	8005b28 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bdb0      	pop	{r4, r5, r7, pc}

08005b28 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b089      	sub	sp, #36	@ 0x24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	0c1b      	lsrs	r3, r3, #16
 8005b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b44:	4413      	add	r3, r2
 8005b46:	041b      	lsls	r3, r3, #16
 8005b48:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	461a      	mov	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	01db      	lsls	r3, r3, #7
 8005b54:	4413      	add	r3, r2
 8005b56:	3384      	adds	r3, #132	@ 0x84
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	6812      	ldr	r2, [r2, #0]
 8005b5e:	4611      	mov	r1, r2
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	01d2      	lsls	r2, r2, #7
 8005b64:	440a      	add	r2, r1
 8005b66:	3284      	adds	r2, #132	@ 0x84
 8005b68:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005b6c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	0c1b      	lsrs	r3, r3, #16
 8005b7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005b7e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005b80:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4619      	mov	r1, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	01db      	lsls	r3, r3, #7
 8005b8c:	440b      	add	r3, r1
 8005b8e:	3384      	adds	r3, #132	@ 0x84
 8005b90:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005b96:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	68da      	ldr	r2, [r3, #12]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ba6:	4413      	add	r3, r2
 8005ba8:	041b      	lsls	r3, r3, #16
 8005baa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	01db      	lsls	r3, r3, #7
 8005bb6:	4413      	add	r3, r2
 8005bb8:	3384      	adds	r3, #132	@ 0x84
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	6812      	ldr	r2, [r2, #0]
 8005bc0:	4611      	mov	r1, r2
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	01d2      	lsls	r2, r2, #7
 8005bc6:	440a      	add	r2, r1
 8005bc8:	3284      	adds	r2, #132	@ 0x84
 8005bca:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005bce:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bde:	4413      	add	r3, r2
 8005be0:	1c5a      	adds	r2, r3, #1
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4619      	mov	r1, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	01db      	lsls	r3, r3, #7
 8005bec:	440b      	add	r3, r1
 8005bee:	3384      	adds	r3, #132	@ 0x84
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	01db      	lsls	r3, r3, #7
 8005c02:	4413      	add	r3, r2
 8005c04:	3384      	adds	r3, #132	@ 0x84
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	6812      	ldr	r2, [r2, #0]
 8005c0c:	4611      	mov	r1, r2
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	01d2      	lsls	r2, r2, #7
 8005c12:	440a      	add	r2, r1
 8005c14:	3284      	adds	r2, #132	@ 0x84
 8005c16:	f023 0307 	bic.w	r3, r3, #7
 8005c1a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	461a      	mov	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	01db      	lsls	r3, r3, #7
 8005c26:	4413      	add	r3, r2
 8005c28:	3384      	adds	r3, #132	@ 0x84
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005c38:	021b      	lsls	r3, r3, #8
 8005c3a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005c42:	041b      	lsls	r3, r3, #16
 8005c44:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	061b      	lsls	r3, r3, #24
 8005c4c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	461a      	mov	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	01db      	lsls	r3, r3, #7
 8005c58:	4413      	add	r3, r2
 8005c5a:	3384      	adds	r3, #132	@ 0x84
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	461a      	mov	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	01db      	lsls	r3, r3, #7
 8005c68:	4413      	add	r3, r2
 8005c6a:	3384      	adds	r3, #132	@ 0x84
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	2300      	movs	r3, #0
 8005c70:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005c78:	461a      	mov	r2, r3
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	431a      	orrs	r2, r3
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	431a      	orrs	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4619      	mov	r1, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	01db      	lsls	r3, r3, #7
 8005c8c:	440b      	add	r3, r1
 8005c8e:	3384      	adds	r3, #132	@ 0x84
 8005c90:	4619      	mov	r1, r3
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	01db      	lsls	r3, r3, #7
 8005ca2:	4413      	add	r3, r2
 8005ca4:	3384      	adds	r3, #132	@ 0x84
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	6812      	ldr	r2, [r2, #0]
 8005cac:	4611      	mov	r1, r2
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	01d2      	lsls	r2, r2, #7
 8005cb2:	440a      	add	r2, r1
 8005cb4:	3284      	adds	r2, #132	@ 0x84
 8005cb6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005cba:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	01db      	lsls	r3, r3, #7
 8005cc6:	4413      	add	r3, r2
 8005cc8:	3384      	adds	r3, #132	@ 0x84
 8005cca:	461a      	mov	r2, r3
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	01db      	lsls	r3, r3, #7
 8005cdc:	4413      	add	r3, r2
 8005cde:	3384      	adds	r3, #132	@ 0x84
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	6812      	ldr	r2, [r2, #0]
 8005ce6:	4611      	mov	r1, r2
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	01d2      	lsls	r2, r2, #7
 8005cec:	440a      	add	r2, r1
 8005cee:	3284      	adds	r2, #132	@ 0x84
 8005cf0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005cf4:	f023 0307 	bic.w	r3, r3, #7
 8005cf8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	69da      	ldr	r2, [r3, #28]
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	68f9      	ldr	r1, [r7, #12]
 8005d04:	6809      	ldr	r1, [r1, #0]
 8005d06:	4608      	mov	r0, r1
 8005d08:	6879      	ldr	r1, [r7, #4]
 8005d0a:	01c9      	lsls	r1, r1, #7
 8005d0c:	4401      	add	r1, r0
 8005d0e:	3184      	adds	r1, #132	@ 0x84
 8005d10:	4313      	orrs	r3, r2
 8005d12:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	461a      	mov	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	01db      	lsls	r3, r3, #7
 8005d1e:	4413      	add	r3, r2
 8005d20:	3384      	adds	r3, #132	@ 0x84
 8005d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	461a      	mov	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	01db      	lsls	r3, r3, #7
 8005d2e:	4413      	add	r3, r2
 8005d30:	3384      	adds	r3, #132	@ 0x84
 8005d32:	461a      	mov	r2, r3
 8005d34:	2300      	movs	r3, #0
 8005d36:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	01db      	lsls	r3, r3, #7
 8005d42:	4413      	add	r3, r2
 8005d44:	3384      	adds	r3, #132	@ 0x84
 8005d46:	461a      	mov	r2, r3
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d102      	bne.n	8005d5c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005d56:	2304      	movs	r3, #4
 8005d58:	61fb      	str	r3, [r7, #28]
 8005d5a:	e01b      	b.n	8005d94 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d102      	bne.n	8005d6a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005d64:	2303      	movs	r3, #3
 8005d66:	61fb      	str	r3, [r7, #28]
 8005d68:	e014      	b.n	8005d94 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	2b04      	cmp	r3, #4
 8005d70:	d00b      	beq.n	8005d8a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d007      	beq.n	8005d8a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005d7e:	2b03      	cmp	r3, #3
 8005d80:	d003      	beq.n	8005d8a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005d86:	2b07      	cmp	r3, #7
 8005d88:	d102      	bne.n	8005d90 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	61fb      	str	r3, [r7, #28]
 8005d8e:	e001      	b.n	8005d94 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005d90:	2301      	movs	r3, #1
 8005d92:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	461a      	mov	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	01db      	lsls	r3, r3, #7
 8005d9e:	4413      	add	r3, r2
 8005da0:	3384      	adds	r3, #132	@ 0x84
 8005da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	6812      	ldr	r2, [r2, #0]
 8005da8:	4611      	mov	r1, r2
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	01d2      	lsls	r2, r2, #7
 8005dae:	440a      	add	r2, r1
 8005db0:	3284      	adds	r2, #132	@ 0x84
 8005db2:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005db6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dbc:	69fa      	ldr	r2, [r7, #28]
 8005dbe:	fb02 f303 	mul.w	r3, r2, r3
 8005dc2:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	6859      	ldr	r1, [r3, #4]
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	1acb      	subs	r3, r1, r3
 8005dce:	69f9      	ldr	r1, [r7, #28]
 8005dd0:	fb01 f303 	mul.w	r3, r1, r3
 8005dd4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005dd6:	68f9      	ldr	r1, [r7, #12]
 8005dd8:	6809      	ldr	r1, [r1, #0]
 8005dda:	4608      	mov	r0, r1
 8005ddc:	6879      	ldr	r1, [r7, #4]
 8005dde:	01c9      	lsls	r1, r1, #7
 8005de0:	4401      	add	r1, r0
 8005de2:	3184      	adds	r1, #132	@ 0x84
 8005de4:	4313      	orrs	r3, r2
 8005de6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	461a      	mov	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	01db      	lsls	r3, r3, #7
 8005df2:	4413      	add	r3, r2
 8005df4:	3384      	adds	r3, #132	@ 0x84
 8005df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	6812      	ldr	r2, [r2, #0]
 8005dfc:	4611      	mov	r1, r2
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	01d2      	lsls	r2, r2, #7
 8005e02:	440a      	add	r2, r1
 8005e04:	3284      	adds	r2, #132	@ 0x84
 8005e06:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005e0a:	f023 0307 	bic.w	r3, r3, #7
 8005e0e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	461a      	mov	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	01db      	lsls	r3, r3, #7
 8005e1a:	4413      	add	r3, r2
 8005e1c:	3384      	adds	r3, #132	@ 0x84
 8005e1e:	461a      	mov	r2, r3
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e24:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	01db      	lsls	r3, r3, #7
 8005e30:	4413      	add	r3, r2
 8005e32:	3384      	adds	r3, #132	@ 0x84
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	6812      	ldr	r2, [r2, #0]
 8005e3a:	4611      	mov	r1, r2
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	01d2      	lsls	r2, r2, #7
 8005e40:	440a      	add	r2, r1
 8005e42:	3284      	adds	r2, #132	@ 0x84
 8005e44:	f043 0301 	orr.w	r3, r3, #1
 8005e48:	6013      	str	r3, [r2, #0]
}
 8005e4a:	bf00      	nop
 8005e4c:	3724      	adds	r7, #36	@ 0x24
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
	...

08005e58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d101      	bne.n	8005e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e267      	b.n	800633a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d075      	beq.n	8005f62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005e76:	4b88      	ldr	r3, [pc, #544]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f003 030c 	and.w	r3, r3, #12
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	d00c      	beq.n	8005e9c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e82:	4b85      	ldr	r3, [pc, #532]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005e8a:	2b08      	cmp	r3, #8
 8005e8c:	d112      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e8e:	4b82      	ldr	r3, [pc, #520]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e9a:	d10b      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e9c:	4b7e      	ldr	r3, [pc, #504]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d05b      	beq.n	8005f60 <HAL_RCC_OscConfig+0x108>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d157      	bne.n	8005f60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e242      	b.n	800633a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ebc:	d106      	bne.n	8005ecc <HAL_RCC_OscConfig+0x74>
 8005ebe:	4b76      	ldr	r3, [pc, #472]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a75      	ldr	r2, [pc, #468]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005ec4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ec8:	6013      	str	r3, [r2, #0]
 8005eca:	e01d      	b.n	8005f08 <HAL_RCC_OscConfig+0xb0>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ed4:	d10c      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x98>
 8005ed6:	4b70      	ldr	r3, [pc, #448]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a6f      	ldr	r2, [pc, #444]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005edc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ee0:	6013      	str	r3, [r2, #0]
 8005ee2:	4b6d      	ldr	r3, [pc, #436]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a6c      	ldr	r2, [pc, #432]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005eec:	6013      	str	r3, [r2, #0]
 8005eee:	e00b      	b.n	8005f08 <HAL_RCC_OscConfig+0xb0>
 8005ef0:	4b69      	ldr	r3, [pc, #420]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a68      	ldr	r2, [pc, #416]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005ef6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005efa:	6013      	str	r3, [r2, #0]
 8005efc:	4b66      	ldr	r3, [pc, #408]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a65      	ldr	r2, [pc, #404]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005f02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d013      	beq.n	8005f38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f10:	f7fe f830 	bl	8003f74 <HAL_GetTick>
 8005f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f16:	e008      	b.n	8005f2a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f18:	f7fe f82c 	bl	8003f74 <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	2b64      	cmp	r3, #100	@ 0x64
 8005f24:	d901      	bls.n	8005f2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e207      	b.n	800633a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f2a:	4b5b      	ldr	r3, [pc, #364]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d0f0      	beq.n	8005f18 <HAL_RCC_OscConfig+0xc0>
 8005f36:	e014      	b.n	8005f62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f38:	f7fe f81c 	bl	8003f74 <HAL_GetTick>
 8005f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f3e:	e008      	b.n	8005f52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f40:	f7fe f818 	bl	8003f74 <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	2b64      	cmp	r3, #100	@ 0x64
 8005f4c:	d901      	bls.n	8005f52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e1f3      	b.n	800633a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f52:	4b51      	ldr	r3, [pc, #324]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1f0      	bne.n	8005f40 <HAL_RCC_OscConfig+0xe8>
 8005f5e:	e000      	b.n	8005f62 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d063      	beq.n	8006036 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005f6e:	4b4a      	ldr	r3, [pc, #296]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f003 030c 	and.w	r3, r3, #12
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00b      	beq.n	8005f92 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f7a:	4b47      	ldr	r3, [pc, #284]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005f82:	2b08      	cmp	r3, #8
 8005f84:	d11c      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f86:	4b44      	ldr	r3, [pc, #272]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d116      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f92:	4b41      	ldr	r3, [pc, #260]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0302 	and.w	r3, r3, #2
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d005      	beq.n	8005faa <HAL_RCC_OscConfig+0x152>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d001      	beq.n	8005faa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e1c7      	b.n	800633a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005faa:	4b3b      	ldr	r3, [pc, #236]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	00db      	lsls	r3, r3, #3
 8005fb8:	4937      	ldr	r1, [pc, #220]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fbe:	e03a      	b.n	8006036 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d020      	beq.n	800600a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fc8:	4b34      	ldr	r3, [pc, #208]	@ (800609c <HAL_RCC_OscConfig+0x244>)
 8005fca:	2201      	movs	r2, #1
 8005fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fce:	f7fd ffd1 	bl	8003f74 <HAL_GetTick>
 8005fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fd4:	e008      	b.n	8005fe8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fd6:	f7fd ffcd 	bl	8003f74 <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d901      	bls.n	8005fe8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e1a8      	b.n	800633a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fe8:	4b2b      	ldr	r3, [pc, #172]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0302 	and.w	r3, r3, #2
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d0f0      	beq.n	8005fd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ff4:	4b28      	ldr	r3, [pc, #160]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	00db      	lsls	r3, r3, #3
 8006002:	4925      	ldr	r1, [pc, #148]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8006004:	4313      	orrs	r3, r2
 8006006:	600b      	str	r3, [r1, #0]
 8006008:	e015      	b.n	8006036 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800600a:	4b24      	ldr	r3, [pc, #144]	@ (800609c <HAL_RCC_OscConfig+0x244>)
 800600c:	2200      	movs	r2, #0
 800600e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006010:	f7fd ffb0 	bl	8003f74 <HAL_GetTick>
 8006014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006016:	e008      	b.n	800602a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006018:	f7fd ffac 	bl	8003f74 <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	2b02      	cmp	r3, #2
 8006024:	d901      	bls.n	800602a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e187      	b.n	800633a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800602a:	4b1b      	ldr	r3, [pc, #108]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0302 	and.w	r3, r3, #2
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1f0      	bne.n	8006018 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 0308 	and.w	r3, r3, #8
 800603e:	2b00      	cmp	r3, #0
 8006040:	d036      	beq.n	80060b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d016      	beq.n	8006078 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800604a:	4b15      	ldr	r3, [pc, #84]	@ (80060a0 <HAL_RCC_OscConfig+0x248>)
 800604c:	2201      	movs	r2, #1
 800604e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006050:	f7fd ff90 	bl	8003f74 <HAL_GetTick>
 8006054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006056:	e008      	b.n	800606a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006058:	f7fd ff8c 	bl	8003f74 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	2b02      	cmp	r3, #2
 8006064:	d901      	bls.n	800606a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e167      	b.n	800633a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800606a:	4b0b      	ldr	r3, [pc, #44]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 800606c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800606e:	f003 0302 	and.w	r3, r3, #2
 8006072:	2b00      	cmp	r3, #0
 8006074:	d0f0      	beq.n	8006058 <HAL_RCC_OscConfig+0x200>
 8006076:	e01b      	b.n	80060b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006078:	4b09      	ldr	r3, [pc, #36]	@ (80060a0 <HAL_RCC_OscConfig+0x248>)
 800607a:	2200      	movs	r2, #0
 800607c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800607e:	f7fd ff79 	bl	8003f74 <HAL_GetTick>
 8006082:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006084:	e00e      	b.n	80060a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006086:	f7fd ff75 	bl	8003f74 <HAL_GetTick>
 800608a:	4602      	mov	r2, r0
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	2b02      	cmp	r3, #2
 8006092:	d907      	bls.n	80060a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e150      	b.n	800633a <HAL_RCC_OscConfig+0x4e2>
 8006098:	40023800 	.word	0x40023800
 800609c:	42470000 	.word	0x42470000
 80060a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060a4:	4b88      	ldr	r3, [pc, #544]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 80060a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060a8:	f003 0302 	and.w	r3, r3, #2
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1ea      	bne.n	8006086 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0304 	and.w	r3, r3, #4
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f000 8097 	beq.w	80061ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060be:	2300      	movs	r3, #0
 80060c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060c2:	4b81      	ldr	r3, [pc, #516]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 80060c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10f      	bne.n	80060ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060ce:	2300      	movs	r3, #0
 80060d0:	60bb      	str	r3, [r7, #8]
 80060d2:	4b7d      	ldr	r3, [pc, #500]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 80060d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d6:	4a7c      	ldr	r2, [pc, #496]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 80060d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80060de:	4b7a      	ldr	r3, [pc, #488]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 80060e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060e6:	60bb      	str	r3, [r7, #8]
 80060e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060ea:	2301      	movs	r3, #1
 80060ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060ee:	4b77      	ldr	r3, [pc, #476]	@ (80062cc <HAL_RCC_OscConfig+0x474>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d118      	bne.n	800612c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060fa:	4b74      	ldr	r3, [pc, #464]	@ (80062cc <HAL_RCC_OscConfig+0x474>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a73      	ldr	r2, [pc, #460]	@ (80062cc <HAL_RCC_OscConfig+0x474>)
 8006100:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006104:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006106:	f7fd ff35 	bl	8003f74 <HAL_GetTick>
 800610a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800610c:	e008      	b.n	8006120 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800610e:	f7fd ff31 	bl	8003f74 <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	2b02      	cmp	r3, #2
 800611a:	d901      	bls.n	8006120 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e10c      	b.n	800633a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006120:	4b6a      	ldr	r3, [pc, #424]	@ (80062cc <HAL_RCC_OscConfig+0x474>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006128:	2b00      	cmp	r3, #0
 800612a:	d0f0      	beq.n	800610e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d106      	bne.n	8006142 <HAL_RCC_OscConfig+0x2ea>
 8006134:	4b64      	ldr	r3, [pc, #400]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 8006136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006138:	4a63      	ldr	r2, [pc, #396]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 800613a:	f043 0301 	orr.w	r3, r3, #1
 800613e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006140:	e01c      	b.n	800617c <HAL_RCC_OscConfig+0x324>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	2b05      	cmp	r3, #5
 8006148:	d10c      	bne.n	8006164 <HAL_RCC_OscConfig+0x30c>
 800614a:	4b5f      	ldr	r3, [pc, #380]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 800614c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800614e:	4a5e      	ldr	r2, [pc, #376]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 8006150:	f043 0304 	orr.w	r3, r3, #4
 8006154:	6713      	str	r3, [r2, #112]	@ 0x70
 8006156:	4b5c      	ldr	r3, [pc, #368]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 8006158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800615a:	4a5b      	ldr	r2, [pc, #364]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 800615c:	f043 0301 	orr.w	r3, r3, #1
 8006160:	6713      	str	r3, [r2, #112]	@ 0x70
 8006162:	e00b      	b.n	800617c <HAL_RCC_OscConfig+0x324>
 8006164:	4b58      	ldr	r3, [pc, #352]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 8006166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006168:	4a57      	ldr	r2, [pc, #348]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 800616a:	f023 0301 	bic.w	r3, r3, #1
 800616e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006170:	4b55      	ldr	r3, [pc, #340]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 8006172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006174:	4a54      	ldr	r2, [pc, #336]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 8006176:	f023 0304 	bic.w	r3, r3, #4
 800617a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d015      	beq.n	80061b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006184:	f7fd fef6 	bl	8003f74 <HAL_GetTick>
 8006188:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800618a:	e00a      	b.n	80061a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800618c:	f7fd fef2 	bl	8003f74 <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800619a:	4293      	cmp	r3, r2
 800619c:	d901      	bls.n	80061a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e0cb      	b.n	800633a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061a2:	4b49      	ldr	r3, [pc, #292]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 80061a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061a6:	f003 0302 	and.w	r3, r3, #2
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d0ee      	beq.n	800618c <HAL_RCC_OscConfig+0x334>
 80061ae:	e014      	b.n	80061da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061b0:	f7fd fee0 	bl	8003f74 <HAL_GetTick>
 80061b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061b6:	e00a      	b.n	80061ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061b8:	f7fd fedc 	bl	8003f74 <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d901      	bls.n	80061ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e0b5      	b.n	800633a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061ce:	4b3e      	ldr	r3, [pc, #248]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 80061d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061d2:	f003 0302 	and.w	r3, r3, #2
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1ee      	bne.n	80061b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80061da:	7dfb      	ldrb	r3, [r7, #23]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d105      	bne.n	80061ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061e0:	4b39      	ldr	r3, [pc, #228]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 80061e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e4:	4a38      	ldr	r2, [pc, #224]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 80061e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f000 80a1 	beq.w	8006338 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061f6:	4b34      	ldr	r3, [pc, #208]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	f003 030c 	and.w	r3, r3, #12
 80061fe:	2b08      	cmp	r3, #8
 8006200:	d05c      	beq.n	80062bc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	2b02      	cmp	r3, #2
 8006208:	d141      	bne.n	800628e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800620a:	4b31      	ldr	r3, [pc, #196]	@ (80062d0 <HAL_RCC_OscConfig+0x478>)
 800620c:	2200      	movs	r2, #0
 800620e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006210:	f7fd feb0 	bl	8003f74 <HAL_GetTick>
 8006214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006216:	e008      	b.n	800622a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006218:	f7fd feac 	bl	8003f74 <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	2b02      	cmp	r3, #2
 8006224:	d901      	bls.n	800622a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e087      	b.n	800633a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800622a:	4b27      	ldr	r3, [pc, #156]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1f0      	bne.n	8006218 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	69da      	ldr	r2, [r3, #28]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	431a      	orrs	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006244:	019b      	lsls	r3, r3, #6
 8006246:	431a      	orrs	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800624c:	085b      	lsrs	r3, r3, #1
 800624e:	3b01      	subs	r3, #1
 8006250:	041b      	lsls	r3, r3, #16
 8006252:	431a      	orrs	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006258:	061b      	lsls	r3, r3, #24
 800625a:	491b      	ldr	r1, [pc, #108]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 800625c:	4313      	orrs	r3, r2
 800625e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006260:	4b1b      	ldr	r3, [pc, #108]	@ (80062d0 <HAL_RCC_OscConfig+0x478>)
 8006262:	2201      	movs	r2, #1
 8006264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006266:	f7fd fe85 	bl	8003f74 <HAL_GetTick>
 800626a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800626c:	e008      	b.n	8006280 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800626e:	f7fd fe81 	bl	8003f74 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	2b02      	cmp	r3, #2
 800627a:	d901      	bls.n	8006280 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e05c      	b.n	800633a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006280:	4b11      	ldr	r3, [pc, #68]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d0f0      	beq.n	800626e <HAL_RCC_OscConfig+0x416>
 800628c:	e054      	b.n	8006338 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800628e:	4b10      	ldr	r3, [pc, #64]	@ (80062d0 <HAL_RCC_OscConfig+0x478>)
 8006290:	2200      	movs	r2, #0
 8006292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006294:	f7fd fe6e 	bl	8003f74 <HAL_GetTick>
 8006298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800629a:	e008      	b.n	80062ae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800629c:	f7fd fe6a 	bl	8003f74 <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d901      	bls.n	80062ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e045      	b.n	800633a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062ae:	4b06      	ldr	r3, [pc, #24]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1f0      	bne.n	800629c <HAL_RCC_OscConfig+0x444>
 80062ba:	e03d      	b.n	8006338 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	699b      	ldr	r3, [r3, #24]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d107      	bne.n	80062d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e038      	b.n	800633a <HAL_RCC_OscConfig+0x4e2>
 80062c8:	40023800 	.word	0x40023800
 80062cc:	40007000 	.word	0x40007000
 80062d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80062d4:	4b1b      	ldr	r3, [pc, #108]	@ (8006344 <HAL_RCC_OscConfig+0x4ec>)
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d028      	beq.n	8006334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d121      	bne.n	8006334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d11a      	bne.n	8006334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006304:	4013      	ands	r3, r2
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800630a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800630c:	4293      	cmp	r3, r2
 800630e:	d111      	bne.n	8006334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800631a:	085b      	lsrs	r3, r3, #1
 800631c:	3b01      	subs	r3, #1
 800631e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006320:	429a      	cmp	r2, r3
 8006322:	d107      	bne.n	8006334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800632e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006330:	429a      	cmp	r2, r3
 8006332:	d001      	beq.n	8006338 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e000      	b.n	800633a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3718      	adds	r7, #24
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	40023800 	.word	0x40023800

08006348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e0cc      	b.n	80064f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800635c:	4b68      	ldr	r3, [pc, #416]	@ (8006500 <HAL_RCC_ClockConfig+0x1b8>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 030f 	and.w	r3, r3, #15
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	429a      	cmp	r2, r3
 8006368:	d90c      	bls.n	8006384 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800636a:	4b65      	ldr	r3, [pc, #404]	@ (8006500 <HAL_RCC_ClockConfig+0x1b8>)
 800636c:	683a      	ldr	r2, [r7, #0]
 800636e:	b2d2      	uxtb	r2, r2
 8006370:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006372:	4b63      	ldr	r3, [pc, #396]	@ (8006500 <HAL_RCC_ClockConfig+0x1b8>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 030f 	and.w	r3, r3, #15
 800637a:	683a      	ldr	r2, [r7, #0]
 800637c:	429a      	cmp	r2, r3
 800637e:	d001      	beq.n	8006384 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e0b8      	b.n	80064f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0302 	and.w	r3, r3, #2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d020      	beq.n	80063d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0304 	and.w	r3, r3, #4
 8006398:	2b00      	cmp	r3, #0
 800639a:	d005      	beq.n	80063a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800639c:	4b59      	ldr	r3, [pc, #356]	@ (8006504 <HAL_RCC_ClockConfig+0x1bc>)
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	4a58      	ldr	r2, [pc, #352]	@ (8006504 <HAL_RCC_ClockConfig+0x1bc>)
 80063a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80063a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 0308 	and.w	r3, r3, #8
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d005      	beq.n	80063c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063b4:	4b53      	ldr	r3, [pc, #332]	@ (8006504 <HAL_RCC_ClockConfig+0x1bc>)
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	4a52      	ldr	r2, [pc, #328]	@ (8006504 <HAL_RCC_ClockConfig+0x1bc>)
 80063ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80063be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063c0:	4b50      	ldr	r3, [pc, #320]	@ (8006504 <HAL_RCC_ClockConfig+0x1bc>)
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	494d      	ldr	r1, [pc, #308]	@ (8006504 <HAL_RCC_ClockConfig+0x1bc>)
 80063ce:	4313      	orrs	r3, r2
 80063d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0301 	and.w	r3, r3, #1
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d044      	beq.n	8006468 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d107      	bne.n	80063f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063e6:	4b47      	ldr	r3, [pc, #284]	@ (8006504 <HAL_RCC_ClockConfig+0x1bc>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d119      	bne.n	8006426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e07f      	b.n	80064f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d003      	beq.n	8006406 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006402:	2b03      	cmp	r3, #3
 8006404:	d107      	bne.n	8006416 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006406:	4b3f      	ldr	r3, [pc, #252]	@ (8006504 <HAL_RCC_ClockConfig+0x1bc>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d109      	bne.n	8006426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e06f      	b.n	80064f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006416:	4b3b      	ldr	r3, [pc, #236]	@ (8006504 <HAL_RCC_ClockConfig+0x1bc>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e067      	b.n	80064f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006426:	4b37      	ldr	r3, [pc, #220]	@ (8006504 <HAL_RCC_ClockConfig+0x1bc>)
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f023 0203 	bic.w	r2, r3, #3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	4934      	ldr	r1, [pc, #208]	@ (8006504 <HAL_RCC_ClockConfig+0x1bc>)
 8006434:	4313      	orrs	r3, r2
 8006436:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006438:	f7fd fd9c 	bl	8003f74 <HAL_GetTick>
 800643c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800643e:	e00a      	b.n	8006456 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006440:	f7fd fd98 	bl	8003f74 <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800644e:	4293      	cmp	r3, r2
 8006450:	d901      	bls.n	8006456 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e04f      	b.n	80064f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006456:	4b2b      	ldr	r3, [pc, #172]	@ (8006504 <HAL_RCC_ClockConfig+0x1bc>)
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f003 020c 	and.w	r2, r3, #12
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	429a      	cmp	r2, r3
 8006466:	d1eb      	bne.n	8006440 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006468:	4b25      	ldr	r3, [pc, #148]	@ (8006500 <HAL_RCC_ClockConfig+0x1b8>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 030f 	and.w	r3, r3, #15
 8006470:	683a      	ldr	r2, [r7, #0]
 8006472:	429a      	cmp	r2, r3
 8006474:	d20c      	bcs.n	8006490 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006476:	4b22      	ldr	r3, [pc, #136]	@ (8006500 <HAL_RCC_ClockConfig+0x1b8>)
 8006478:	683a      	ldr	r2, [r7, #0]
 800647a:	b2d2      	uxtb	r2, r2
 800647c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800647e:	4b20      	ldr	r3, [pc, #128]	@ (8006500 <HAL_RCC_ClockConfig+0x1b8>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 030f 	and.w	r3, r3, #15
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	429a      	cmp	r2, r3
 800648a:	d001      	beq.n	8006490 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e032      	b.n	80064f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0304 	and.w	r3, r3, #4
 8006498:	2b00      	cmp	r3, #0
 800649a:	d008      	beq.n	80064ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800649c:	4b19      	ldr	r3, [pc, #100]	@ (8006504 <HAL_RCC_ClockConfig+0x1bc>)
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	4916      	ldr	r1, [pc, #88]	@ (8006504 <HAL_RCC_ClockConfig+0x1bc>)
 80064aa:	4313      	orrs	r3, r2
 80064ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0308 	and.w	r3, r3, #8
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d009      	beq.n	80064ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064ba:	4b12      	ldr	r3, [pc, #72]	@ (8006504 <HAL_RCC_ClockConfig+0x1bc>)
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	00db      	lsls	r3, r3, #3
 80064c8:	490e      	ldr	r1, [pc, #56]	@ (8006504 <HAL_RCC_ClockConfig+0x1bc>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80064ce:	f000 f821 	bl	8006514 <HAL_RCC_GetSysClockFreq>
 80064d2:	4602      	mov	r2, r0
 80064d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006504 <HAL_RCC_ClockConfig+0x1bc>)
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	091b      	lsrs	r3, r3, #4
 80064da:	f003 030f 	and.w	r3, r3, #15
 80064de:	490a      	ldr	r1, [pc, #40]	@ (8006508 <HAL_RCC_ClockConfig+0x1c0>)
 80064e0:	5ccb      	ldrb	r3, [r1, r3]
 80064e2:	fa22 f303 	lsr.w	r3, r2, r3
 80064e6:	4a09      	ldr	r2, [pc, #36]	@ (800650c <HAL_RCC_ClockConfig+0x1c4>)
 80064e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80064ea:	4b09      	ldr	r3, [pc, #36]	@ (8006510 <HAL_RCC_ClockConfig+0x1c8>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7fd fcfc 	bl	8003eec <HAL_InitTick>

  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	40023c00 	.word	0x40023c00
 8006504:	40023800 	.word	0x40023800
 8006508:	080092b8 	.word	0x080092b8
 800650c:	20000010 	.word	0x20000010
 8006510:	20000014 	.word	0x20000014

08006514 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006518:	b094      	sub	sp, #80	@ 0x50
 800651a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800651c:	2300      	movs	r3, #0
 800651e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006520:	2300      	movs	r3, #0
 8006522:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006524:	2300      	movs	r3, #0
 8006526:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006528:	2300      	movs	r3, #0
 800652a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800652c:	4b79      	ldr	r3, [pc, #484]	@ (8006714 <HAL_RCC_GetSysClockFreq+0x200>)
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f003 030c 	and.w	r3, r3, #12
 8006534:	2b08      	cmp	r3, #8
 8006536:	d00d      	beq.n	8006554 <HAL_RCC_GetSysClockFreq+0x40>
 8006538:	2b08      	cmp	r3, #8
 800653a:	f200 80e1 	bhi.w	8006700 <HAL_RCC_GetSysClockFreq+0x1ec>
 800653e:	2b00      	cmp	r3, #0
 8006540:	d002      	beq.n	8006548 <HAL_RCC_GetSysClockFreq+0x34>
 8006542:	2b04      	cmp	r3, #4
 8006544:	d003      	beq.n	800654e <HAL_RCC_GetSysClockFreq+0x3a>
 8006546:	e0db      	b.n	8006700 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006548:	4b73      	ldr	r3, [pc, #460]	@ (8006718 <HAL_RCC_GetSysClockFreq+0x204>)
 800654a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800654c:	e0db      	b.n	8006706 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800654e:	4b73      	ldr	r3, [pc, #460]	@ (800671c <HAL_RCC_GetSysClockFreq+0x208>)
 8006550:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006552:	e0d8      	b.n	8006706 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006554:	4b6f      	ldr	r3, [pc, #444]	@ (8006714 <HAL_RCC_GetSysClockFreq+0x200>)
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800655c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800655e:	4b6d      	ldr	r3, [pc, #436]	@ (8006714 <HAL_RCC_GetSysClockFreq+0x200>)
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d063      	beq.n	8006632 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800656a:	4b6a      	ldr	r3, [pc, #424]	@ (8006714 <HAL_RCC_GetSysClockFreq+0x200>)
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	099b      	lsrs	r3, r3, #6
 8006570:	2200      	movs	r2, #0
 8006572:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006574:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800657c:	633b      	str	r3, [r7, #48]	@ 0x30
 800657e:	2300      	movs	r3, #0
 8006580:	637b      	str	r3, [r7, #52]	@ 0x34
 8006582:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006586:	4622      	mov	r2, r4
 8006588:	462b      	mov	r3, r5
 800658a:	f04f 0000 	mov.w	r0, #0
 800658e:	f04f 0100 	mov.w	r1, #0
 8006592:	0159      	lsls	r1, r3, #5
 8006594:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006598:	0150      	lsls	r0, r2, #5
 800659a:	4602      	mov	r2, r0
 800659c:	460b      	mov	r3, r1
 800659e:	4621      	mov	r1, r4
 80065a0:	1a51      	subs	r1, r2, r1
 80065a2:	6139      	str	r1, [r7, #16]
 80065a4:	4629      	mov	r1, r5
 80065a6:	eb63 0301 	sbc.w	r3, r3, r1
 80065aa:	617b      	str	r3, [r7, #20]
 80065ac:	f04f 0200 	mov.w	r2, #0
 80065b0:	f04f 0300 	mov.w	r3, #0
 80065b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065b8:	4659      	mov	r1, fp
 80065ba:	018b      	lsls	r3, r1, #6
 80065bc:	4651      	mov	r1, sl
 80065be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80065c2:	4651      	mov	r1, sl
 80065c4:	018a      	lsls	r2, r1, #6
 80065c6:	4651      	mov	r1, sl
 80065c8:	ebb2 0801 	subs.w	r8, r2, r1
 80065cc:	4659      	mov	r1, fp
 80065ce:	eb63 0901 	sbc.w	r9, r3, r1
 80065d2:	f04f 0200 	mov.w	r2, #0
 80065d6:	f04f 0300 	mov.w	r3, #0
 80065da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065e6:	4690      	mov	r8, r2
 80065e8:	4699      	mov	r9, r3
 80065ea:	4623      	mov	r3, r4
 80065ec:	eb18 0303 	adds.w	r3, r8, r3
 80065f0:	60bb      	str	r3, [r7, #8]
 80065f2:	462b      	mov	r3, r5
 80065f4:	eb49 0303 	adc.w	r3, r9, r3
 80065f8:	60fb      	str	r3, [r7, #12]
 80065fa:	f04f 0200 	mov.w	r2, #0
 80065fe:	f04f 0300 	mov.w	r3, #0
 8006602:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006606:	4629      	mov	r1, r5
 8006608:	024b      	lsls	r3, r1, #9
 800660a:	4621      	mov	r1, r4
 800660c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006610:	4621      	mov	r1, r4
 8006612:	024a      	lsls	r2, r1, #9
 8006614:	4610      	mov	r0, r2
 8006616:	4619      	mov	r1, r3
 8006618:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800661a:	2200      	movs	r2, #0
 800661c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800661e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006620:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006624:	f7fa f93a 	bl	800089c <__aeabi_uldivmod>
 8006628:	4602      	mov	r2, r0
 800662a:	460b      	mov	r3, r1
 800662c:	4613      	mov	r3, r2
 800662e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006630:	e058      	b.n	80066e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006632:	4b38      	ldr	r3, [pc, #224]	@ (8006714 <HAL_RCC_GetSysClockFreq+0x200>)
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	099b      	lsrs	r3, r3, #6
 8006638:	2200      	movs	r2, #0
 800663a:	4618      	mov	r0, r3
 800663c:	4611      	mov	r1, r2
 800663e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006642:	623b      	str	r3, [r7, #32]
 8006644:	2300      	movs	r3, #0
 8006646:	627b      	str	r3, [r7, #36]	@ 0x24
 8006648:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800664c:	4642      	mov	r2, r8
 800664e:	464b      	mov	r3, r9
 8006650:	f04f 0000 	mov.w	r0, #0
 8006654:	f04f 0100 	mov.w	r1, #0
 8006658:	0159      	lsls	r1, r3, #5
 800665a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800665e:	0150      	lsls	r0, r2, #5
 8006660:	4602      	mov	r2, r0
 8006662:	460b      	mov	r3, r1
 8006664:	4641      	mov	r1, r8
 8006666:	ebb2 0a01 	subs.w	sl, r2, r1
 800666a:	4649      	mov	r1, r9
 800666c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006670:	f04f 0200 	mov.w	r2, #0
 8006674:	f04f 0300 	mov.w	r3, #0
 8006678:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800667c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006680:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006684:	ebb2 040a 	subs.w	r4, r2, sl
 8006688:	eb63 050b 	sbc.w	r5, r3, fp
 800668c:	f04f 0200 	mov.w	r2, #0
 8006690:	f04f 0300 	mov.w	r3, #0
 8006694:	00eb      	lsls	r3, r5, #3
 8006696:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800669a:	00e2      	lsls	r2, r4, #3
 800669c:	4614      	mov	r4, r2
 800669e:	461d      	mov	r5, r3
 80066a0:	4643      	mov	r3, r8
 80066a2:	18e3      	adds	r3, r4, r3
 80066a4:	603b      	str	r3, [r7, #0]
 80066a6:	464b      	mov	r3, r9
 80066a8:	eb45 0303 	adc.w	r3, r5, r3
 80066ac:	607b      	str	r3, [r7, #4]
 80066ae:	f04f 0200 	mov.w	r2, #0
 80066b2:	f04f 0300 	mov.w	r3, #0
 80066b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80066ba:	4629      	mov	r1, r5
 80066bc:	028b      	lsls	r3, r1, #10
 80066be:	4621      	mov	r1, r4
 80066c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80066c4:	4621      	mov	r1, r4
 80066c6:	028a      	lsls	r2, r1, #10
 80066c8:	4610      	mov	r0, r2
 80066ca:	4619      	mov	r1, r3
 80066cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066ce:	2200      	movs	r2, #0
 80066d0:	61bb      	str	r3, [r7, #24]
 80066d2:	61fa      	str	r2, [r7, #28]
 80066d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066d8:	f7fa f8e0 	bl	800089c <__aeabi_uldivmod>
 80066dc:	4602      	mov	r2, r0
 80066de:	460b      	mov	r3, r1
 80066e0:	4613      	mov	r3, r2
 80066e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80066e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006714 <HAL_RCC_GetSysClockFreq+0x200>)
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	0c1b      	lsrs	r3, r3, #16
 80066ea:	f003 0303 	and.w	r3, r3, #3
 80066ee:	3301      	adds	r3, #1
 80066f0:	005b      	lsls	r3, r3, #1
 80066f2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80066f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80066f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80066fe:	e002      	b.n	8006706 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006700:	4b05      	ldr	r3, [pc, #20]	@ (8006718 <HAL_RCC_GetSysClockFreq+0x204>)
 8006702:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006704:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006706:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006708:	4618      	mov	r0, r3
 800670a:	3750      	adds	r7, #80	@ 0x50
 800670c:	46bd      	mov	sp, r7
 800670e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006712:	bf00      	nop
 8006714:	40023800 	.word	0x40023800
 8006718:	00f42400 	.word	0x00f42400
 800671c:	007a1200 	.word	0x007a1200

08006720 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006720:	b480      	push	{r7}
 8006722:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006724:	4b03      	ldr	r3, [pc, #12]	@ (8006734 <HAL_RCC_GetHCLKFreq+0x14>)
 8006726:	681b      	ldr	r3, [r3, #0]
}
 8006728:	4618      	mov	r0, r3
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	20000010 	.word	0x20000010

08006738 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800673c:	f7ff fff0 	bl	8006720 <HAL_RCC_GetHCLKFreq>
 8006740:	4602      	mov	r2, r0
 8006742:	4b05      	ldr	r3, [pc, #20]	@ (8006758 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	0a9b      	lsrs	r3, r3, #10
 8006748:	f003 0307 	and.w	r3, r3, #7
 800674c:	4903      	ldr	r1, [pc, #12]	@ (800675c <HAL_RCC_GetPCLK1Freq+0x24>)
 800674e:	5ccb      	ldrb	r3, [r1, r3]
 8006750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006754:	4618      	mov	r0, r3
 8006756:	bd80      	pop	{r7, pc}
 8006758:	40023800 	.word	0x40023800
 800675c:	080092c8 	.word	0x080092c8

08006760 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006768:	2300      	movs	r3, #0
 800676a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800676c:	2300      	movs	r3, #0
 800676e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 0301 	and.w	r3, r3, #1
 8006778:	2b00      	cmp	r3, #0
 800677a:	d10b      	bne.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006784:	2b00      	cmp	r3, #0
 8006786:	d105      	bne.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006790:	2b00      	cmp	r3, #0
 8006792:	d075      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006794:	4b91      	ldr	r3, [pc, #580]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006796:	2200      	movs	r2, #0
 8006798:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800679a:	f7fd fbeb 	bl	8003f74 <HAL_GetTick>
 800679e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80067a0:	e008      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80067a2:	f7fd fbe7 	bl	8003f74 <HAL_GetTick>
 80067a6:	4602      	mov	r2, r0
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d901      	bls.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e189      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80067b4:	4b8a      	ldr	r3, [pc, #552]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1f0      	bne.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0301 	and.w	r3, r3, #1
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d009      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	019a      	lsls	r2, r3, #6
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	071b      	lsls	r3, r3, #28
 80067d8:	4981      	ldr	r1, [pc, #516]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0302 	and.w	r3, r3, #2
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d01f      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80067ec:	4b7c      	ldr	r3, [pc, #496]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067f2:	0f1b      	lsrs	r3, r3, #28
 80067f4:	f003 0307 	and.w	r3, r3, #7
 80067f8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	019a      	lsls	r2, r3, #6
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	061b      	lsls	r3, r3, #24
 8006806:	431a      	orrs	r2, r3
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	071b      	lsls	r3, r3, #28
 800680c:	4974      	ldr	r1, [pc, #464]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800680e:	4313      	orrs	r3, r2
 8006810:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006814:	4b72      	ldr	r3, [pc, #456]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006816:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800681a:	f023 021f 	bic.w	r2, r3, #31
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	69db      	ldr	r3, [r3, #28]
 8006822:	3b01      	subs	r3, #1
 8006824:	496e      	ldr	r1, [pc, #440]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006826:	4313      	orrs	r3, r2
 8006828:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00d      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	019a      	lsls	r2, r3, #6
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	061b      	lsls	r3, r3, #24
 8006844:	431a      	orrs	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	071b      	lsls	r3, r3, #28
 800684c:	4964      	ldr	r1, [pc, #400]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800684e:	4313      	orrs	r3, r2
 8006850:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006854:	4b61      	ldr	r3, [pc, #388]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006856:	2201      	movs	r2, #1
 8006858:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800685a:	f7fd fb8b 	bl	8003f74 <HAL_GetTick>
 800685e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006860:	e008      	b.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006862:	f7fd fb87 	bl	8003f74 <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	2b02      	cmp	r3, #2
 800686e:	d901      	bls.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e129      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006874:	4b5a      	ldr	r3, [pc, #360]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d0f0      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0304 	and.w	r3, r3, #4
 8006888:	2b00      	cmp	r3, #0
 800688a:	d105      	bne.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006894:	2b00      	cmp	r3, #0
 8006896:	d079      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006898:	4b52      	ldr	r3, [pc, #328]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800689a:	2200      	movs	r2, #0
 800689c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800689e:	f7fd fb69 	bl	8003f74 <HAL_GetTick>
 80068a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80068a4:	e008      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80068a6:	f7fd fb65 	bl	8003f74 <HAL_GetTick>
 80068aa:	4602      	mov	r2, r0
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d901      	bls.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e107      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80068b8:	4b49      	ldr	r3, [pc, #292]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068c4:	d0ef      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0304 	and.w	r3, r3, #4
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d020      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80068d2:	4b43      	ldr	r3, [pc, #268]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068d8:	0f1b      	lsrs	r3, r3, #28
 80068da:	f003 0307 	and.w	r3, r3, #7
 80068de:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	019a      	lsls	r2, r3, #6
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	061b      	lsls	r3, r3, #24
 80068ec:	431a      	orrs	r2, r3
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	071b      	lsls	r3, r3, #28
 80068f2:	493b      	ldr	r1, [pc, #236]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068f4:	4313      	orrs	r3, r2
 80068f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80068fa:	4b39      	ldr	r3, [pc, #228]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006900:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a1b      	ldr	r3, [r3, #32]
 8006908:	3b01      	subs	r3, #1
 800690a:	021b      	lsls	r3, r3, #8
 800690c:	4934      	ldr	r1, [pc, #208]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800690e:	4313      	orrs	r3, r2
 8006910:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 0308 	and.w	r3, r3, #8
 800691c:	2b00      	cmp	r3, #0
 800691e:	d01e      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006920:	4b2f      	ldr	r3, [pc, #188]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006926:	0e1b      	lsrs	r3, r3, #24
 8006928:	f003 030f 	and.w	r3, r3, #15
 800692c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	019a      	lsls	r2, r3, #6
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	061b      	lsls	r3, r3, #24
 8006938:	431a      	orrs	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	071b      	lsls	r3, r3, #28
 8006940:	4927      	ldr	r1, [pc, #156]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006942:	4313      	orrs	r3, r2
 8006944:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006948:	4b25      	ldr	r3, [pc, #148]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800694a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800694e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006956:	4922      	ldr	r1, [pc, #136]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006958:	4313      	orrs	r3, r2
 800695a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800695e:	4b21      	ldr	r3, [pc, #132]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006960:	2201      	movs	r2, #1
 8006962:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006964:	f7fd fb06 	bl	8003f74 <HAL_GetTick>
 8006968:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800696a:	e008      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800696c:	f7fd fb02 	bl	8003f74 <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	2b02      	cmp	r3, #2
 8006978:	d901      	bls.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e0a4      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800697e:	4b18      	ldr	r3, [pc, #96]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006986:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800698a:	d1ef      	bne.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0320 	and.w	r3, r3, #32
 8006994:	2b00      	cmp	r3, #0
 8006996:	f000 808b 	beq.w	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800699a:	2300      	movs	r3, #0
 800699c:	60fb      	str	r3, [r7, #12]
 800699e:	4b10      	ldr	r3, [pc, #64]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a2:	4a0f      	ldr	r2, [pc, #60]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80069aa:	4b0d      	ldr	r3, [pc, #52]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069b2:	60fb      	str	r3, [r7, #12]
 80069b4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80069b6:	4b0c      	ldr	r3, [pc, #48]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a0b      	ldr	r2, [pc, #44]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80069bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069c0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80069c2:	f7fd fad7 	bl	8003f74 <HAL_GetTick>
 80069c6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80069c8:	e010      	b.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069ca:	f7fd fad3 	bl	8003f74 <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d909      	bls.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80069d8:	2303      	movs	r3, #3
 80069da:	e075      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80069dc:	42470068 	.word	0x42470068
 80069e0:	40023800 	.word	0x40023800
 80069e4:	42470070 	.word	0x42470070
 80069e8:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80069ec:	4b38      	ldr	r3, [pc, #224]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d0e8      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80069f8:	4b36      	ldr	r3, [pc, #216]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80069fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a00:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d02f      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d028      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a16:	4b2f      	ldr	r3, [pc, #188]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a1e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a20:	4b2d      	ldr	r3, [pc, #180]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006a22:	2201      	movs	r2, #1
 8006a24:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a26:	4b2c      	ldr	r3, [pc, #176]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006a28:	2200      	movs	r2, #0
 8006a2a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006a2c:	4a29      	ldr	r2, [pc, #164]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006a32:	4b28      	ldr	r3, [pc, #160]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d114      	bne.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006a3e:	f7fd fa99 	bl	8003f74 <HAL_GetTick>
 8006a42:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a44:	e00a      	b.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a46:	f7fd fa95 	bl	8003f74 <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d901      	bls.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e035      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a60:	f003 0302 	and.w	r3, r3, #2
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d0ee      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a74:	d10d      	bne.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006a76:	4b17      	ldr	r3, [pc, #92]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a82:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006a86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a8a:	4912      	ldr	r1, [pc, #72]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	608b      	str	r3, [r1, #8]
 8006a90:	e005      	b.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006a92:	4b10      	ldr	r3, [pc, #64]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	4a0f      	ldr	r2, [pc, #60]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a98:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006a9c:	6093      	str	r3, [r2, #8]
 8006a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006aa0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006aaa:	490a      	ldr	r1, [pc, #40]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006aac:	4313      	orrs	r3, r2
 8006aae:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0310 	and.w	r3, r3, #16
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d004      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8006ac2:	4b06      	ldr	r3, [pc, #24]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006ac4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3718      	adds	r7, #24
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	40007000 	.word	0x40007000
 8006ad4:	40023800 	.word	0x40023800
 8006ad8:	42470e40 	.word	0x42470e40
 8006adc:	424711e0 	.word	0x424711e0

08006ae0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e01c      	b.n	8006b2c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	795b      	ldrb	r3, [r3, #5]
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d105      	bne.n	8006b08 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7fc fd36 	bl	8003574 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f042 0204 	orr.w	r2, r2, #4
 8006b1c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2201      	movs	r2, #1
 8006b22:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	791b      	ldrb	r3, [r3, #4]
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d101      	bne.n	8006b4e <HAL_RNG_GenerateRandomNumber+0x1a>
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	e044      	b.n	8006bd8 <HAL_RNG_GenerateRandomNumber+0xa4>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	795b      	ldrb	r3, [r3, #5]
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d133      	bne.n	8006bc6 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2202      	movs	r2, #2
 8006b62:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006b64:	f7fd fa06 	bl	8003f74 <HAL_GetTick>
 8006b68:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006b6a:	e018      	b.n	8006b9e <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006b6c:	f7fd fa02 	bl	8003f74 <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d911      	bls.n	8006b9e <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	f003 0301 	and.w	r3, r3, #1
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d00a      	beq.n	8006b9e <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2202      	movs	r2, #2
 8006b92:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e01c      	b.n	8006bd8 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f003 0301 	and.w	r3, r3, #1
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d1df      	bne.n	8006b6c <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689a      	ldr	r2, [r3, #8]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	68da      	ldr	r2, [r3, #12]
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	715a      	strb	r2, [r3, #5]
 8006bc4:	e004      	b.n	8006bd0 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2204      	movs	r2, #4
 8006bca:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	711a      	strb	r2, [r3, #4]

  return status;
 8006bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d101      	bne.n	8006bf2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e07b      	b.n	8006cea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d108      	bne.n	8006c0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c02:	d009      	beq.n	8006c18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	61da      	str	r2, [r3, #28]
 8006c0a:	e005      	b.n	8006c18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d106      	bne.n	8006c38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7fc fcc0 	bl	80035b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006c60:	431a      	orrs	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	f003 0302 	and.w	r3, r3, #2
 8006c74:	431a      	orrs	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	699b      	ldr	r3, [r3, #24]
 8006c84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c88:	431a      	orrs	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	69db      	ldr	r3, [r3, #28]
 8006c8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c92:	431a      	orrs	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c9c:	ea42 0103 	orr.w	r1, r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ca4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	430a      	orrs	r2, r1
 8006cae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	699b      	ldr	r3, [r3, #24]
 8006cb4:	0c1b      	lsrs	r3, r3, #16
 8006cb6:	f003 0104 	and.w	r1, r3, #4
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cbe:	f003 0210 	and.w	r2, r3, #16
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	69da      	ldr	r2, [r3, #28]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006cd8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3708      	adds	r7, #8
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b082      	sub	sp, #8
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d101      	bne.n	8006d04 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e01a      	b.n	8006d3a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2202      	movs	r2, #2
 8006d08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d1a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f7fc fc93 	bl	8003648 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3708      	adds	r7, #8
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b088      	sub	sp, #32
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	60f8      	str	r0, [r7, #12]
 8006d4a:	60b9      	str	r1, [r7, #8]
 8006d4c:	603b      	str	r3, [r7, #0]
 8006d4e:	4613      	mov	r3, r2
 8006d50:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d52:	f7fd f90f 	bl	8003f74 <HAL_GetTick>
 8006d56:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006d58:	88fb      	ldrh	r3, [r7, #6]
 8006d5a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d001      	beq.n	8006d6c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006d68:	2302      	movs	r3, #2
 8006d6a:	e12a      	b.n	8006fc2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d002      	beq.n	8006d78 <HAL_SPI_Transmit+0x36>
 8006d72:	88fb      	ldrh	r3, [r7, #6]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d101      	bne.n	8006d7c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e122      	b.n	8006fc2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d101      	bne.n	8006d8a <HAL_SPI_Transmit+0x48>
 8006d86:	2302      	movs	r3, #2
 8006d88:	e11b      	b.n	8006fc2 <HAL_SPI_Transmit+0x280>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2203      	movs	r2, #3
 8006d96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	88fa      	ldrh	r2, [r7, #6]
 8006daa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	88fa      	ldrh	r2, [r7, #6]
 8006db0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006dd8:	d10f      	bne.n	8006dfa <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006de8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006df8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e04:	2b40      	cmp	r3, #64	@ 0x40
 8006e06:	d007      	beq.n	8006e18 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e20:	d152      	bne.n	8006ec8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d002      	beq.n	8006e30 <HAL_SPI_Transmit+0xee>
 8006e2a:	8b7b      	ldrh	r3, [r7, #26]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d145      	bne.n	8006ebc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e34:	881a      	ldrh	r2, [r3, #0]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e40:	1c9a      	adds	r2, r3, #2
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006e54:	e032      	b.n	8006ebc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f003 0302 	and.w	r3, r3, #2
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d112      	bne.n	8006e8a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e68:	881a      	ldrh	r2, [r3, #0]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e74:	1c9a      	adds	r2, r3, #2
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	3b01      	subs	r3, #1
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006e88:	e018      	b.n	8006ebc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e8a:	f7fd f873 	bl	8003f74 <HAL_GetTick>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	683a      	ldr	r2, [r7, #0]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d803      	bhi.n	8006ea2 <HAL_SPI_Transmit+0x160>
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ea0:	d102      	bne.n	8006ea8 <HAL_SPI_Transmit+0x166>
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d109      	bne.n	8006ebc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e082      	b.n	8006fc2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1c7      	bne.n	8006e56 <HAL_SPI_Transmit+0x114>
 8006ec6:	e053      	b.n	8006f70 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d002      	beq.n	8006ed6 <HAL_SPI_Transmit+0x194>
 8006ed0:	8b7b      	ldrh	r3, [r7, #26]
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d147      	bne.n	8006f66 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	330c      	adds	r3, #12
 8006ee0:	7812      	ldrb	r2, [r2, #0]
 8006ee2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ee8:	1c5a      	adds	r2, r3, #1
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006efc:	e033      	b.n	8006f66 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f003 0302 	and.w	r3, r3, #2
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d113      	bne.n	8006f34 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	330c      	adds	r3, #12
 8006f16:	7812      	ldrb	r2, [r2, #0]
 8006f18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f1e:	1c5a      	adds	r2, r3, #1
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006f32:	e018      	b.n	8006f66 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f34:	f7fd f81e 	bl	8003f74 <HAL_GetTick>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	683a      	ldr	r2, [r7, #0]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d803      	bhi.n	8006f4c <HAL_SPI_Transmit+0x20a>
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f4a:	d102      	bne.n	8006f52 <HAL_SPI_Transmit+0x210>
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d109      	bne.n	8006f66 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e02d      	b.n	8006fc2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1c6      	bne.n	8006efe <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f70:	69fa      	ldr	r2, [r7, #28]
 8006f72:	6839      	ldr	r1, [r7, #0]
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	f000 f8bf 	bl	80070f8 <SPI_EndRxTxTransaction>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d002      	beq.n	8006f86 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2220      	movs	r2, #32
 8006f84:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10a      	bne.n	8006fa4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f8e:	2300      	movs	r3, #0
 8006f90:	617b      	str	r3, [r7, #20]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	617b      	str	r3, [r7, #20]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	617b      	str	r3, [r7, #20]
 8006fa2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d001      	beq.n	8006fc0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e000      	b.n	8006fc2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
  }
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3720      	adds	r7, #32
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b083      	sub	sp, #12
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006fd8:	b2db      	uxtb	r3, r3
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	370c      	adds	r7, #12
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
	...

08006fe8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b088      	sub	sp, #32
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	603b      	str	r3, [r7, #0]
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ff8:	f7fc ffbc 	bl	8003f74 <HAL_GetTick>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007000:	1a9b      	subs	r3, r3, r2
 8007002:	683a      	ldr	r2, [r7, #0]
 8007004:	4413      	add	r3, r2
 8007006:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007008:	f7fc ffb4 	bl	8003f74 <HAL_GetTick>
 800700c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800700e:	4b39      	ldr	r3, [pc, #228]	@ (80070f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	015b      	lsls	r3, r3, #5
 8007014:	0d1b      	lsrs	r3, r3, #20
 8007016:	69fa      	ldr	r2, [r7, #28]
 8007018:	fb02 f303 	mul.w	r3, r2, r3
 800701c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800701e:	e054      	b.n	80070ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007026:	d050      	beq.n	80070ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007028:	f7fc ffa4 	bl	8003f74 <HAL_GetTick>
 800702c:	4602      	mov	r2, r0
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	69fa      	ldr	r2, [r7, #28]
 8007034:	429a      	cmp	r2, r3
 8007036:	d902      	bls.n	800703e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d13d      	bne.n	80070ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	685a      	ldr	r2, [r3, #4]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800704c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007056:	d111      	bne.n	800707c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007060:	d004      	beq.n	800706c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800706a:	d107      	bne.n	800707c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800707a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007080:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007084:	d10f      	bne.n	80070a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007094:	601a      	str	r2, [r3, #0]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80070a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e017      	b.n	80070ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d101      	bne.n	80070c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80070c0:	2300      	movs	r3, #0
 80070c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	3b01      	subs	r3, #1
 80070c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	689a      	ldr	r2, [r3, #8]
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	4013      	ands	r3, r2
 80070d4:	68ba      	ldr	r2, [r7, #8]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	bf0c      	ite	eq
 80070da:	2301      	moveq	r3, #1
 80070dc:	2300      	movne	r3, #0
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	461a      	mov	r2, r3
 80070e2:	79fb      	ldrb	r3, [r7, #7]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d19b      	bne.n	8007020 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3720      	adds	r7, #32
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	20000010 	.word	0x20000010

080070f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b088      	sub	sp, #32
 80070fc:	af02      	add	r7, sp, #8
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	9300      	str	r3, [sp, #0]
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	2201      	movs	r2, #1
 800710c:	2102      	movs	r1, #2
 800710e:	68f8      	ldr	r0, [r7, #12]
 8007110:	f7ff ff6a 	bl	8006fe8 <SPI_WaitFlagStateUntilTimeout>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d007      	beq.n	800712a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800711e:	f043 0220 	orr.w	r2, r3, #32
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	e032      	b.n	8007190 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800712a:	4b1b      	ldr	r3, [pc, #108]	@ (8007198 <SPI_EndRxTxTransaction+0xa0>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a1b      	ldr	r2, [pc, #108]	@ (800719c <SPI_EndRxTxTransaction+0xa4>)
 8007130:	fba2 2303 	umull	r2, r3, r2, r3
 8007134:	0d5b      	lsrs	r3, r3, #21
 8007136:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800713a:	fb02 f303 	mul.w	r3, r2, r3
 800713e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007148:	d112      	bne.n	8007170 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	9300      	str	r3, [sp, #0]
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	2200      	movs	r2, #0
 8007152:	2180      	movs	r1, #128	@ 0x80
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f7ff ff47 	bl	8006fe8 <SPI_WaitFlagStateUntilTimeout>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d016      	beq.n	800718e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007164:	f043 0220 	orr.w	r2, r3, #32
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800716c:	2303      	movs	r3, #3
 800716e:	e00f      	b.n	8007190 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00a      	beq.n	800718c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	3b01      	subs	r3, #1
 800717a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007186:	2b80      	cmp	r3, #128	@ 0x80
 8007188:	d0f2      	beq.n	8007170 <SPI_EndRxTxTransaction+0x78>
 800718a:	e000      	b.n	800718e <SPI_EndRxTxTransaction+0x96>
        break;
 800718c:	bf00      	nop
  }

  return HAL_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3718      	adds	r7, #24
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	20000010 	.word	0x20000010
 800719c:	165e9f81 	.word	0x165e9f81

080071a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d101      	bne.n	80071b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	e041      	b.n	8007236 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d106      	bne.n	80071cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f7fc fa5c 	bl	8003684 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2202      	movs	r2, #2
 80071d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	3304      	adds	r3, #4
 80071dc:	4619      	mov	r1, r3
 80071de:	4610      	mov	r0, r2
 80071e0:	f000 f8f4 	bl	80073cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3708      	adds	r7, #8
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b084      	sub	sp, #16
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007248:	2300      	movs	r3, #0
 800724a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007252:	2b01      	cmp	r3, #1
 8007254:	d101      	bne.n	800725a <HAL_TIM_ConfigClockSource+0x1c>
 8007256:	2302      	movs	r3, #2
 8007258:	e0b4      	b.n	80073c4 <HAL_TIM_ConfigClockSource+0x186>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2201      	movs	r2, #1
 800725e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2202      	movs	r2, #2
 8007266:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007278:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007280:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007292:	d03e      	beq.n	8007312 <HAL_TIM_ConfigClockSource+0xd4>
 8007294:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007298:	f200 8087 	bhi.w	80073aa <HAL_TIM_ConfigClockSource+0x16c>
 800729c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072a0:	f000 8086 	beq.w	80073b0 <HAL_TIM_ConfigClockSource+0x172>
 80072a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072a8:	d87f      	bhi.n	80073aa <HAL_TIM_ConfigClockSource+0x16c>
 80072aa:	2b70      	cmp	r3, #112	@ 0x70
 80072ac:	d01a      	beq.n	80072e4 <HAL_TIM_ConfigClockSource+0xa6>
 80072ae:	2b70      	cmp	r3, #112	@ 0x70
 80072b0:	d87b      	bhi.n	80073aa <HAL_TIM_ConfigClockSource+0x16c>
 80072b2:	2b60      	cmp	r3, #96	@ 0x60
 80072b4:	d050      	beq.n	8007358 <HAL_TIM_ConfigClockSource+0x11a>
 80072b6:	2b60      	cmp	r3, #96	@ 0x60
 80072b8:	d877      	bhi.n	80073aa <HAL_TIM_ConfigClockSource+0x16c>
 80072ba:	2b50      	cmp	r3, #80	@ 0x50
 80072bc:	d03c      	beq.n	8007338 <HAL_TIM_ConfigClockSource+0xfa>
 80072be:	2b50      	cmp	r3, #80	@ 0x50
 80072c0:	d873      	bhi.n	80073aa <HAL_TIM_ConfigClockSource+0x16c>
 80072c2:	2b40      	cmp	r3, #64	@ 0x40
 80072c4:	d058      	beq.n	8007378 <HAL_TIM_ConfigClockSource+0x13a>
 80072c6:	2b40      	cmp	r3, #64	@ 0x40
 80072c8:	d86f      	bhi.n	80073aa <HAL_TIM_ConfigClockSource+0x16c>
 80072ca:	2b30      	cmp	r3, #48	@ 0x30
 80072cc:	d064      	beq.n	8007398 <HAL_TIM_ConfigClockSource+0x15a>
 80072ce:	2b30      	cmp	r3, #48	@ 0x30
 80072d0:	d86b      	bhi.n	80073aa <HAL_TIM_ConfigClockSource+0x16c>
 80072d2:	2b20      	cmp	r3, #32
 80072d4:	d060      	beq.n	8007398 <HAL_TIM_ConfigClockSource+0x15a>
 80072d6:	2b20      	cmp	r3, #32
 80072d8:	d867      	bhi.n	80073aa <HAL_TIM_ConfigClockSource+0x16c>
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d05c      	beq.n	8007398 <HAL_TIM_ConfigClockSource+0x15a>
 80072de:	2b10      	cmp	r3, #16
 80072e0:	d05a      	beq.n	8007398 <HAL_TIM_ConfigClockSource+0x15a>
 80072e2:	e062      	b.n	80073aa <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80072f4:	f000 f990 	bl	8007618 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007306:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	609a      	str	r2, [r3, #8]
      break;
 8007310:	e04f      	b.n	80073b2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007322:	f000 f979 	bl	8007618 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	689a      	ldr	r2, [r3, #8]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007334:	609a      	str	r2, [r3, #8]
      break;
 8007336:	e03c      	b.n	80073b2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007344:	461a      	mov	r2, r3
 8007346:	f000 f8ed 	bl	8007524 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2150      	movs	r1, #80	@ 0x50
 8007350:	4618      	mov	r0, r3
 8007352:	f000 f946 	bl	80075e2 <TIM_ITRx_SetConfig>
      break;
 8007356:	e02c      	b.n	80073b2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007364:	461a      	mov	r2, r3
 8007366:	f000 f90c 	bl	8007582 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2160      	movs	r1, #96	@ 0x60
 8007370:	4618      	mov	r0, r3
 8007372:	f000 f936 	bl	80075e2 <TIM_ITRx_SetConfig>
      break;
 8007376:	e01c      	b.n	80073b2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007384:	461a      	mov	r2, r3
 8007386:	f000 f8cd 	bl	8007524 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2140      	movs	r1, #64	@ 0x40
 8007390:	4618      	mov	r0, r3
 8007392:	f000 f926 	bl	80075e2 <TIM_ITRx_SetConfig>
      break;
 8007396:	e00c      	b.n	80073b2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4619      	mov	r1, r3
 80073a2:	4610      	mov	r0, r2
 80073a4:	f000 f91d 	bl	80075e2 <TIM_ITRx_SetConfig>
      break;
 80073a8:	e003      	b.n	80073b2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	73fb      	strb	r3, [r7, #15]
      break;
 80073ae:	e000      	b.n	80073b2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80073b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80073c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a46      	ldr	r2, [pc, #280]	@ (80074f8 <TIM_Base_SetConfig+0x12c>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d013      	beq.n	800740c <TIM_Base_SetConfig+0x40>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073ea:	d00f      	beq.n	800740c <TIM_Base_SetConfig+0x40>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a43      	ldr	r2, [pc, #268]	@ (80074fc <TIM_Base_SetConfig+0x130>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d00b      	beq.n	800740c <TIM_Base_SetConfig+0x40>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a42      	ldr	r2, [pc, #264]	@ (8007500 <TIM_Base_SetConfig+0x134>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d007      	beq.n	800740c <TIM_Base_SetConfig+0x40>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a41      	ldr	r2, [pc, #260]	@ (8007504 <TIM_Base_SetConfig+0x138>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d003      	beq.n	800740c <TIM_Base_SetConfig+0x40>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a40      	ldr	r2, [pc, #256]	@ (8007508 <TIM_Base_SetConfig+0x13c>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d108      	bne.n	800741e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007412:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	4313      	orrs	r3, r2
 800741c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a35      	ldr	r2, [pc, #212]	@ (80074f8 <TIM_Base_SetConfig+0x12c>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d02b      	beq.n	800747e <TIM_Base_SetConfig+0xb2>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800742c:	d027      	beq.n	800747e <TIM_Base_SetConfig+0xb2>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a32      	ldr	r2, [pc, #200]	@ (80074fc <TIM_Base_SetConfig+0x130>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d023      	beq.n	800747e <TIM_Base_SetConfig+0xb2>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a31      	ldr	r2, [pc, #196]	@ (8007500 <TIM_Base_SetConfig+0x134>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d01f      	beq.n	800747e <TIM_Base_SetConfig+0xb2>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a30      	ldr	r2, [pc, #192]	@ (8007504 <TIM_Base_SetConfig+0x138>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d01b      	beq.n	800747e <TIM_Base_SetConfig+0xb2>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a2f      	ldr	r2, [pc, #188]	@ (8007508 <TIM_Base_SetConfig+0x13c>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d017      	beq.n	800747e <TIM_Base_SetConfig+0xb2>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4a2e      	ldr	r2, [pc, #184]	@ (800750c <TIM_Base_SetConfig+0x140>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d013      	beq.n	800747e <TIM_Base_SetConfig+0xb2>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a2d      	ldr	r2, [pc, #180]	@ (8007510 <TIM_Base_SetConfig+0x144>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d00f      	beq.n	800747e <TIM_Base_SetConfig+0xb2>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a2c      	ldr	r2, [pc, #176]	@ (8007514 <TIM_Base_SetConfig+0x148>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d00b      	beq.n	800747e <TIM_Base_SetConfig+0xb2>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a2b      	ldr	r2, [pc, #172]	@ (8007518 <TIM_Base_SetConfig+0x14c>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d007      	beq.n	800747e <TIM_Base_SetConfig+0xb2>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a2a      	ldr	r2, [pc, #168]	@ (800751c <TIM_Base_SetConfig+0x150>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d003      	beq.n	800747e <TIM_Base_SetConfig+0xb2>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a29      	ldr	r2, [pc, #164]	@ (8007520 <TIM_Base_SetConfig+0x154>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d108      	bne.n	8007490 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007484:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	4313      	orrs	r3, r2
 800748e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	695b      	ldr	r3, [r3, #20]
 800749a:	4313      	orrs	r3, r2
 800749c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	689a      	ldr	r2, [r3, #8]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a10      	ldr	r2, [pc, #64]	@ (80074f8 <TIM_Base_SetConfig+0x12c>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d003      	beq.n	80074c4 <TIM_Base_SetConfig+0xf8>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a12      	ldr	r2, [pc, #72]	@ (8007508 <TIM_Base_SetConfig+0x13c>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d103      	bne.n	80074cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	691a      	ldr	r2, [r3, #16]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	f003 0301 	and.w	r3, r3, #1
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d105      	bne.n	80074ea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	f023 0201 	bic.w	r2, r3, #1
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	611a      	str	r2, [r3, #16]
  }
}
 80074ea:	bf00      	nop
 80074ec:	3714      	adds	r7, #20
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr
 80074f6:	bf00      	nop
 80074f8:	40010000 	.word	0x40010000
 80074fc:	40000400 	.word	0x40000400
 8007500:	40000800 	.word	0x40000800
 8007504:	40000c00 	.word	0x40000c00
 8007508:	40010400 	.word	0x40010400
 800750c:	40014000 	.word	0x40014000
 8007510:	40014400 	.word	0x40014400
 8007514:	40014800 	.word	0x40014800
 8007518:	40001800 	.word	0x40001800
 800751c:	40001c00 	.word	0x40001c00
 8007520:	40002000 	.word	0x40002000

08007524 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007524:	b480      	push	{r7}
 8007526:	b087      	sub	sp, #28
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6a1b      	ldr	r3, [r3, #32]
 8007534:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6a1b      	ldr	r3, [r3, #32]
 800753a:	f023 0201 	bic.w	r2, r3, #1
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	699b      	ldr	r3, [r3, #24]
 8007546:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800754e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	011b      	lsls	r3, r3, #4
 8007554:	693a      	ldr	r2, [r7, #16]
 8007556:	4313      	orrs	r3, r2
 8007558:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	f023 030a 	bic.w	r3, r3, #10
 8007560:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	4313      	orrs	r3, r2
 8007568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	693a      	ldr	r2, [r7, #16]
 800756e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	697a      	ldr	r2, [r7, #20]
 8007574:	621a      	str	r2, [r3, #32]
}
 8007576:	bf00      	nop
 8007578:	371c      	adds	r7, #28
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007582:	b480      	push	{r7}
 8007584:	b087      	sub	sp, #28
 8007586:	af00      	add	r7, sp, #0
 8007588:	60f8      	str	r0, [r7, #12]
 800758a:	60b9      	str	r1, [r7, #8]
 800758c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6a1b      	ldr	r3, [r3, #32]
 8007592:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6a1b      	ldr	r3, [r3, #32]
 8007598:	f023 0210 	bic.w	r2, r3, #16
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	699b      	ldr	r3, [r3, #24]
 80075a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80075ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	031b      	lsls	r3, r3, #12
 80075b2:	693a      	ldr	r2, [r7, #16]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80075be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	011b      	lsls	r3, r3, #4
 80075c4:	697a      	ldr	r2, [r7, #20]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	693a      	ldr	r2, [r7, #16]
 80075ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	697a      	ldr	r2, [r7, #20]
 80075d4:	621a      	str	r2, [r3, #32]
}
 80075d6:	bf00      	nop
 80075d8:	371c      	adds	r7, #28
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr

080075e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80075e2:	b480      	push	{r7}
 80075e4:	b085      	sub	sp, #20
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
 80075ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80075fa:	683a      	ldr	r2, [r7, #0]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	4313      	orrs	r3, r2
 8007600:	f043 0307 	orr.w	r3, r3, #7
 8007604:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	68fa      	ldr	r2, [r7, #12]
 800760a:	609a      	str	r2, [r3, #8]
}
 800760c:	bf00      	nop
 800760e:	3714      	adds	r7, #20
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007618:	b480      	push	{r7}
 800761a:	b087      	sub	sp, #28
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]
 8007624:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007632:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	021a      	lsls	r2, r3, #8
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	431a      	orrs	r2, r3
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	4313      	orrs	r3, r2
 8007640:	697a      	ldr	r2, [r7, #20]
 8007642:	4313      	orrs	r3, r2
 8007644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	697a      	ldr	r2, [r7, #20]
 800764a:	609a      	str	r2, [r3, #8]
}
 800764c:	bf00      	nop
 800764e:	371c      	adds	r7, #28
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007668:	2b01      	cmp	r3, #1
 800766a:	d101      	bne.n	8007670 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800766c:	2302      	movs	r3, #2
 800766e:	e05a      	b.n	8007726 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2202      	movs	r2, #2
 800767c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007696:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	4313      	orrs	r3, r2
 80076a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a21      	ldr	r2, [pc, #132]	@ (8007734 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d022      	beq.n	80076fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076bc:	d01d      	beq.n	80076fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a1d      	ldr	r2, [pc, #116]	@ (8007738 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d018      	beq.n	80076fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a1b      	ldr	r2, [pc, #108]	@ (800773c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d013      	beq.n	80076fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a1a      	ldr	r2, [pc, #104]	@ (8007740 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d00e      	beq.n	80076fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a18      	ldr	r2, [pc, #96]	@ (8007744 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d009      	beq.n	80076fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a17      	ldr	r2, [pc, #92]	@ (8007748 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d004      	beq.n	80076fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a15      	ldr	r2, [pc, #84]	@ (800774c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d10c      	bne.n	8007714 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007700:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	68ba      	ldr	r2, [r7, #8]
 8007708:	4313      	orrs	r3, r2
 800770a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68ba      	ldr	r2, [r7, #8]
 8007712:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3714      	adds	r7, #20
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr
 8007732:	bf00      	nop
 8007734:	40010000 	.word	0x40010000
 8007738:	40000400 	.word	0x40000400
 800773c:	40000800 	.word	0x40000800
 8007740:	40000c00 	.word	0x40000c00
 8007744:	40010400 	.word	0x40010400
 8007748:	40014000 	.word	0x40014000
 800774c:	40001800 	.word	0x40001800

08007750 <siprintf>:
 8007750:	b40e      	push	{r1, r2, r3}
 8007752:	b500      	push	{lr}
 8007754:	b09c      	sub	sp, #112	@ 0x70
 8007756:	ab1d      	add	r3, sp, #116	@ 0x74
 8007758:	9002      	str	r0, [sp, #8]
 800775a:	9006      	str	r0, [sp, #24]
 800775c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007760:	4809      	ldr	r0, [pc, #36]	@ (8007788 <siprintf+0x38>)
 8007762:	9107      	str	r1, [sp, #28]
 8007764:	9104      	str	r1, [sp, #16]
 8007766:	4909      	ldr	r1, [pc, #36]	@ (800778c <siprintf+0x3c>)
 8007768:	f853 2b04 	ldr.w	r2, [r3], #4
 800776c:	9105      	str	r1, [sp, #20]
 800776e:	6800      	ldr	r0, [r0, #0]
 8007770:	9301      	str	r3, [sp, #4]
 8007772:	a902      	add	r1, sp, #8
 8007774:	f000 f994 	bl	8007aa0 <_svfiprintf_r>
 8007778:	9b02      	ldr	r3, [sp, #8]
 800777a:	2200      	movs	r2, #0
 800777c:	701a      	strb	r2, [r3, #0]
 800777e:	b01c      	add	sp, #112	@ 0x70
 8007780:	f85d eb04 	ldr.w	lr, [sp], #4
 8007784:	b003      	add	sp, #12
 8007786:	4770      	bx	lr
 8007788:	2000001c 	.word	0x2000001c
 800778c:	ffff0208 	.word	0xffff0208

08007790 <memset>:
 8007790:	4402      	add	r2, r0
 8007792:	4603      	mov	r3, r0
 8007794:	4293      	cmp	r3, r2
 8007796:	d100      	bne.n	800779a <memset+0xa>
 8007798:	4770      	bx	lr
 800779a:	f803 1b01 	strb.w	r1, [r3], #1
 800779e:	e7f9      	b.n	8007794 <memset+0x4>

080077a0 <__errno>:
 80077a0:	4b01      	ldr	r3, [pc, #4]	@ (80077a8 <__errno+0x8>)
 80077a2:	6818      	ldr	r0, [r3, #0]
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop
 80077a8:	2000001c 	.word	0x2000001c

080077ac <__libc_init_array>:
 80077ac:	b570      	push	{r4, r5, r6, lr}
 80077ae:	4d0d      	ldr	r5, [pc, #52]	@ (80077e4 <__libc_init_array+0x38>)
 80077b0:	4c0d      	ldr	r4, [pc, #52]	@ (80077e8 <__libc_init_array+0x3c>)
 80077b2:	1b64      	subs	r4, r4, r5
 80077b4:	10a4      	asrs	r4, r4, #2
 80077b6:	2600      	movs	r6, #0
 80077b8:	42a6      	cmp	r6, r4
 80077ba:	d109      	bne.n	80077d0 <__libc_init_array+0x24>
 80077bc:	4d0b      	ldr	r5, [pc, #44]	@ (80077ec <__libc_init_array+0x40>)
 80077be:	4c0c      	ldr	r4, [pc, #48]	@ (80077f0 <__libc_init_array+0x44>)
 80077c0:	f000 fc66 	bl	8008090 <_init>
 80077c4:	1b64      	subs	r4, r4, r5
 80077c6:	10a4      	asrs	r4, r4, #2
 80077c8:	2600      	movs	r6, #0
 80077ca:	42a6      	cmp	r6, r4
 80077cc:	d105      	bne.n	80077da <__libc_init_array+0x2e>
 80077ce:	bd70      	pop	{r4, r5, r6, pc}
 80077d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80077d4:	4798      	blx	r3
 80077d6:	3601      	adds	r6, #1
 80077d8:	e7ee      	b.n	80077b8 <__libc_init_array+0xc>
 80077da:	f855 3b04 	ldr.w	r3, [r5], #4
 80077de:	4798      	blx	r3
 80077e0:	3601      	adds	r6, #1
 80077e2:	e7f2      	b.n	80077ca <__libc_init_array+0x1e>
 80077e4:	0800930c 	.word	0x0800930c
 80077e8:	0800930c 	.word	0x0800930c
 80077ec:	0800930c 	.word	0x0800930c
 80077f0:	08009310 	.word	0x08009310

080077f4 <__retarget_lock_acquire_recursive>:
 80077f4:	4770      	bx	lr

080077f6 <__retarget_lock_release_recursive>:
 80077f6:	4770      	bx	lr

080077f8 <_free_r>:
 80077f8:	b538      	push	{r3, r4, r5, lr}
 80077fa:	4605      	mov	r5, r0
 80077fc:	2900      	cmp	r1, #0
 80077fe:	d041      	beq.n	8007884 <_free_r+0x8c>
 8007800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007804:	1f0c      	subs	r4, r1, #4
 8007806:	2b00      	cmp	r3, #0
 8007808:	bfb8      	it	lt
 800780a:	18e4      	addlt	r4, r4, r3
 800780c:	f000 f8e0 	bl	80079d0 <__malloc_lock>
 8007810:	4a1d      	ldr	r2, [pc, #116]	@ (8007888 <_free_r+0x90>)
 8007812:	6813      	ldr	r3, [r2, #0]
 8007814:	b933      	cbnz	r3, 8007824 <_free_r+0x2c>
 8007816:	6063      	str	r3, [r4, #4]
 8007818:	6014      	str	r4, [r2, #0]
 800781a:	4628      	mov	r0, r5
 800781c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007820:	f000 b8dc 	b.w	80079dc <__malloc_unlock>
 8007824:	42a3      	cmp	r3, r4
 8007826:	d908      	bls.n	800783a <_free_r+0x42>
 8007828:	6820      	ldr	r0, [r4, #0]
 800782a:	1821      	adds	r1, r4, r0
 800782c:	428b      	cmp	r3, r1
 800782e:	bf01      	itttt	eq
 8007830:	6819      	ldreq	r1, [r3, #0]
 8007832:	685b      	ldreq	r3, [r3, #4]
 8007834:	1809      	addeq	r1, r1, r0
 8007836:	6021      	streq	r1, [r4, #0]
 8007838:	e7ed      	b.n	8007816 <_free_r+0x1e>
 800783a:	461a      	mov	r2, r3
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	b10b      	cbz	r3, 8007844 <_free_r+0x4c>
 8007840:	42a3      	cmp	r3, r4
 8007842:	d9fa      	bls.n	800783a <_free_r+0x42>
 8007844:	6811      	ldr	r1, [r2, #0]
 8007846:	1850      	adds	r0, r2, r1
 8007848:	42a0      	cmp	r0, r4
 800784a:	d10b      	bne.n	8007864 <_free_r+0x6c>
 800784c:	6820      	ldr	r0, [r4, #0]
 800784e:	4401      	add	r1, r0
 8007850:	1850      	adds	r0, r2, r1
 8007852:	4283      	cmp	r3, r0
 8007854:	6011      	str	r1, [r2, #0]
 8007856:	d1e0      	bne.n	800781a <_free_r+0x22>
 8007858:	6818      	ldr	r0, [r3, #0]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	6053      	str	r3, [r2, #4]
 800785e:	4408      	add	r0, r1
 8007860:	6010      	str	r0, [r2, #0]
 8007862:	e7da      	b.n	800781a <_free_r+0x22>
 8007864:	d902      	bls.n	800786c <_free_r+0x74>
 8007866:	230c      	movs	r3, #12
 8007868:	602b      	str	r3, [r5, #0]
 800786a:	e7d6      	b.n	800781a <_free_r+0x22>
 800786c:	6820      	ldr	r0, [r4, #0]
 800786e:	1821      	adds	r1, r4, r0
 8007870:	428b      	cmp	r3, r1
 8007872:	bf04      	itt	eq
 8007874:	6819      	ldreq	r1, [r3, #0]
 8007876:	685b      	ldreq	r3, [r3, #4]
 8007878:	6063      	str	r3, [r4, #4]
 800787a:	bf04      	itt	eq
 800787c:	1809      	addeq	r1, r1, r0
 800787e:	6021      	streq	r1, [r4, #0]
 8007880:	6054      	str	r4, [r2, #4]
 8007882:	e7ca      	b.n	800781a <_free_r+0x22>
 8007884:	bd38      	pop	{r3, r4, r5, pc}
 8007886:	bf00      	nop
 8007888:	20025d5c 	.word	0x20025d5c

0800788c <sbrk_aligned>:
 800788c:	b570      	push	{r4, r5, r6, lr}
 800788e:	4e0f      	ldr	r6, [pc, #60]	@ (80078cc <sbrk_aligned+0x40>)
 8007890:	460c      	mov	r4, r1
 8007892:	6831      	ldr	r1, [r6, #0]
 8007894:	4605      	mov	r5, r0
 8007896:	b911      	cbnz	r1, 800789e <sbrk_aligned+0x12>
 8007898:	f000 fba6 	bl	8007fe8 <_sbrk_r>
 800789c:	6030      	str	r0, [r6, #0]
 800789e:	4621      	mov	r1, r4
 80078a0:	4628      	mov	r0, r5
 80078a2:	f000 fba1 	bl	8007fe8 <_sbrk_r>
 80078a6:	1c43      	adds	r3, r0, #1
 80078a8:	d103      	bne.n	80078b2 <sbrk_aligned+0x26>
 80078aa:	f04f 34ff 	mov.w	r4, #4294967295
 80078ae:	4620      	mov	r0, r4
 80078b0:	bd70      	pop	{r4, r5, r6, pc}
 80078b2:	1cc4      	adds	r4, r0, #3
 80078b4:	f024 0403 	bic.w	r4, r4, #3
 80078b8:	42a0      	cmp	r0, r4
 80078ba:	d0f8      	beq.n	80078ae <sbrk_aligned+0x22>
 80078bc:	1a21      	subs	r1, r4, r0
 80078be:	4628      	mov	r0, r5
 80078c0:	f000 fb92 	bl	8007fe8 <_sbrk_r>
 80078c4:	3001      	adds	r0, #1
 80078c6:	d1f2      	bne.n	80078ae <sbrk_aligned+0x22>
 80078c8:	e7ef      	b.n	80078aa <sbrk_aligned+0x1e>
 80078ca:	bf00      	nop
 80078cc:	20025d58 	.word	0x20025d58

080078d0 <_malloc_r>:
 80078d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078d4:	1ccd      	adds	r5, r1, #3
 80078d6:	f025 0503 	bic.w	r5, r5, #3
 80078da:	3508      	adds	r5, #8
 80078dc:	2d0c      	cmp	r5, #12
 80078de:	bf38      	it	cc
 80078e0:	250c      	movcc	r5, #12
 80078e2:	2d00      	cmp	r5, #0
 80078e4:	4606      	mov	r6, r0
 80078e6:	db01      	blt.n	80078ec <_malloc_r+0x1c>
 80078e8:	42a9      	cmp	r1, r5
 80078ea:	d904      	bls.n	80078f6 <_malloc_r+0x26>
 80078ec:	230c      	movs	r3, #12
 80078ee:	6033      	str	r3, [r6, #0]
 80078f0:	2000      	movs	r0, #0
 80078f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80079cc <_malloc_r+0xfc>
 80078fa:	f000 f869 	bl	80079d0 <__malloc_lock>
 80078fe:	f8d8 3000 	ldr.w	r3, [r8]
 8007902:	461c      	mov	r4, r3
 8007904:	bb44      	cbnz	r4, 8007958 <_malloc_r+0x88>
 8007906:	4629      	mov	r1, r5
 8007908:	4630      	mov	r0, r6
 800790a:	f7ff ffbf 	bl	800788c <sbrk_aligned>
 800790e:	1c43      	adds	r3, r0, #1
 8007910:	4604      	mov	r4, r0
 8007912:	d158      	bne.n	80079c6 <_malloc_r+0xf6>
 8007914:	f8d8 4000 	ldr.w	r4, [r8]
 8007918:	4627      	mov	r7, r4
 800791a:	2f00      	cmp	r7, #0
 800791c:	d143      	bne.n	80079a6 <_malloc_r+0xd6>
 800791e:	2c00      	cmp	r4, #0
 8007920:	d04b      	beq.n	80079ba <_malloc_r+0xea>
 8007922:	6823      	ldr	r3, [r4, #0]
 8007924:	4639      	mov	r1, r7
 8007926:	4630      	mov	r0, r6
 8007928:	eb04 0903 	add.w	r9, r4, r3
 800792c:	f000 fb5c 	bl	8007fe8 <_sbrk_r>
 8007930:	4581      	cmp	r9, r0
 8007932:	d142      	bne.n	80079ba <_malloc_r+0xea>
 8007934:	6821      	ldr	r1, [r4, #0]
 8007936:	1a6d      	subs	r5, r5, r1
 8007938:	4629      	mov	r1, r5
 800793a:	4630      	mov	r0, r6
 800793c:	f7ff ffa6 	bl	800788c <sbrk_aligned>
 8007940:	3001      	adds	r0, #1
 8007942:	d03a      	beq.n	80079ba <_malloc_r+0xea>
 8007944:	6823      	ldr	r3, [r4, #0]
 8007946:	442b      	add	r3, r5
 8007948:	6023      	str	r3, [r4, #0]
 800794a:	f8d8 3000 	ldr.w	r3, [r8]
 800794e:	685a      	ldr	r2, [r3, #4]
 8007950:	bb62      	cbnz	r2, 80079ac <_malloc_r+0xdc>
 8007952:	f8c8 7000 	str.w	r7, [r8]
 8007956:	e00f      	b.n	8007978 <_malloc_r+0xa8>
 8007958:	6822      	ldr	r2, [r4, #0]
 800795a:	1b52      	subs	r2, r2, r5
 800795c:	d420      	bmi.n	80079a0 <_malloc_r+0xd0>
 800795e:	2a0b      	cmp	r2, #11
 8007960:	d917      	bls.n	8007992 <_malloc_r+0xc2>
 8007962:	1961      	adds	r1, r4, r5
 8007964:	42a3      	cmp	r3, r4
 8007966:	6025      	str	r5, [r4, #0]
 8007968:	bf18      	it	ne
 800796a:	6059      	strne	r1, [r3, #4]
 800796c:	6863      	ldr	r3, [r4, #4]
 800796e:	bf08      	it	eq
 8007970:	f8c8 1000 	streq.w	r1, [r8]
 8007974:	5162      	str	r2, [r4, r5]
 8007976:	604b      	str	r3, [r1, #4]
 8007978:	4630      	mov	r0, r6
 800797a:	f000 f82f 	bl	80079dc <__malloc_unlock>
 800797e:	f104 000b 	add.w	r0, r4, #11
 8007982:	1d23      	adds	r3, r4, #4
 8007984:	f020 0007 	bic.w	r0, r0, #7
 8007988:	1ac2      	subs	r2, r0, r3
 800798a:	bf1c      	itt	ne
 800798c:	1a1b      	subne	r3, r3, r0
 800798e:	50a3      	strne	r3, [r4, r2]
 8007990:	e7af      	b.n	80078f2 <_malloc_r+0x22>
 8007992:	6862      	ldr	r2, [r4, #4]
 8007994:	42a3      	cmp	r3, r4
 8007996:	bf0c      	ite	eq
 8007998:	f8c8 2000 	streq.w	r2, [r8]
 800799c:	605a      	strne	r2, [r3, #4]
 800799e:	e7eb      	b.n	8007978 <_malloc_r+0xa8>
 80079a0:	4623      	mov	r3, r4
 80079a2:	6864      	ldr	r4, [r4, #4]
 80079a4:	e7ae      	b.n	8007904 <_malloc_r+0x34>
 80079a6:	463c      	mov	r4, r7
 80079a8:	687f      	ldr	r7, [r7, #4]
 80079aa:	e7b6      	b.n	800791a <_malloc_r+0x4a>
 80079ac:	461a      	mov	r2, r3
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	42a3      	cmp	r3, r4
 80079b2:	d1fb      	bne.n	80079ac <_malloc_r+0xdc>
 80079b4:	2300      	movs	r3, #0
 80079b6:	6053      	str	r3, [r2, #4]
 80079b8:	e7de      	b.n	8007978 <_malloc_r+0xa8>
 80079ba:	230c      	movs	r3, #12
 80079bc:	6033      	str	r3, [r6, #0]
 80079be:	4630      	mov	r0, r6
 80079c0:	f000 f80c 	bl	80079dc <__malloc_unlock>
 80079c4:	e794      	b.n	80078f0 <_malloc_r+0x20>
 80079c6:	6005      	str	r5, [r0, #0]
 80079c8:	e7d6      	b.n	8007978 <_malloc_r+0xa8>
 80079ca:	bf00      	nop
 80079cc:	20025d5c 	.word	0x20025d5c

080079d0 <__malloc_lock>:
 80079d0:	4801      	ldr	r0, [pc, #4]	@ (80079d8 <__malloc_lock+0x8>)
 80079d2:	f7ff bf0f 	b.w	80077f4 <__retarget_lock_acquire_recursive>
 80079d6:	bf00      	nop
 80079d8:	20025d54 	.word	0x20025d54

080079dc <__malloc_unlock>:
 80079dc:	4801      	ldr	r0, [pc, #4]	@ (80079e4 <__malloc_unlock+0x8>)
 80079de:	f7ff bf0a 	b.w	80077f6 <__retarget_lock_release_recursive>
 80079e2:	bf00      	nop
 80079e4:	20025d54 	.word	0x20025d54

080079e8 <__ssputs_r>:
 80079e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079ec:	688e      	ldr	r6, [r1, #8]
 80079ee:	461f      	mov	r7, r3
 80079f0:	42be      	cmp	r6, r7
 80079f2:	680b      	ldr	r3, [r1, #0]
 80079f4:	4682      	mov	sl, r0
 80079f6:	460c      	mov	r4, r1
 80079f8:	4690      	mov	r8, r2
 80079fa:	d82d      	bhi.n	8007a58 <__ssputs_r+0x70>
 80079fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007a04:	d026      	beq.n	8007a54 <__ssputs_r+0x6c>
 8007a06:	6965      	ldr	r5, [r4, #20]
 8007a08:	6909      	ldr	r1, [r1, #16]
 8007a0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a0e:	eba3 0901 	sub.w	r9, r3, r1
 8007a12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a16:	1c7b      	adds	r3, r7, #1
 8007a18:	444b      	add	r3, r9
 8007a1a:	106d      	asrs	r5, r5, #1
 8007a1c:	429d      	cmp	r5, r3
 8007a1e:	bf38      	it	cc
 8007a20:	461d      	movcc	r5, r3
 8007a22:	0553      	lsls	r3, r2, #21
 8007a24:	d527      	bpl.n	8007a76 <__ssputs_r+0x8e>
 8007a26:	4629      	mov	r1, r5
 8007a28:	f7ff ff52 	bl	80078d0 <_malloc_r>
 8007a2c:	4606      	mov	r6, r0
 8007a2e:	b360      	cbz	r0, 8007a8a <__ssputs_r+0xa2>
 8007a30:	6921      	ldr	r1, [r4, #16]
 8007a32:	464a      	mov	r2, r9
 8007a34:	f000 fae8 	bl	8008008 <memcpy>
 8007a38:	89a3      	ldrh	r3, [r4, #12]
 8007a3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007a3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a42:	81a3      	strh	r3, [r4, #12]
 8007a44:	6126      	str	r6, [r4, #16]
 8007a46:	6165      	str	r5, [r4, #20]
 8007a48:	444e      	add	r6, r9
 8007a4a:	eba5 0509 	sub.w	r5, r5, r9
 8007a4e:	6026      	str	r6, [r4, #0]
 8007a50:	60a5      	str	r5, [r4, #8]
 8007a52:	463e      	mov	r6, r7
 8007a54:	42be      	cmp	r6, r7
 8007a56:	d900      	bls.n	8007a5a <__ssputs_r+0x72>
 8007a58:	463e      	mov	r6, r7
 8007a5a:	6820      	ldr	r0, [r4, #0]
 8007a5c:	4632      	mov	r2, r6
 8007a5e:	4641      	mov	r1, r8
 8007a60:	f000 faa8 	bl	8007fb4 <memmove>
 8007a64:	68a3      	ldr	r3, [r4, #8]
 8007a66:	1b9b      	subs	r3, r3, r6
 8007a68:	60a3      	str	r3, [r4, #8]
 8007a6a:	6823      	ldr	r3, [r4, #0]
 8007a6c:	4433      	add	r3, r6
 8007a6e:	6023      	str	r3, [r4, #0]
 8007a70:	2000      	movs	r0, #0
 8007a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a76:	462a      	mov	r2, r5
 8007a78:	f000 fad4 	bl	8008024 <_realloc_r>
 8007a7c:	4606      	mov	r6, r0
 8007a7e:	2800      	cmp	r0, #0
 8007a80:	d1e0      	bne.n	8007a44 <__ssputs_r+0x5c>
 8007a82:	6921      	ldr	r1, [r4, #16]
 8007a84:	4650      	mov	r0, sl
 8007a86:	f7ff feb7 	bl	80077f8 <_free_r>
 8007a8a:	230c      	movs	r3, #12
 8007a8c:	f8ca 3000 	str.w	r3, [sl]
 8007a90:	89a3      	ldrh	r3, [r4, #12]
 8007a92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a96:	81a3      	strh	r3, [r4, #12]
 8007a98:	f04f 30ff 	mov.w	r0, #4294967295
 8007a9c:	e7e9      	b.n	8007a72 <__ssputs_r+0x8a>
	...

08007aa0 <_svfiprintf_r>:
 8007aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa4:	4698      	mov	r8, r3
 8007aa6:	898b      	ldrh	r3, [r1, #12]
 8007aa8:	061b      	lsls	r3, r3, #24
 8007aaa:	b09d      	sub	sp, #116	@ 0x74
 8007aac:	4607      	mov	r7, r0
 8007aae:	460d      	mov	r5, r1
 8007ab0:	4614      	mov	r4, r2
 8007ab2:	d510      	bpl.n	8007ad6 <_svfiprintf_r+0x36>
 8007ab4:	690b      	ldr	r3, [r1, #16]
 8007ab6:	b973      	cbnz	r3, 8007ad6 <_svfiprintf_r+0x36>
 8007ab8:	2140      	movs	r1, #64	@ 0x40
 8007aba:	f7ff ff09 	bl	80078d0 <_malloc_r>
 8007abe:	6028      	str	r0, [r5, #0]
 8007ac0:	6128      	str	r0, [r5, #16]
 8007ac2:	b930      	cbnz	r0, 8007ad2 <_svfiprintf_r+0x32>
 8007ac4:	230c      	movs	r3, #12
 8007ac6:	603b      	str	r3, [r7, #0]
 8007ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8007acc:	b01d      	add	sp, #116	@ 0x74
 8007ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad2:	2340      	movs	r3, #64	@ 0x40
 8007ad4:	616b      	str	r3, [r5, #20]
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ada:	2320      	movs	r3, #32
 8007adc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ae0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ae4:	2330      	movs	r3, #48	@ 0x30
 8007ae6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007c84 <_svfiprintf_r+0x1e4>
 8007aea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007aee:	f04f 0901 	mov.w	r9, #1
 8007af2:	4623      	mov	r3, r4
 8007af4:	469a      	mov	sl, r3
 8007af6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007afa:	b10a      	cbz	r2, 8007b00 <_svfiprintf_r+0x60>
 8007afc:	2a25      	cmp	r2, #37	@ 0x25
 8007afe:	d1f9      	bne.n	8007af4 <_svfiprintf_r+0x54>
 8007b00:	ebba 0b04 	subs.w	fp, sl, r4
 8007b04:	d00b      	beq.n	8007b1e <_svfiprintf_r+0x7e>
 8007b06:	465b      	mov	r3, fp
 8007b08:	4622      	mov	r2, r4
 8007b0a:	4629      	mov	r1, r5
 8007b0c:	4638      	mov	r0, r7
 8007b0e:	f7ff ff6b 	bl	80079e8 <__ssputs_r>
 8007b12:	3001      	adds	r0, #1
 8007b14:	f000 80a7 	beq.w	8007c66 <_svfiprintf_r+0x1c6>
 8007b18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b1a:	445a      	add	r2, fp
 8007b1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b1e:	f89a 3000 	ldrb.w	r3, [sl]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f000 809f 	beq.w	8007c66 <_svfiprintf_r+0x1c6>
 8007b28:	2300      	movs	r3, #0
 8007b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b32:	f10a 0a01 	add.w	sl, sl, #1
 8007b36:	9304      	str	r3, [sp, #16]
 8007b38:	9307      	str	r3, [sp, #28]
 8007b3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b3e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b40:	4654      	mov	r4, sl
 8007b42:	2205      	movs	r2, #5
 8007b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b48:	484e      	ldr	r0, [pc, #312]	@ (8007c84 <_svfiprintf_r+0x1e4>)
 8007b4a:	f7f8 fb51 	bl	80001f0 <memchr>
 8007b4e:	9a04      	ldr	r2, [sp, #16]
 8007b50:	b9d8      	cbnz	r0, 8007b8a <_svfiprintf_r+0xea>
 8007b52:	06d0      	lsls	r0, r2, #27
 8007b54:	bf44      	itt	mi
 8007b56:	2320      	movmi	r3, #32
 8007b58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b5c:	0711      	lsls	r1, r2, #28
 8007b5e:	bf44      	itt	mi
 8007b60:	232b      	movmi	r3, #43	@ 0x2b
 8007b62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b66:	f89a 3000 	ldrb.w	r3, [sl]
 8007b6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b6c:	d015      	beq.n	8007b9a <_svfiprintf_r+0xfa>
 8007b6e:	9a07      	ldr	r2, [sp, #28]
 8007b70:	4654      	mov	r4, sl
 8007b72:	2000      	movs	r0, #0
 8007b74:	f04f 0c0a 	mov.w	ip, #10
 8007b78:	4621      	mov	r1, r4
 8007b7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b7e:	3b30      	subs	r3, #48	@ 0x30
 8007b80:	2b09      	cmp	r3, #9
 8007b82:	d94b      	bls.n	8007c1c <_svfiprintf_r+0x17c>
 8007b84:	b1b0      	cbz	r0, 8007bb4 <_svfiprintf_r+0x114>
 8007b86:	9207      	str	r2, [sp, #28]
 8007b88:	e014      	b.n	8007bb4 <_svfiprintf_r+0x114>
 8007b8a:	eba0 0308 	sub.w	r3, r0, r8
 8007b8e:	fa09 f303 	lsl.w	r3, r9, r3
 8007b92:	4313      	orrs	r3, r2
 8007b94:	9304      	str	r3, [sp, #16]
 8007b96:	46a2      	mov	sl, r4
 8007b98:	e7d2      	b.n	8007b40 <_svfiprintf_r+0xa0>
 8007b9a:	9b03      	ldr	r3, [sp, #12]
 8007b9c:	1d19      	adds	r1, r3, #4
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	9103      	str	r1, [sp, #12]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	bfbb      	ittet	lt
 8007ba6:	425b      	neglt	r3, r3
 8007ba8:	f042 0202 	orrlt.w	r2, r2, #2
 8007bac:	9307      	strge	r3, [sp, #28]
 8007bae:	9307      	strlt	r3, [sp, #28]
 8007bb0:	bfb8      	it	lt
 8007bb2:	9204      	strlt	r2, [sp, #16]
 8007bb4:	7823      	ldrb	r3, [r4, #0]
 8007bb6:	2b2e      	cmp	r3, #46	@ 0x2e
 8007bb8:	d10a      	bne.n	8007bd0 <_svfiprintf_r+0x130>
 8007bba:	7863      	ldrb	r3, [r4, #1]
 8007bbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bbe:	d132      	bne.n	8007c26 <_svfiprintf_r+0x186>
 8007bc0:	9b03      	ldr	r3, [sp, #12]
 8007bc2:	1d1a      	adds	r2, r3, #4
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	9203      	str	r2, [sp, #12]
 8007bc8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007bcc:	3402      	adds	r4, #2
 8007bce:	9305      	str	r3, [sp, #20]
 8007bd0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007c94 <_svfiprintf_r+0x1f4>
 8007bd4:	7821      	ldrb	r1, [r4, #0]
 8007bd6:	2203      	movs	r2, #3
 8007bd8:	4650      	mov	r0, sl
 8007bda:	f7f8 fb09 	bl	80001f0 <memchr>
 8007bde:	b138      	cbz	r0, 8007bf0 <_svfiprintf_r+0x150>
 8007be0:	9b04      	ldr	r3, [sp, #16]
 8007be2:	eba0 000a 	sub.w	r0, r0, sl
 8007be6:	2240      	movs	r2, #64	@ 0x40
 8007be8:	4082      	lsls	r2, r0
 8007bea:	4313      	orrs	r3, r2
 8007bec:	3401      	adds	r4, #1
 8007bee:	9304      	str	r3, [sp, #16]
 8007bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bf4:	4824      	ldr	r0, [pc, #144]	@ (8007c88 <_svfiprintf_r+0x1e8>)
 8007bf6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007bfa:	2206      	movs	r2, #6
 8007bfc:	f7f8 faf8 	bl	80001f0 <memchr>
 8007c00:	2800      	cmp	r0, #0
 8007c02:	d036      	beq.n	8007c72 <_svfiprintf_r+0x1d2>
 8007c04:	4b21      	ldr	r3, [pc, #132]	@ (8007c8c <_svfiprintf_r+0x1ec>)
 8007c06:	bb1b      	cbnz	r3, 8007c50 <_svfiprintf_r+0x1b0>
 8007c08:	9b03      	ldr	r3, [sp, #12]
 8007c0a:	3307      	adds	r3, #7
 8007c0c:	f023 0307 	bic.w	r3, r3, #7
 8007c10:	3308      	adds	r3, #8
 8007c12:	9303      	str	r3, [sp, #12]
 8007c14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c16:	4433      	add	r3, r6
 8007c18:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c1a:	e76a      	b.n	8007af2 <_svfiprintf_r+0x52>
 8007c1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c20:	460c      	mov	r4, r1
 8007c22:	2001      	movs	r0, #1
 8007c24:	e7a8      	b.n	8007b78 <_svfiprintf_r+0xd8>
 8007c26:	2300      	movs	r3, #0
 8007c28:	3401      	adds	r4, #1
 8007c2a:	9305      	str	r3, [sp, #20]
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	f04f 0c0a 	mov.w	ip, #10
 8007c32:	4620      	mov	r0, r4
 8007c34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c38:	3a30      	subs	r2, #48	@ 0x30
 8007c3a:	2a09      	cmp	r2, #9
 8007c3c:	d903      	bls.n	8007c46 <_svfiprintf_r+0x1a6>
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d0c6      	beq.n	8007bd0 <_svfiprintf_r+0x130>
 8007c42:	9105      	str	r1, [sp, #20]
 8007c44:	e7c4      	b.n	8007bd0 <_svfiprintf_r+0x130>
 8007c46:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c4a:	4604      	mov	r4, r0
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e7f0      	b.n	8007c32 <_svfiprintf_r+0x192>
 8007c50:	ab03      	add	r3, sp, #12
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	462a      	mov	r2, r5
 8007c56:	4b0e      	ldr	r3, [pc, #56]	@ (8007c90 <_svfiprintf_r+0x1f0>)
 8007c58:	a904      	add	r1, sp, #16
 8007c5a:	4638      	mov	r0, r7
 8007c5c:	f3af 8000 	nop.w
 8007c60:	1c42      	adds	r2, r0, #1
 8007c62:	4606      	mov	r6, r0
 8007c64:	d1d6      	bne.n	8007c14 <_svfiprintf_r+0x174>
 8007c66:	89ab      	ldrh	r3, [r5, #12]
 8007c68:	065b      	lsls	r3, r3, #25
 8007c6a:	f53f af2d 	bmi.w	8007ac8 <_svfiprintf_r+0x28>
 8007c6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c70:	e72c      	b.n	8007acc <_svfiprintf_r+0x2c>
 8007c72:	ab03      	add	r3, sp, #12
 8007c74:	9300      	str	r3, [sp, #0]
 8007c76:	462a      	mov	r2, r5
 8007c78:	4b05      	ldr	r3, [pc, #20]	@ (8007c90 <_svfiprintf_r+0x1f0>)
 8007c7a:	a904      	add	r1, sp, #16
 8007c7c:	4638      	mov	r0, r7
 8007c7e:	f000 f879 	bl	8007d74 <_printf_i>
 8007c82:	e7ed      	b.n	8007c60 <_svfiprintf_r+0x1c0>
 8007c84:	080092d0 	.word	0x080092d0
 8007c88:	080092da 	.word	0x080092da
 8007c8c:	00000000 	.word	0x00000000
 8007c90:	080079e9 	.word	0x080079e9
 8007c94:	080092d6 	.word	0x080092d6

08007c98 <_printf_common>:
 8007c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c9c:	4616      	mov	r6, r2
 8007c9e:	4698      	mov	r8, r3
 8007ca0:	688a      	ldr	r2, [r1, #8]
 8007ca2:	690b      	ldr	r3, [r1, #16]
 8007ca4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	bfb8      	it	lt
 8007cac:	4613      	movlt	r3, r2
 8007cae:	6033      	str	r3, [r6, #0]
 8007cb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007cb4:	4607      	mov	r7, r0
 8007cb6:	460c      	mov	r4, r1
 8007cb8:	b10a      	cbz	r2, 8007cbe <_printf_common+0x26>
 8007cba:	3301      	adds	r3, #1
 8007cbc:	6033      	str	r3, [r6, #0]
 8007cbe:	6823      	ldr	r3, [r4, #0]
 8007cc0:	0699      	lsls	r1, r3, #26
 8007cc2:	bf42      	ittt	mi
 8007cc4:	6833      	ldrmi	r3, [r6, #0]
 8007cc6:	3302      	addmi	r3, #2
 8007cc8:	6033      	strmi	r3, [r6, #0]
 8007cca:	6825      	ldr	r5, [r4, #0]
 8007ccc:	f015 0506 	ands.w	r5, r5, #6
 8007cd0:	d106      	bne.n	8007ce0 <_printf_common+0x48>
 8007cd2:	f104 0a19 	add.w	sl, r4, #25
 8007cd6:	68e3      	ldr	r3, [r4, #12]
 8007cd8:	6832      	ldr	r2, [r6, #0]
 8007cda:	1a9b      	subs	r3, r3, r2
 8007cdc:	42ab      	cmp	r3, r5
 8007cde:	dc26      	bgt.n	8007d2e <_printf_common+0x96>
 8007ce0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007ce4:	6822      	ldr	r2, [r4, #0]
 8007ce6:	3b00      	subs	r3, #0
 8007ce8:	bf18      	it	ne
 8007cea:	2301      	movne	r3, #1
 8007cec:	0692      	lsls	r2, r2, #26
 8007cee:	d42b      	bmi.n	8007d48 <_printf_common+0xb0>
 8007cf0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007cf4:	4641      	mov	r1, r8
 8007cf6:	4638      	mov	r0, r7
 8007cf8:	47c8      	blx	r9
 8007cfa:	3001      	adds	r0, #1
 8007cfc:	d01e      	beq.n	8007d3c <_printf_common+0xa4>
 8007cfe:	6823      	ldr	r3, [r4, #0]
 8007d00:	6922      	ldr	r2, [r4, #16]
 8007d02:	f003 0306 	and.w	r3, r3, #6
 8007d06:	2b04      	cmp	r3, #4
 8007d08:	bf02      	ittt	eq
 8007d0a:	68e5      	ldreq	r5, [r4, #12]
 8007d0c:	6833      	ldreq	r3, [r6, #0]
 8007d0e:	1aed      	subeq	r5, r5, r3
 8007d10:	68a3      	ldr	r3, [r4, #8]
 8007d12:	bf0c      	ite	eq
 8007d14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d18:	2500      	movne	r5, #0
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	bfc4      	itt	gt
 8007d1e:	1a9b      	subgt	r3, r3, r2
 8007d20:	18ed      	addgt	r5, r5, r3
 8007d22:	2600      	movs	r6, #0
 8007d24:	341a      	adds	r4, #26
 8007d26:	42b5      	cmp	r5, r6
 8007d28:	d11a      	bne.n	8007d60 <_printf_common+0xc8>
 8007d2a:	2000      	movs	r0, #0
 8007d2c:	e008      	b.n	8007d40 <_printf_common+0xa8>
 8007d2e:	2301      	movs	r3, #1
 8007d30:	4652      	mov	r2, sl
 8007d32:	4641      	mov	r1, r8
 8007d34:	4638      	mov	r0, r7
 8007d36:	47c8      	blx	r9
 8007d38:	3001      	adds	r0, #1
 8007d3a:	d103      	bne.n	8007d44 <_printf_common+0xac>
 8007d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d44:	3501      	adds	r5, #1
 8007d46:	e7c6      	b.n	8007cd6 <_printf_common+0x3e>
 8007d48:	18e1      	adds	r1, r4, r3
 8007d4a:	1c5a      	adds	r2, r3, #1
 8007d4c:	2030      	movs	r0, #48	@ 0x30
 8007d4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007d52:	4422      	add	r2, r4
 8007d54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007d58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007d5c:	3302      	adds	r3, #2
 8007d5e:	e7c7      	b.n	8007cf0 <_printf_common+0x58>
 8007d60:	2301      	movs	r3, #1
 8007d62:	4622      	mov	r2, r4
 8007d64:	4641      	mov	r1, r8
 8007d66:	4638      	mov	r0, r7
 8007d68:	47c8      	blx	r9
 8007d6a:	3001      	adds	r0, #1
 8007d6c:	d0e6      	beq.n	8007d3c <_printf_common+0xa4>
 8007d6e:	3601      	adds	r6, #1
 8007d70:	e7d9      	b.n	8007d26 <_printf_common+0x8e>
	...

08007d74 <_printf_i>:
 8007d74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d78:	7e0f      	ldrb	r7, [r1, #24]
 8007d7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d7c:	2f78      	cmp	r7, #120	@ 0x78
 8007d7e:	4691      	mov	r9, r2
 8007d80:	4680      	mov	r8, r0
 8007d82:	460c      	mov	r4, r1
 8007d84:	469a      	mov	sl, r3
 8007d86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d8a:	d807      	bhi.n	8007d9c <_printf_i+0x28>
 8007d8c:	2f62      	cmp	r7, #98	@ 0x62
 8007d8e:	d80a      	bhi.n	8007da6 <_printf_i+0x32>
 8007d90:	2f00      	cmp	r7, #0
 8007d92:	f000 80d2 	beq.w	8007f3a <_printf_i+0x1c6>
 8007d96:	2f58      	cmp	r7, #88	@ 0x58
 8007d98:	f000 80b9 	beq.w	8007f0e <_printf_i+0x19a>
 8007d9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007da0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007da4:	e03a      	b.n	8007e1c <_printf_i+0xa8>
 8007da6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007daa:	2b15      	cmp	r3, #21
 8007dac:	d8f6      	bhi.n	8007d9c <_printf_i+0x28>
 8007dae:	a101      	add	r1, pc, #4	@ (adr r1, 8007db4 <_printf_i+0x40>)
 8007db0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007db4:	08007e0d 	.word	0x08007e0d
 8007db8:	08007e21 	.word	0x08007e21
 8007dbc:	08007d9d 	.word	0x08007d9d
 8007dc0:	08007d9d 	.word	0x08007d9d
 8007dc4:	08007d9d 	.word	0x08007d9d
 8007dc8:	08007d9d 	.word	0x08007d9d
 8007dcc:	08007e21 	.word	0x08007e21
 8007dd0:	08007d9d 	.word	0x08007d9d
 8007dd4:	08007d9d 	.word	0x08007d9d
 8007dd8:	08007d9d 	.word	0x08007d9d
 8007ddc:	08007d9d 	.word	0x08007d9d
 8007de0:	08007f21 	.word	0x08007f21
 8007de4:	08007e4b 	.word	0x08007e4b
 8007de8:	08007edb 	.word	0x08007edb
 8007dec:	08007d9d 	.word	0x08007d9d
 8007df0:	08007d9d 	.word	0x08007d9d
 8007df4:	08007f43 	.word	0x08007f43
 8007df8:	08007d9d 	.word	0x08007d9d
 8007dfc:	08007e4b 	.word	0x08007e4b
 8007e00:	08007d9d 	.word	0x08007d9d
 8007e04:	08007d9d 	.word	0x08007d9d
 8007e08:	08007ee3 	.word	0x08007ee3
 8007e0c:	6833      	ldr	r3, [r6, #0]
 8007e0e:	1d1a      	adds	r2, r3, #4
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	6032      	str	r2, [r6, #0]
 8007e14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e09d      	b.n	8007f5c <_printf_i+0x1e8>
 8007e20:	6833      	ldr	r3, [r6, #0]
 8007e22:	6820      	ldr	r0, [r4, #0]
 8007e24:	1d19      	adds	r1, r3, #4
 8007e26:	6031      	str	r1, [r6, #0]
 8007e28:	0606      	lsls	r6, r0, #24
 8007e2a:	d501      	bpl.n	8007e30 <_printf_i+0xbc>
 8007e2c:	681d      	ldr	r5, [r3, #0]
 8007e2e:	e003      	b.n	8007e38 <_printf_i+0xc4>
 8007e30:	0645      	lsls	r5, r0, #25
 8007e32:	d5fb      	bpl.n	8007e2c <_printf_i+0xb8>
 8007e34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007e38:	2d00      	cmp	r5, #0
 8007e3a:	da03      	bge.n	8007e44 <_printf_i+0xd0>
 8007e3c:	232d      	movs	r3, #45	@ 0x2d
 8007e3e:	426d      	negs	r5, r5
 8007e40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e44:	4859      	ldr	r0, [pc, #356]	@ (8007fac <_printf_i+0x238>)
 8007e46:	230a      	movs	r3, #10
 8007e48:	e011      	b.n	8007e6e <_printf_i+0xfa>
 8007e4a:	6821      	ldr	r1, [r4, #0]
 8007e4c:	6833      	ldr	r3, [r6, #0]
 8007e4e:	0608      	lsls	r0, r1, #24
 8007e50:	f853 5b04 	ldr.w	r5, [r3], #4
 8007e54:	d402      	bmi.n	8007e5c <_printf_i+0xe8>
 8007e56:	0649      	lsls	r1, r1, #25
 8007e58:	bf48      	it	mi
 8007e5a:	b2ad      	uxthmi	r5, r5
 8007e5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007e5e:	4853      	ldr	r0, [pc, #332]	@ (8007fac <_printf_i+0x238>)
 8007e60:	6033      	str	r3, [r6, #0]
 8007e62:	bf14      	ite	ne
 8007e64:	230a      	movne	r3, #10
 8007e66:	2308      	moveq	r3, #8
 8007e68:	2100      	movs	r1, #0
 8007e6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e6e:	6866      	ldr	r6, [r4, #4]
 8007e70:	60a6      	str	r6, [r4, #8]
 8007e72:	2e00      	cmp	r6, #0
 8007e74:	bfa2      	ittt	ge
 8007e76:	6821      	ldrge	r1, [r4, #0]
 8007e78:	f021 0104 	bicge.w	r1, r1, #4
 8007e7c:	6021      	strge	r1, [r4, #0]
 8007e7e:	b90d      	cbnz	r5, 8007e84 <_printf_i+0x110>
 8007e80:	2e00      	cmp	r6, #0
 8007e82:	d04b      	beq.n	8007f1c <_printf_i+0x1a8>
 8007e84:	4616      	mov	r6, r2
 8007e86:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e8a:	fb03 5711 	mls	r7, r3, r1, r5
 8007e8e:	5dc7      	ldrb	r7, [r0, r7]
 8007e90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e94:	462f      	mov	r7, r5
 8007e96:	42bb      	cmp	r3, r7
 8007e98:	460d      	mov	r5, r1
 8007e9a:	d9f4      	bls.n	8007e86 <_printf_i+0x112>
 8007e9c:	2b08      	cmp	r3, #8
 8007e9e:	d10b      	bne.n	8007eb8 <_printf_i+0x144>
 8007ea0:	6823      	ldr	r3, [r4, #0]
 8007ea2:	07df      	lsls	r7, r3, #31
 8007ea4:	d508      	bpl.n	8007eb8 <_printf_i+0x144>
 8007ea6:	6923      	ldr	r3, [r4, #16]
 8007ea8:	6861      	ldr	r1, [r4, #4]
 8007eaa:	4299      	cmp	r1, r3
 8007eac:	bfde      	ittt	le
 8007eae:	2330      	movle	r3, #48	@ 0x30
 8007eb0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007eb4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007eb8:	1b92      	subs	r2, r2, r6
 8007eba:	6122      	str	r2, [r4, #16]
 8007ebc:	f8cd a000 	str.w	sl, [sp]
 8007ec0:	464b      	mov	r3, r9
 8007ec2:	aa03      	add	r2, sp, #12
 8007ec4:	4621      	mov	r1, r4
 8007ec6:	4640      	mov	r0, r8
 8007ec8:	f7ff fee6 	bl	8007c98 <_printf_common>
 8007ecc:	3001      	adds	r0, #1
 8007ece:	d14a      	bne.n	8007f66 <_printf_i+0x1f2>
 8007ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ed4:	b004      	add	sp, #16
 8007ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eda:	6823      	ldr	r3, [r4, #0]
 8007edc:	f043 0320 	orr.w	r3, r3, #32
 8007ee0:	6023      	str	r3, [r4, #0]
 8007ee2:	4833      	ldr	r0, [pc, #204]	@ (8007fb0 <_printf_i+0x23c>)
 8007ee4:	2778      	movs	r7, #120	@ 0x78
 8007ee6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007eea:	6823      	ldr	r3, [r4, #0]
 8007eec:	6831      	ldr	r1, [r6, #0]
 8007eee:	061f      	lsls	r7, r3, #24
 8007ef0:	f851 5b04 	ldr.w	r5, [r1], #4
 8007ef4:	d402      	bmi.n	8007efc <_printf_i+0x188>
 8007ef6:	065f      	lsls	r7, r3, #25
 8007ef8:	bf48      	it	mi
 8007efa:	b2ad      	uxthmi	r5, r5
 8007efc:	6031      	str	r1, [r6, #0]
 8007efe:	07d9      	lsls	r1, r3, #31
 8007f00:	bf44      	itt	mi
 8007f02:	f043 0320 	orrmi.w	r3, r3, #32
 8007f06:	6023      	strmi	r3, [r4, #0]
 8007f08:	b11d      	cbz	r5, 8007f12 <_printf_i+0x19e>
 8007f0a:	2310      	movs	r3, #16
 8007f0c:	e7ac      	b.n	8007e68 <_printf_i+0xf4>
 8007f0e:	4827      	ldr	r0, [pc, #156]	@ (8007fac <_printf_i+0x238>)
 8007f10:	e7e9      	b.n	8007ee6 <_printf_i+0x172>
 8007f12:	6823      	ldr	r3, [r4, #0]
 8007f14:	f023 0320 	bic.w	r3, r3, #32
 8007f18:	6023      	str	r3, [r4, #0]
 8007f1a:	e7f6      	b.n	8007f0a <_printf_i+0x196>
 8007f1c:	4616      	mov	r6, r2
 8007f1e:	e7bd      	b.n	8007e9c <_printf_i+0x128>
 8007f20:	6833      	ldr	r3, [r6, #0]
 8007f22:	6825      	ldr	r5, [r4, #0]
 8007f24:	6961      	ldr	r1, [r4, #20]
 8007f26:	1d18      	adds	r0, r3, #4
 8007f28:	6030      	str	r0, [r6, #0]
 8007f2a:	062e      	lsls	r6, r5, #24
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	d501      	bpl.n	8007f34 <_printf_i+0x1c0>
 8007f30:	6019      	str	r1, [r3, #0]
 8007f32:	e002      	b.n	8007f3a <_printf_i+0x1c6>
 8007f34:	0668      	lsls	r0, r5, #25
 8007f36:	d5fb      	bpl.n	8007f30 <_printf_i+0x1bc>
 8007f38:	8019      	strh	r1, [r3, #0]
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	6123      	str	r3, [r4, #16]
 8007f3e:	4616      	mov	r6, r2
 8007f40:	e7bc      	b.n	8007ebc <_printf_i+0x148>
 8007f42:	6833      	ldr	r3, [r6, #0]
 8007f44:	1d1a      	adds	r2, r3, #4
 8007f46:	6032      	str	r2, [r6, #0]
 8007f48:	681e      	ldr	r6, [r3, #0]
 8007f4a:	6862      	ldr	r2, [r4, #4]
 8007f4c:	2100      	movs	r1, #0
 8007f4e:	4630      	mov	r0, r6
 8007f50:	f7f8 f94e 	bl	80001f0 <memchr>
 8007f54:	b108      	cbz	r0, 8007f5a <_printf_i+0x1e6>
 8007f56:	1b80      	subs	r0, r0, r6
 8007f58:	6060      	str	r0, [r4, #4]
 8007f5a:	6863      	ldr	r3, [r4, #4]
 8007f5c:	6123      	str	r3, [r4, #16]
 8007f5e:	2300      	movs	r3, #0
 8007f60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f64:	e7aa      	b.n	8007ebc <_printf_i+0x148>
 8007f66:	6923      	ldr	r3, [r4, #16]
 8007f68:	4632      	mov	r2, r6
 8007f6a:	4649      	mov	r1, r9
 8007f6c:	4640      	mov	r0, r8
 8007f6e:	47d0      	blx	sl
 8007f70:	3001      	adds	r0, #1
 8007f72:	d0ad      	beq.n	8007ed0 <_printf_i+0x15c>
 8007f74:	6823      	ldr	r3, [r4, #0]
 8007f76:	079b      	lsls	r3, r3, #30
 8007f78:	d413      	bmi.n	8007fa2 <_printf_i+0x22e>
 8007f7a:	68e0      	ldr	r0, [r4, #12]
 8007f7c:	9b03      	ldr	r3, [sp, #12]
 8007f7e:	4298      	cmp	r0, r3
 8007f80:	bfb8      	it	lt
 8007f82:	4618      	movlt	r0, r3
 8007f84:	e7a6      	b.n	8007ed4 <_printf_i+0x160>
 8007f86:	2301      	movs	r3, #1
 8007f88:	4632      	mov	r2, r6
 8007f8a:	4649      	mov	r1, r9
 8007f8c:	4640      	mov	r0, r8
 8007f8e:	47d0      	blx	sl
 8007f90:	3001      	adds	r0, #1
 8007f92:	d09d      	beq.n	8007ed0 <_printf_i+0x15c>
 8007f94:	3501      	adds	r5, #1
 8007f96:	68e3      	ldr	r3, [r4, #12]
 8007f98:	9903      	ldr	r1, [sp, #12]
 8007f9a:	1a5b      	subs	r3, r3, r1
 8007f9c:	42ab      	cmp	r3, r5
 8007f9e:	dcf2      	bgt.n	8007f86 <_printf_i+0x212>
 8007fa0:	e7eb      	b.n	8007f7a <_printf_i+0x206>
 8007fa2:	2500      	movs	r5, #0
 8007fa4:	f104 0619 	add.w	r6, r4, #25
 8007fa8:	e7f5      	b.n	8007f96 <_printf_i+0x222>
 8007faa:	bf00      	nop
 8007fac:	080092e1 	.word	0x080092e1
 8007fb0:	080092f2 	.word	0x080092f2

08007fb4 <memmove>:
 8007fb4:	4288      	cmp	r0, r1
 8007fb6:	b510      	push	{r4, lr}
 8007fb8:	eb01 0402 	add.w	r4, r1, r2
 8007fbc:	d902      	bls.n	8007fc4 <memmove+0x10>
 8007fbe:	4284      	cmp	r4, r0
 8007fc0:	4623      	mov	r3, r4
 8007fc2:	d807      	bhi.n	8007fd4 <memmove+0x20>
 8007fc4:	1e43      	subs	r3, r0, #1
 8007fc6:	42a1      	cmp	r1, r4
 8007fc8:	d008      	beq.n	8007fdc <memmove+0x28>
 8007fca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007fce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007fd2:	e7f8      	b.n	8007fc6 <memmove+0x12>
 8007fd4:	4402      	add	r2, r0
 8007fd6:	4601      	mov	r1, r0
 8007fd8:	428a      	cmp	r2, r1
 8007fda:	d100      	bne.n	8007fde <memmove+0x2a>
 8007fdc:	bd10      	pop	{r4, pc}
 8007fde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007fe2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007fe6:	e7f7      	b.n	8007fd8 <memmove+0x24>

08007fe8 <_sbrk_r>:
 8007fe8:	b538      	push	{r3, r4, r5, lr}
 8007fea:	4d06      	ldr	r5, [pc, #24]	@ (8008004 <_sbrk_r+0x1c>)
 8007fec:	2300      	movs	r3, #0
 8007fee:	4604      	mov	r4, r0
 8007ff0:	4608      	mov	r0, r1
 8007ff2:	602b      	str	r3, [r5, #0]
 8007ff4:	f7fb fee6 	bl	8003dc4 <_sbrk>
 8007ff8:	1c43      	adds	r3, r0, #1
 8007ffa:	d102      	bne.n	8008002 <_sbrk_r+0x1a>
 8007ffc:	682b      	ldr	r3, [r5, #0]
 8007ffe:	b103      	cbz	r3, 8008002 <_sbrk_r+0x1a>
 8008000:	6023      	str	r3, [r4, #0]
 8008002:	bd38      	pop	{r3, r4, r5, pc}
 8008004:	20025d50 	.word	0x20025d50

08008008 <memcpy>:
 8008008:	440a      	add	r2, r1
 800800a:	4291      	cmp	r1, r2
 800800c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008010:	d100      	bne.n	8008014 <memcpy+0xc>
 8008012:	4770      	bx	lr
 8008014:	b510      	push	{r4, lr}
 8008016:	f811 4b01 	ldrb.w	r4, [r1], #1
 800801a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800801e:	4291      	cmp	r1, r2
 8008020:	d1f9      	bne.n	8008016 <memcpy+0xe>
 8008022:	bd10      	pop	{r4, pc}

08008024 <_realloc_r>:
 8008024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008028:	4680      	mov	r8, r0
 800802a:	4615      	mov	r5, r2
 800802c:	460c      	mov	r4, r1
 800802e:	b921      	cbnz	r1, 800803a <_realloc_r+0x16>
 8008030:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008034:	4611      	mov	r1, r2
 8008036:	f7ff bc4b 	b.w	80078d0 <_malloc_r>
 800803a:	b92a      	cbnz	r2, 8008048 <_realloc_r+0x24>
 800803c:	f7ff fbdc 	bl	80077f8 <_free_r>
 8008040:	2400      	movs	r4, #0
 8008042:	4620      	mov	r0, r4
 8008044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008048:	f000 f81a 	bl	8008080 <_malloc_usable_size_r>
 800804c:	4285      	cmp	r5, r0
 800804e:	4606      	mov	r6, r0
 8008050:	d802      	bhi.n	8008058 <_realloc_r+0x34>
 8008052:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008056:	d8f4      	bhi.n	8008042 <_realloc_r+0x1e>
 8008058:	4629      	mov	r1, r5
 800805a:	4640      	mov	r0, r8
 800805c:	f7ff fc38 	bl	80078d0 <_malloc_r>
 8008060:	4607      	mov	r7, r0
 8008062:	2800      	cmp	r0, #0
 8008064:	d0ec      	beq.n	8008040 <_realloc_r+0x1c>
 8008066:	42b5      	cmp	r5, r6
 8008068:	462a      	mov	r2, r5
 800806a:	4621      	mov	r1, r4
 800806c:	bf28      	it	cs
 800806e:	4632      	movcs	r2, r6
 8008070:	f7ff ffca 	bl	8008008 <memcpy>
 8008074:	4621      	mov	r1, r4
 8008076:	4640      	mov	r0, r8
 8008078:	f7ff fbbe 	bl	80077f8 <_free_r>
 800807c:	463c      	mov	r4, r7
 800807e:	e7e0      	b.n	8008042 <_realloc_r+0x1e>

08008080 <_malloc_usable_size_r>:
 8008080:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008084:	1f18      	subs	r0, r3, #4
 8008086:	2b00      	cmp	r3, #0
 8008088:	bfbc      	itt	lt
 800808a:	580b      	ldrlt	r3, [r1, r0]
 800808c:	18c0      	addlt	r0, r0, r3
 800808e:	4770      	bx	lr

08008090 <_init>:
 8008090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008092:	bf00      	nop
 8008094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008096:	bc08      	pop	{r3}
 8008098:	469e      	mov	lr, r3
 800809a:	4770      	bx	lr

0800809c <_fini>:
 800809c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800809e:	bf00      	nop
 80080a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080a2:	bc08      	pop	{r3}
 80080a4:	469e      	mov	lr, r3
 80080a6:	4770      	bx	lr
